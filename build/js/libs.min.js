!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(T,e){"use strict";function g(e){return null!=e&&e===e.window}var t=[],o=Object.getPrototypeOf,s=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,i=t.indexOf,n={},r=n.toString,m=n.hasOwnProperty,a=m.toString,c=a.call(Object),y={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},C=T.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var o,i,r=(n=n||C).createElement("script");if(r.text=e,t)for(o in u)(i=t[o]||t.getAttribute&&t.getAttribute(o))&&r.setAttribute(o,i);n.head.appendChild(r).parentNode.removeChild(r)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[r.call(e)]||"object":typeof e}var d="3.5.1",E=function(e,t){return new E.fn.init(e,t)};function f(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!b(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:d,constructor:E,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(n){return this.pushStack(E.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,n,o,i,r,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||b(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)o=e[t],"__proto__"!==t&&a!==o&&(c&&o&&(E.isPlainObject(o)||(i=Array.isArray(o)))?(n=a[t],r=i&&!Array.isArray(n)?[]:i||E.isPlainObject(n)?n:{},i=!1,a[t]=E.extend(c,r,o)):void 0!==o&&(a[t]=o));return a},E.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==r.call(e))&&(!(t=o(e))||"function"==typeof(n=m.call(t,"constructor")&&t.constructor)&&a.call(n)===c)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,o=0;if(f(e))for(n=e.length;o<n&&!1!==t.call(e[o],o,e[o]);o++);else for(o in e)if(!1===t.call(e[o],o,e[o]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(f(Object(e))?E.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,o=0,i=e.length;o<n;o++)e[i++]=t[o];return e.length=i,e},grep:function(e,t,n){for(var o=[],i=0,r=e.length,a=!n;i<r;i++)!t(e[i],i)!=a&&o.push(e[i]);return o},map:function(e,t,n){var o,i,r=0,a=[];if(f(e))for(o=e.length;r<o;r++)null!=(i=t(e[r],r,n))&&a.push(i);else for(r in e)null!=(i=t(e[r],r,n))&&a.push(i);return v(a)},guid:1,support:y}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var p=function(n){function d(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320))}function i(){S()}var e,p,x,r,a,h,f,g,w,l,c,S,T,s,C,v,u,m,y,E="sizzle"+ +new Date,b=n.document,k=0,o=0,A=le(),L=le(),P=le(),$=le(),M=function(e,t){return e===t&&(c=!0),0},O={}.hasOwnProperty,t=[],j=t.pop,D=t.push,H=t.push,I=t.slice,N=function(e,t){for(var n=0,o=e.length;n<o;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",z="[\\x20\\t\\r\\n\\f]",q="(?:\\\\[\\da-fA-F]{1,6}"+z+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\["+z+"*("+q+")(?:"+z+"*([*^$|!~]?=)"+z+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+z+"*\\]",B=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",W=new RegExp(z+"+","g"),_=new RegExp("^"+z+"+|((?:^|[^\\\\])(?:\\\\.)*)"+z+"+$","g"),X=new RegExp("^"+z+"*,"+z+"*"),Y=new RegExp("^"+z+"*([>+~]|"+z+")"+z+"*"),V=new RegExp(z+"|>"),U=new RegExp(B),Z=new RegExp("^"+q+"$"),G={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+z+"*(even|odd|(([+-]|)(\\d*)n|)"+z+"*(?:([+-]|)"+z+"*(\\d+)|))"+z+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+z+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+z+"*((?:-\\d)?\\d*)"+z+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,oe=new RegExp("\\\\[\\da-fA-F]{1,6}"+z+"?|\\\\([^\\r\\n\\f])","g"),ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=ye(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{H.apply(t=I.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){H={apply:t.length?function(e,t){D.apply(e,I.call(t))}:function(e,t){for(var n=e.length,o=0;e[n++]=t[o++];);e.length=n-1}}}function se(t,e,n,o){var i,r,a,s,l,c,u,d=e&&e.ownerDocument,f=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==f&&9!==f&&11!==f)return n;if(!o&&(S(e),e=e||T,C)){if(11!==f&&(l=te.exec(t)))if(i=l[1]){if(9===f){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(d&&(a=d.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(l[2])return H.apply(n,e.getElementsByTagName(t)),n;if((i=l[3])&&p.getElementsByClassName&&e.getElementsByClassName)return H.apply(n,e.getElementsByClassName(i)),n}if(p.qsa&&!$[t+" "]&&(!v||!v.test(t))&&(1!==f||"object"!==e.nodeName.toLowerCase())){if(u=t,d=e,1===f&&(V.test(t)||Y.test(t))){for((d=ne.test(t)&&ge(e.parentNode)||e)===e&&p.scope||((s=e.getAttribute("id"))?s=s.replace(ie,re):e.setAttribute("id",s=E)),r=(c=h(t)).length;r--;)c[r]=(s?"#"+s:":scope")+" "+me(c[r]);u=c.join(",")}try{return H.apply(n,d.querySelectorAll(u)),n}catch(e){$(t,!0)}finally{s===E&&e.removeAttribute("id")}}}return g(t.replace(_,"$1"),e,n,o)}function le(){var n=[];function o(e,t){return n.push(e+" ")>x.cacheLength&&delete o[n.shift()],o[e+" "]=t}return o}function ce(e){return e[E]=!0,e}function ue(e){var t=T.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),o=n.length;o--;)x.attrHandle[n[o]]=t}function fe(e,t){var n=t&&e,o=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(o)return o;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function he(a){return ce(function(r){return r=+r,ce(function(e,t){for(var n,o=a([],e.length,r),i=o.length;i--;)e[n=o[i]]&&(e[n]=!(t[n]=e[n]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=se.support={},a=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Q.test(t||n&&n.nodeName||"HTML")},S=se.setDocument=function(e){var t,n,o=e?e.ownerDocument||e:b;return o!=T&&9===o.nodeType&&o.documentElement&&(s=(T=o).documentElement,C=!a(T),b!=T&&(n=T.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",i,!1):n.attachEvent&&n.attachEvent("onunload",i)),p.scope=ue(function(e){return s.appendChild(e).appendChild(T.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),p.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=ue(function(e){return e.appendChild(T.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=ee.test(T.getElementsByClassName),p.getById=ue(function(e){return s.appendChild(e).id=E,!T.getElementsByName||!T.getElementsByName(E).length}),p.getById?(x.filter.ID=function(e){var t=e.replace(oe,d);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(oe,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var n,o,i,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(i=t.getElementsByName(e),o=0;r=i[o++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),x.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,o=[],i=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;n=r[i++];)1===n.nodeType&&o.push(n);return o},x.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&C)return t.getElementsByClassName(e)},u=[],v=[],(p.qsa=ee.test(T.querySelectorAll))&&(ue(function(e){var t;s.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+z+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+z+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+E+"-]").length||v.push("~="),(t=T.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+z+"*name"+z+"*="+z+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=T.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+z+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),s.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(p.matchesSelector=ee.test(m=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&ue(function(e){p.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),u.push("!=",B)}),v=v.length&&new RegExp(v.join("|")),u=u.length&&new RegExp(u.join("|")),t=ee.test(s.compareDocumentPosition),y=t||ee.test(s.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,o=t&&t.parentNode;return e===o||!(!o||1!==o.nodeType||!(n.contains?n.contains(o):e.compareDocumentPosition&&16&e.compareDocumentPosition(o)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},M=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e==T||e.ownerDocument==b&&y(b,e)?-1:t==T||t.ownerDocument==b&&y(b,t)?1:l?N(l,e)-N(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,o=0,i=e.parentNode,r=t.parentNode,a=[e],s=[t];if(!i||!r)return e==T?-1:t==T?1:i?-1:r?1:l?N(l,e)-N(l,t):0;if(i===r)return fe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[o]===s[o];)o++;return o?fe(a[o],s[o]):a[o]==b?-1:s[o]==b?1:0}),T},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(S(e),p.matchesSelector&&C&&!$[t+" "]&&(!u||!u.test(t))&&(!v||!v.test(t)))try{var n=m.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){$(t,!0)}return 0<se(t,T,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=T&&S(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=T&&S(e);var n=x.attrHandle[t.toLowerCase()],o=n&&O.call(x.attrHandle,t.toLowerCase())?n(e,t,!C):void 0;return void 0!==o?o:p.attributes||!C?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(ie,re)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],o=0,i=0;if(c=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(M),c){for(;t=e[i++];)t===e[i]&&(o=n.push(i));for(;o--;)e.splice(n[o],1)}return l=null,e},r=se.getText=function(e){var t,n="",o=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[o++];)n+=r(t);return n},(x=se.selectors={cacheLength:50,createPseudo:ce,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(oe,d),e[3]=(e[3]||e[4]||e[5]||"").replace(oe,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(oe,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=A[e+" "];return t||(t=new RegExp("(^|"+z+")"+e+"("+z+"|$)"))&&A(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,o,i){return function(e){var t=se.attr(e,n);return null==t?"!="===o:!o||(t+="","="===o?t===i:"!="===o?t!==i:"^="===o?i&&0===t.indexOf(i):"*="===o?i&&-1<t.indexOf(i):"$="===o?i&&t.slice(-i.length)===i:"~="===o?-1<(" "+t.replace(W," ")+" ").indexOf(i):"|="===o&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,v){var m="nth"!==h.slice(0,3),y="last"!==h.slice(-4),b="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var o,i,r,a,s,l,c=m!=y?"nextSibling":"previousSibling",u=e.parentNode,d=b&&e.nodeName.toLowerCase(),f=!n&&!b,p=!1;if(u){if(m){for(;c;){for(a=e;a=a[c];)if(b?a.nodeName.toLowerCase()===d:1===a.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&f){for(p=(s=(o=(i=(r=(a=u)[E]||(a[E]={}))[a.uniqueID]||(r[a.uniqueID]={}))[h]||[])[0]===k&&o[1])&&o[2],a=s&&u.childNodes[s];a=++s&&a&&a[c]||(p=s=0)||l.pop();)if(1===a.nodeType&&++p&&a===e){i[h]=[k,s,p];break}}else if(f&&(p=s=(o=(i=(r=(a=e)[E]||(a[E]={}))[a.uniqueID]||(r[a.uniqueID]={}))[h]||[])[0]===k&&o[1]),!1===p)for(;(a=++s&&a&&a[c]||(p=s=0)||l.pop())&&((b?a.nodeName.toLowerCase()!==d:1!==a.nodeType)||!++p||(f&&((i=(r=a[E]||(a[E]={}))[a.uniqueID]||(r[a.uniqueID]={}))[h]=[k,p]),a!==e)););return(p-=v)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,r){var t,a=x.pseudos[e]||x.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[E]?a(r):1<a.length?(t=[e,e,"",r],x.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,t){for(var n,o=a(e,r),i=o.length;i--;)e[n=N(e,o[i])]=!(t[n]=o[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:ce(function(e){var o=[],i=[],s=f(e.replace(_,"$1"));return s[E]?ce(function(e,t,n,o){for(var i,r=s(e,null,o,[]),a=e.length;a--;)(i=r[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return o[0]=e,s(o,null,n,i),o[0]=null,!i.pop()}}),has:ce(function(t){return function(e){return 0<se(t,e).length}}),contains:ce(function(t){return t=t.replace(oe,d),function(e){return-1<(e.textContent||r(e)).indexOf(t)}}),lang:ce(function(n){return Z.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(oe,d).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var o=n<0?n+t:t<n?t:n;0<=--o;)e.push(o);return e}),gt:he(function(e,t,n){for(var o=n<0?n+t:n;++o<t;)e.push(o);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function ve(){}function me(e){for(var t=0,n=e.length,o="";t<n;t++)o+=e[t].value;return o}function ye(s,e,t){var l=e.dir,c=e.next,u=c||l,d=t&&"parentNode"===u,f=o++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||d)return s(e,t,n);return!1}:function(e,t,n){var o,i,r,a=[k,f];if(n){for(;e=e[l];)if((1===e.nodeType||d)&&s(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(i=(r=e[E]||(e[E]={}))[e.uniqueID]||(r[e.uniqueID]={}),c&&c===e.nodeName.toLowerCase())e=e[l]||e;else{if((o=i[u])&&o[0]===k&&o[1]===f)return a[2]=o[2];if((i[u]=a)[2]=s(e,t,n))return!0}return!1}}function be(i){return 1<i.length?function(e,t,n){for(var o=i.length;o--;)if(!i[o](e,t,n))return!1;return!0}:i[0]}function xe(e,t,n,o,i){for(var r,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(r=e[s])&&(n&&!n(r,o,i)||(a.push(r),c&&t.push(s)));return a}function we(p,h,g,v,m,e){return v&&!v[E]&&(v=we(v)),m&&!m[E]&&(m=we(m,e)),ce(function(e,t,n,o){var i,r,a,s=[],l=[],c=t.length,u=e||function(e,t,n){for(var o=0,i=t.length;o<i;o++)se(e,t[o],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!p||!e&&h?u:xe(u,s,p,n,o),f=g?m||(e?p:c||v)?[]:t:d;if(g&&g(d,f,n,o),v)for(i=xe(f,l),v(i,[],n,o),r=i.length;r--;)(a=i[r])&&(f[l[r]]=!(d[l[r]]=a));if(e){if(m||p){if(m){for(i=[],r=f.length;r--;)(a=f[r])&&i.push(d[r]=a);m(null,f=[],i,o)}for(r=f.length;r--;)(a=f[r])&&-1<(i=m?N(e,a):s[r])&&(e[i]=!(t[i]=a))}}else f=xe(f===t?f.splice(c,f.length):f),m?m(null,t,f,o):H.apply(t,f)})}function Se(v,m){function e(e,t,n,o,i){var r,a,s,l=0,c="0",u=e&&[],d=[],f=w,p=e||b&&x.find.TAG("*",i),h=k+=null==f?1:Math.random()||.1,g=p.length;for(i&&(w=t==T||t||i);c!==g&&null!=(r=p[c]);c++){if(b&&r){for(a=0,t||r.ownerDocument==T||(S(r),n=!C);s=v[a++];)if(s(r,t||T,n)){o.push(r);break}i&&(k=h)}y&&((r=!s&&r)&&l--,e&&u.push(r))}if(l+=c,y&&c!==l){for(a=0;s=m[a++];)s(u,d,t,n);if(e){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=j.call(o));d=xe(d)}H.apply(o,d),i&&!e&&0<d.length&&1<l+m.length&&se.uniqueSort(o)}return i&&(k=h,w=f),u}var y=0<m.length,b=0<v.length;return y?ce(e):e}return ve.prototype=x.filters=x.pseudos,x.setFilters=new ve,h=se.tokenize=function(e,t){var n,o,i,r,a,s,l,c=L[e+" "];if(c)return t?0:c.slice(0);for(a=e,s=[],l=x.preFilter;a;){for(r in n&&!(o=X.exec(a))||(o&&(a=a.slice(o[0].length)||a),s.push(i=[])),n=!1,(o=Y.exec(a))&&(n=o.shift(),i.push({value:n,type:o[0].replace(_," ")}),a=a.slice(n.length)),x.filter)!(o=G[r].exec(a))||l[r]&&!(o=l[r](o))||(n=o.shift(),i.push({value:n,type:r,matches:o}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):L(e,s).slice(0)},f=se.compile=function(e,t){var n,o=[],i=[],r=P[e+" "];if(!r){for(n=(t=t||h(e)).length;n--;)(r=function e(t){for(var i,n,o,r=t.length,a=x.relative[t[0].type],s=a||x.relative[" "],l=a?1:0,c=ye(function(e){return e===i},s,!0),u=ye(function(e){return-1<N(i,e)},s,!0),d=[function(e,t,n){var o=!a&&(n||t!==w)||((i=t).nodeType?c:u)(e,t,n);return i=null,o}];l<r;l++)if(n=x.relative[t[l].type])d=[ye(be(d),n)];else{if((n=x.filter[t[l].type].apply(null,t[l].matches))[E]){for(o=++l;o<r&&!x.relative[t[o].type];o++);return we(1<l&&be(d),1<l&&me(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(_,"$1"),n,l<o&&e(t.slice(l,o)),o<r&&e(t=t.slice(o)),o<r&&me(t))}d.push(n)}return be(d)}(t[n]))[E]?o.push(r):i.push(r);(r=P(e,Se(i,o))).selector=e}return r},g=se.select=function(e,t,n,o){var i,r,a,s,l,c="function"==typeof e&&e,u=!o&&h(e=c.selector||e);if(n=n||[],1===u.length){if(2<(r=u[0]=u[0].slice(0)).length&&"ID"===(a=r[0]).type&&9===t.nodeType&&C&&x.relative[r[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(oe,d),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(i=G.needsContext.test(e)?0:r.length;i--&&(a=r[i],!x.relative[s=a.type]);)if((l=x.find[s])&&(o=l(a.matches[0].replace(oe,d),ne.test(r[0].type)&&ge(t.parentNode)||t))){if(r.splice(i,1),!(e=o.length&&me(r)))return H.apply(n,o),n;break}}return(c||f(e,u))(o,t,!C,n,!t||ne.test(e)&&ge(t.parentNode)||t),n},p.sortStable=E.split("").sort(M).join("")===E,p.detectDuplicates=!!c,S(),p.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(T.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||de(R,function(e,t,n){var o;if(!n)return!0===e[t]?t.toLowerCase():(o=e.getAttributeNode(t))&&o.specified?o.value:null}),se}(T);E.find=p,E.expr=p.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=p.uniqueSort,E.text=p.getText,E.isXMLDoc=p.isXML,E.contains=p.contains,E.escapeSelector=p.escape;function h(e,t,n){for(var o=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&E(e).is(n))break;o.push(e)}return o}function S(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var k=E.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var L=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,n,o){return b(n)?E.grep(e,function(e,t){return!!n.call(e,t,e)!==o}):n.nodeType?E.grep(e,function(e){return e===n!==o}):"string"!=typeof n?E.grep(e,function(e){return-1<i.call(n,e)!==o}):E.filter(n,e,o)}E.filter=function(e,t,n){var o=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===o.nodeType?E.find.matchesSelector(o,e)?[o]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,o=this.length,i=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<o;t++)if(E.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<o;t++)E.find(e,i[t],n);return 1<o?E.uniqueSort(n):n},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&k.test(e)?E(e):e||[],!1).length}});var $,M=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var o,i;if(!e)return this;if(n=n||$,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this);if(!(o="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:M.exec(e))||!o[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(o[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(o[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),L.test(o[1])&&E.isPlainObject(t))for(o in t)b(this[o])?this[o](t[o]):this.attr(o,t[o]);return this}return(i=C.getElementById(o[2]))&&(this[0]=i,this.length=1),this}).prototype=E.fn,$=E(C);var O=/^(?:parents|prev(?:Until|All))/,j={children:!0,contents:!0,next:!0,prev:!0};function D(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,o=0,i=this.length,r=[],a="string"!=typeof e&&E(e);if(!k.test(e))for(;o<i;o++)for(n=this[o];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&E.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(1<r.length?E.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?i.call(E(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,"parentNode")},parentsUntil:function(e,t,n){return h(e,"parentNode",n)},next:function(e){return D(e,"nextSibling")},prev:function(e){return D(e,"previousSibling")},nextAll:function(e){return h(e,"nextSibling")},prevAll:function(e){return h(e,"previousSibling")},nextUntil:function(e,t,n){return h(e,"nextSibling",n)},prevUntil:function(e,t,n){return h(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return null!=e.contentDocument&&o(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(o,i){E.fn[o]=function(e,t){var n=E.map(this,i,e);return"Until"!==o.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=E.filter(t,n)),1<this.length&&(j[o]||E.uniqueSort(n),O.test(o)&&n.reverse()),this.pushStack(n)}});var H=/[^\x20\t\r\n\f]+/g;function I(e){return e}function N(e){throw e}function R(e,t,n,o){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(n):e&&b(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(o))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(o){var e,n;o="string"==typeof o?(e=o,n={},E.each(e.match(H)||[],function(e,t){n[t]=!0}),n):E.extend({},o);function i(){for(s=s||o.once,a=r=!0;c.length;u=-1)for(t=c.shift();++u<l.length;)!1===l[u].apply(t[0],t[1])&&o.stopOnFalse&&(u=l.length,t=!1);o.memory||(t=!1),r=!1,s&&(l=t?[]:"")}var r,t,a,s,l=[],c=[],u=-1,d={add:function(){return l&&(t&&!r&&(u=l.length-1,c.push(t)),function n(e){E.each(e,function(e,t){b(t)?o.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),t&&!r&&i()),this},remove:function(){return E.each(arguments,function(e,t){for(var n;-1<(n=E.inArray(t,l,n));)l.splice(n,1),n<=u&&u--}),this},has:function(e){return e?-1<E.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return s=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return s=c=[],t||r||(l=t=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),r||i()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!a}};return d},E.extend({Deferred:function(e){var r=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var i=arguments;return E.Deferred(function(o){E.each(r,function(e,t){var n=b(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(o.notify).done(o.resolve).fail(o.reject):o[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,o){var l=0;function c(i,r,a,s){return function(){function e(){var e,t;if(!(i<l)){if((e=a.apply(n,o))===r.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,b(t)?s?t.call(e,c(l,r,I,s),c(l,r,N,s)):(l++,t.call(e,c(l,r,I,s),c(l,r,N,s),c(l,r,I,r.notifyWith))):(a!==I&&(n=void 0,o=[e]),(s||r.resolveWith)(n,o))}}var n=this,o=arguments,t=s?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),l<=i+1&&(a!==N&&(n=void 0,o=[e]),r.rejectWith(n,o))}};i?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),T.setTimeout(t))}}return E.Deferred(function(e){r[0][3].add(c(0,e,b(o)?o:I,e.notifyWith)),r[1][3].add(c(0,e,b(t)?t:I)),r[2][3].add(c(0,e,b(n)?n:N))}).promise()},promise:function(e){return null!=e?E.extend(e,a):a}},s={};return E.each(r,function(e,t){var n=t[2],o=t[5];a[t[1]]=n.add,o&&n.add(function(){i=o},r[3-e][2].disable,r[3-e][3].disable,r[0][2].lock,r[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){function t(t){return function(e){i[t]=this,r[t]=1<arguments.length?s.call(arguments):e,--n||a.resolveWith(i,r)}}var n=arguments.length,o=n,i=Array(o),r=s.call(arguments),a=E.Deferred();if(n<=1&&(R(e,a.done(t(o)).resolve,a.reject,!n),"pending"===a.state()||b(r[o]&&r[o].then)))return a.then();for(;o--;)R(r[o],t(o),a.reject);return a.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){T.console&&T.console.warn&&e&&z.test(e.name)&&T.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){T.setTimeout(function(){throw e})};var q=E.Deferred();function F(){C.removeEventListener("DOMContentLoaded",F),T.removeEventListener("load",F),E.ready()}E.fn.ready=function(e){return q.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||q.resolveWith(C,[E])}}),E.ready.then=q.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?T.setTimeout(E.ready):(C.addEventListener("DOMContentLoaded",F),T.addEventListener("load",F));var B=function(e,t,n,o,i,r,a){var s=0,l=e.length,c=null==n;if("object"===w(n))for(s in i=!0,n)B(e,t,s,n[s],!0,r,a);else if(void 0!==o&&(i=!0,b(o)||(a=!0),c&&(t=a?(t.call(e,o),null):(c=t,function(e,t,n){return c.call(E(e),n)})),t))for(;s<l;s++)t(e[s],n,a?o:o.call(e[s],s,t(e[s],n)));return i?e:c?t.call(e):l?t(e[0],n):r},W=/^-ms-/,_=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function Y(e){return e.replace(W,"ms-").replace(_,X)}function V(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function U(){this.expando=E.expando+U.uid++}U.uid=1,U.prototype={cache:function(e){var t=e[this.expando];return t||(t={},V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var o,i=this.cache(e);if("string"==typeof t)i[Y(t)]=n;else for(o in t)i[Y(o)]=t[o];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,o=e[this.expando];if(void 0!==o){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in o?[t]:t.match(H)||[]).length;for(;n--;)delete o[t[n]]}void 0!==t&&!E.isEmptyObject(o)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var Z=new U,G=new U,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,K=/[A-Z]/g;function J(e,t,n){var o,i;if(void 0===n&&1===e.nodeType)if(o="data-"+t.replace(K,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(o))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:Q.test(i)?JSON.parse(i):i)}catch(e){}G.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return G.hasData(e)||Z.hasData(e)},data:function(e,t,n){return G.access(e,t,n)},removeData:function(e,t){G.remove(e,t)},_data:function(e,t,n){return Z.access(e,t,n)},_removeData:function(e,t){Z.remove(e,t)}}),E.fn.extend({data:function(n,e){var t,o,i,r=this[0],a=r&&r.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){G.set(this,n)}):B(this,function(e){var t;return r&&void 0===e?void 0!==(t=G.get(r,n))||void 0!==(t=J(r,n))?t:void 0:void this.each(function(){G.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(i=G.get(r),1===r.nodeType&&!Z.get(r,"hasDataAttrs"))){for(t=a.length;t--;)a[t]&&0===(o=a[t].name).indexOf("data-")&&(o=Y(o.slice(5)),J(r,o,i[o]));Z.set(r,"hasDataAttrs",!0)}return i},removeData:function(e){return this.each(function(){G.remove(this,e)})}}),E.extend({queue:function(e,t,n){var o;if(e)return t=(t||"fx")+"queue",o=Z.get(e,t),n&&(!o||Array.isArray(n)?o=Z.access(e,t,E.makeArray(n)):o.push(n)),o||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),o=n.length,i=n.shift(),r=E._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),o--),i&&("fx"===t&&n.unshift("inprogress"),delete r.stop,i.call(e,function(){E.dequeue(e,t)},r)),!o&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Z.get(e,n)||Z.access(e,n,{empty:E.Callbacks("once memory").add(function(){Z.remove(e,[t+"queue",n])})})}}),E.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?E.queue(this[0],t):void 0===n?this:this.each(function(){var e=E.queue(this,t,n);E._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--i||r.resolveWith(a,[a])}var o,i=1,r=E.Deferred(),a=this,s=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(o=Z.get(a[s],e+"queueHooks"))&&o.empty&&(i++,o.empty.add(n));return n(),r.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],oe=C.documentElement,ie=function(e){return E.contains(e.ownerDocument,e)},re={composed:!0};oe.getRootNode&&(ie=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(re)===e.ownerDocument});var ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ie(e)&&"none"===E.css(e,"display")};function se(e,t,n,o){var i,r,a=20,s=o?function(){return o.cur()}:function(){return E.css(e,t,"")},l=s(),c=n&&n[3]||(E.cssNumber[t]?"":"px"),u=e.nodeType&&(E.cssNumber[t]||"px"!==c&&+l)&&te.exec(E.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;a--;)E.style(e,t,u+c),(1-r)*(1-(r=s()/l||.5))<=0&&(a=0),u/=r;u*=2,E.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,i=n[1]?u+(n[1]+1)*n[2]:+n[2],o&&(o.unit=c,o.start=u,o.end=i)),i}var le={};function ce(e,t){for(var n,o,i,r,a,s,l,c=[],u=0,d=e.length;u<d;u++)(o=e[u]).style&&(n=o.style.display,t?("none"===n&&(c[u]=Z.get(o,"display")||null,c[u]||(o.style.display="")),""===o.style.display&&ae(o)&&(c[u]=(l=s=a=r=void 0,a=(i=o).ownerDocument,s=i.nodeName,(l=le[s])||(r=a.body.appendChild(a.createElement(s)),l=E.css(r,"display"),r.parentNode.removeChild(r),"none"===l&&(l="block"),le[s]=l)))):"none"!==n&&(c[u]="none",Z.set(o,"display",n)));for(u=0;u<d;u++)null!=c[u]&&(e[u].style.display=c[u]);return e}E.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?E(this).show():E(this).hide()})}});var ue,de,fe=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i;ue=C.createDocumentFragment().appendChild(C.createElement("div")),(de=C.createElement("input")).setAttribute("type","radio"),de.setAttribute("checked","checked"),de.setAttribute("name","t"),ue.appendChild(de),y.checkClone=ue.cloneNode(!0).cloneNode(!0).lastChild.checked,ue.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ue.cloneNode(!0).lastChild.defaultValue,ue.innerHTML="<option></option>",y.option=!!ue.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&A(e,t)?E.merge([e],n):n}function me(e,t){for(var n=0,o=e.length;n<o;n++)Z.set(e[n],"globalEval",!t||Z.get(t[n],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,y.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function be(e,t,n,o,i){for(var r,a,s,l,c,u,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if((r=e[p])||0===r)if("object"===w(r))E.merge(f,r.nodeType?[r]:r);else if(ye.test(r)){for(a=a||d.appendChild(t.createElement("div")),s=(pe.exec(r)||["",""])[1].toLowerCase(),l=ge[s]||ge._default,a.innerHTML=l[1]+E.htmlPrefilter(r)+l[2],u=l[0];u--;)a=a.lastChild;E.merge(f,a.childNodes),(a=d.firstChild).textContent=""}else f.push(t.createTextNode(r));for(d.textContent="",p=0;r=f[p++];)if(o&&-1<E.inArray(r,o))i&&i.push(r);else if(c=ie(r),a=ve(d.appendChild(r),"script"),c&&me(a),n)for(u=0;r=a[u++];)he.test(r.type||"")&&n.push(r);return d}var xe=/^key/,we=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Se=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function Ce(){return!1}function Ee(e,t){return e===function(){try{return C.activeElement}catch(e){}}()==("focus"===t)}function ke(e,t,n,o,i,r){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(o=o||n,n=void 0),t)ke(e,s,n,o,t[s],r);return e}if(null==o&&null==i?(i=n,o=n=void 0):null==i&&("string"==typeof n?(i=o,o=void 0):(i=o,o=n,n=void 0)),!1===i)i=Ce;else if(!i)return e;return 1===r&&(a=i,(i=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,i,o,n)})}function Ae(e,i,r){r?(Z.set(e,i,!1),E.event.add(e,i,{namespace:!1,handler:function(e){var t,n,o=Z.get(this,i);if(1&e.isTrigger&&this[i]){if(o.length)(E.event.special[i]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),Z.set(this,i,o),t=r(this,i),this[i](),o!==(n=Z.get(this,i))||t?Z.set(this,i,!1):n={},o!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else o.length&&(Z.set(this,i,{value:E.event.trigger(E.extend(o[0],E.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Z.get(e,i)&&E.event.add(e,i,Te)}E.event={global:{},add:function(t,e,n,o,i){var r,a,s,l,c,u,d,f,p,h,g,v=Z.get(t);if(V(t))for(n.handler&&(n=(r=n).handler,i=r.selector),i&&E.find.matchesSelector(oe,i),n.guid||(n.guid=E.guid++),(l=v.events)||(l=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(H)||[""]).length;c--;)p=g=(s=Se.exec(e[c])||[])[1],h=(s[2]||"").split(".").sort(),p&&(d=E.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,d=E.event.special[p]||{},u=E.extend({type:p,origType:g,data:o,handler:n,guid:n.guid,selector:i,needsContext:i&&E.expr.match.needsContext.test(i),namespace:h.join(".")},r),(f=l[p])||((f=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,o,h,a)||t.addEventListener&&t.addEventListener(p,a)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,u):f.push(u),E.event.global[p]=!0)},remove:function(e,t,n,o,i){var r,a,s,l,c,u,d,f,p,h,g,v=Z.hasData(e)&&Z.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(H)||[""]).length;c--;)if(p=g=(s=Se.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p){for(d=E.event.special[p]||{},f=l[p=(o?d.delegateType:d.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=r=f.length;r--;)u=f[r],!i&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||o&&o!==u.selector&&("**"!==o||!u.selector)||(f.splice(r,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(e,u));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,v.handle)||E.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)E.event.remove(e,p+t[c],n,o,!0);E.isEmptyObject(l)&&Z.remove(e,"handle events")}},dispatch:function(e){var t,n,o,i,r,a,s=new Array(arguments.length),l=E.event.fix(e),c=(Z.get(this,"events")||Object.create(null))[l.type]||[],u=E.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(a=E.event.handlers.call(this,l,c),t=0;(i=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(r=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(o=((E.event.special[r.origType]||{}).handle||r.handler).apply(i.elem,s))&&!1===(l.result=o)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,o,i,r,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],a={},n=0;n<l;n++)void 0===a[i=(o=t[n]).selector+" "]&&(a[i]=o.needsContext?-1<E(i,this).index(c):E.find(i,this,null,[c]).length),a[i]&&r.push(o);r.length&&s.push({elem:c,handlers:r})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click",Te),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&A(t,"input")&&Z.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&xe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&we.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},function(e,t){E.event.special[e]={setup:function(){return Ae(this,e,Ee),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}}),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){E.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,o=e.handleObj;return n&&(n===this||E.contains(this,n))||(e.type=o.origType,t=o.handler.apply(this,arguments),e.type=i),t}}}),E.fn.extend({on:function(e,t,n,o){return ke(this,e,t,n,o)},one:function(e,t,n,o){return ke(this,e,t,n,o,1)},off:function(e,t,n){var o,i;if(e&&e.preventDefault&&e.handleObj)return o=e.handleObj,E(e.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each(function(){E.event.remove(this,e,n,t)});for(i in e)this.off(i,t,e[i]);return this}});var Le=/<script|<style|<link/i,Pe=/checked\s*(?:[^=]|=\s*.checked.)/i,$e=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function Oe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function je(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function De(e,t){var n,o,i,r,a,s;if(1===t.nodeType){if(Z.hasData(e)&&(s=Z.get(e).events))for(i in Z.remove(t,"handle events"),s)for(n=0,o=s[i].length;n<o;n++)E.event.add(t,i,s[i][n]);G.hasData(e)&&(r=G.access(e),a=E.extend({},r),G.set(t,a))}}function He(n,o,i,r){o=v(o);var e,t,a,s,l,c,u=0,d=n.length,f=d-1,p=o[0],h=b(p);if(h||1<d&&"string"==typeof p&&!y.checkClone&&Pe.test(p))return n.each(function(e){var t=n.eq(e);h&&(o[0]=p.call(this,e,t.html())),He(t,o,i,r)});if(d&&(t=(e=be(o,n[0].ownerDocument,!1,n,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(s=(a=E.map(ve(e,"script"),Oe)).length;u<d;u++)l=e,u!==f&&(l=E.clone(l,!0,!0),s&&E.merge(a,ve(l,"script"))),i.call(n[u],l,u);if(s)for(c=a[a.length-1].ownerDocument,E.map(a,je),u=0;u<s;u++)l=a[u],he.test(l.type||"")&&!Z.access(l,"globalEval")&&E.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?E._evalUrl&&!l.noModule&&E._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):x(l.textContent.replace($e,""),l,c))}return n}function Ie(e,t,n){for(var o,i=t?E.filter(t,e):e,r=0;null!=(o=i[r]);r++)n||1!==o.nodeType||E.cleanData(ve(o)),o.parentNode&&(n&&ie(o)&&me(ve(o,"script")),o.parentNode.removeChild(o));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var o,i,r,a,s,l,c,u=e.cloneNode(!0),d=ie(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=ve(u),o=0,i=(r=ve(e)).length;o<i;o++)s=r[o],l=a[o],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&fe.test(s.type)?l.checked=s.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=s.defaultValue);if(t)if(n)for(r=r||ve(e),a=a||ve(u),o=0,i=r.length;o<i;o++)De(r[o],a[o]);else De(e,u);return 0<(a=ve(u,"script")).length&&me(a,!d&&ve(e,"script")),u},cleanData:function(e){for(var t,n,o,i=E.event.special,r=0;void 0!==(n=e[r]);r++)if(V(n)){if(t=n[Z.expando]){if(t.events)for(o in t.events)i[o]?E.event.remove(n,o):E.removeEvent(n,o,t.handle);n[Z.expando]=void 0}n[G.expando]&&(n[G.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return B(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return He(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)})},prepend:function(){return He(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=Me(this,e)).insertBefore(e,t.firstChild)})},before:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},n=0,o=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Le.test(e)&&!ge[(pe.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<o;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return He(this,arguments,function(e){var t=this.parentNode;E.inArray(this,n)<0&&(E.cleanData(ve(this)),t&&t.replaceChild(e,this))},n)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){E.fn[e]=function(e){for(var t,n=[],o=E(e),i=o.length-1,r=0;r<=i;r++)t=r===i?this:this.clone(!0),E(o[r])[a](t),l.apply(n,t.get());return this.pushStack(n)}});function Ne(e,t,n){var o,i,r={};for(i in t)r[i]=e.style[i],e.style[i]=t[i];for(i in o=n.call(e),t)e.style[i]=r[i];return o}var Re,ze,qe,Fe,Be,We,_e,Xe,Ye=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ve=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=T),t.getComputedStyle(e)},Ue=new RegExp(ne.join("|"),"i");function Ze(){var e;Xe&&(_e.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(_e).appendChild(Xe),e=T.getComputedStyle(Xe),Re="1%"!==e.top,We=12===Ge(e.marginLeft),Xe.style.right="60%",Fe=36===Ge(e.right),ze=36===Ge(e.width),Xe.style.position="absolute",qe=12===Ge(Xe.offsetWidth/3),oe.removeChild(_e),Xe=null)}function Ge(e){return Math.round(parseFloat(e))}function Qe(e,t,n){var o,i,r,a,s=e.style;return(n=n||Ve(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||ie(e)||(a=E.style(e,t)),!y.pixelBoxStyles()&&Ye.test(a)&&Ue.test(t)&&(o=s.width,i=s.minWidth,r=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=o,s.minWidth=i,s.maxWidth=r)),void 0!==a?a+"":a}function Ke(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}_e=C.createElement("div"),(Xe=C.createElement("div")).style&&(Xe.style.backgroundClip="content-box",Xe.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Xe.style.backgroundClip,E.extend(y,{boxSizingReliable:function(){return Ze(),ze},pixelBoxStyles:function(){return Ze(),Fe},pixelPosition:function(){return Ze(),Re},reliableMarginLeft:function(){return Ze(),We},scrollboxSize:function(){return Ze(),qe},reliableTrDimensions:function(){var e,t,n,o;return null==Be&&(e=C.createElement("table"),t=C.createElement("tr"),n=C.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",n.style.height="9px",oe.appendChild(e).appendChild(t).appendChild(n),o=T.getComputedStyle(t),Be=3<parseInt(o.height),oe.removeChild(e)),Be}}));var Je=["Webkit","Moz","ms"],et=C.createElement("div").style,tt={};function nt(e){var t=E.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in et)return e}(e)||e)}var ot=/^(none|table(?!-c[ea]).+)/,it=/^--/,rt={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function st(e,t,n){var o=te.exec(t);return o?Math.max(0,o[2]-(n||0))+(o[3]||"px"):t}function lt(e,t,n,o,i,r){var a="width"===t?1:0,s=0,l=0;if(n===(o?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=E.css(e,n+ne[a],!0,i)),o?("content"===n&&(l-=E.css(e,"padding"+ne[a],!0,i)),"margin"!==n&&(l-=E.css(e,"border"+ne[a]+"Width",!0,i))):(l+=E.css(e,"padding"+ne[a],!0,i),"padding"!==n?l+=E.css(e,"border"+ne[a]+"Width",!0,i):s+=E.css(e,"border"+ne[a]+"Width",!0,i));return!o&&0<=r&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-s-.5))||0),l}function ct(e,t,n){var o=Ve(e),i=(!y.boxSizingReliable()||n)&&"border-box"===E.css(e,"boxSizing",!1,o),r=i,a=Qe(e,t,o),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ye.test(a)){if(!n)return a;a="auto"}return(!y.boxSizingReliable()&&i||!y.reliableTrDimensions()&&A(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===E.css(e,"display",!1,o))&&e.getClientRects().length&&(i="border-box"===E.css(e,"boxSizing",!1,o),(r=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+lt(e,t,n||(i?"border":"content"),r,o,a)+"px"}function ut(e,t,n,o,i){return new ut.prototype.init(e,t,n,o,i)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,o){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,r,a,s=Y(t),l=it.test(t),c=e.style;if(l||(t=nt(s)),a=E.cssHooks[t]||E.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,o))?i:c[t];"string"===(r=typeof n)&&(i=te.exec(n))&&i[1]&&(n=se(e,t,i),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=i&&i[3]||(E.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,o))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,o){var i,r,a,s=Y(t);return it.test(t)||(t=nt(s)),(a=E.cssHooks[t]||E.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Qe(e,t,o)),"normal"===i&&t in at&&(i=at[t]),""===n||n?(r=parseFloat(i),!0===n||isFinite(r)?r||0:i):i}}),E.each(["height","width"],function(e,l){E.cssHooks[l]={get:function(e,t,n){if(t)return!ot.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,n):Ne(e,rt,function(){return ct(e,l,n)})},set:function(e,t,n){var o,i=Ve(e),r=!y.scrollboxSize()&&"absolute"===i.position,a=(r||n)&&"border-box"===E.css(e,"boxSizing",!1,i),s=n?lt(e,l,n,a,i):0;return a&&r&&(s-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(i[l])-lt(e,l,"border",!1,i)-.5)),s&&(o=te.exec(t))&&"px"!==(o[3]||"px")&&(e.style[l]=t,t=E.css(e,l)),st(0,t,s)}}}),E.cssHooks.marginLeft=Ke(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Qe(e,"marginLeft"))||e.getBoundingClientRect().left-Ne(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(i,r){E.cssHooks[i+r]={expand:function(e){for(var t=0,n={},o="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+ne[t]+r]=o[t]||o[t-2]||o[0];return n}},"margin"!==i&&(E.cssHooks[i+r].set=st)}),E.fn.extend({css:function(e,t){return B(this,function(e,t,n){var o,i,r={},a=0;if(Array.isArray(t)){for(o=Ve(e),i=t.length;a<i;a++)r[t[a]]=E.css(e,t[a],!1,o);return r}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,1<arguments.length)}}),(E.Tween=ut).prototype={constructor:ut,init:function(e,t,n,o,i,r){this.elem=e,this.prop=n,this.easing=i||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=o,this.unit=r||(E.cssNumber[n]?"":"px")},cur:function(){var e=ut.propHooks[this.prop];return e&&e.get?e.get(this):ut.propHooks._default.get(this)},run:function(e){var t,n=ut.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ut.propHooks._default.set(this),this}},ut.prototype.init.prototype=ut.prototype,ut.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},ut.propHooks.scrollTop=ut.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=ut.prototype.init,E.fx.step={};var dt,ft,pt,ht,gt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;function mt(){ft&&(!1===C.hidden&&T.requestAnimationFrame?T.requestAnimationFrame(mt):T.setTimeout(mt,E.fx.interval),E.fx.tick())}function yt(){return T.setTimeout(function(){dt=void 0}),dt=Date.now()}function bt(e,t){var n,o=0,i={height:e};for(t=t?1:0;o<4;o+=2-t)i["margin"+(n=ne[o])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function xt(e,t,n){for(var o,i=(wt.tweeners[t]||[]).concat(wt.tweeners["*"]),r=0,a=i.length;r<a;r++)if(o=i[r].call(n,t,e))return o}function wt(r,e,t){var n,a,o=0,i=wt.prefilters.length,s=E.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var e=dt||yt(),t=Math.max(0,c.startTime+c.duration-e),n=1-(t/c.duration||0),o=0,i=c.tweens.length;o<i;o++)c.tweens[o].run(n);return s.notifyWith(r,[c,n,t]),n<1&&i?t:(i||s.notifyWith(r,[c,1,0]),s.resolveWith(r,[c]),!1)},c=s.promise({elem:r,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},t),originalProperties:e,originalOptions:t,startTime:dt||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=E.Tween(r,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var t=0,n=e?c.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)c.tweens[t].run(1);return e?(s.notifyWith(r,[c,1,0]),s.resolveWith(r,[c,e])):s.rejectWith(r,[c,e]),this}}),u=c.props;for(!function(e,t){var n,o,i,r,a;for(n in e)if(i=t[o=Y(n)],r=e[n],Array.isArray(r)&&(i=r[1],r=e[n]=r[0]),n!==o&&(e[o]=r,delete e[n]),(a=E.cssHooks[o])&&"expand"in a)for(n in r=a.expand(r),delete e[o],r)n in e||(e[n]=r[n],t[n]=i);else t[o]=i}(u,c.opts.specialEasing);o<i;o++)if(n=wt.prefilters[o].call(c,r,u,c.opts))return b(n.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return E.map(u,xt,c),b(c.opts.start)&&c.opts.start.call(r,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(l,{elem:r,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(wt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,o=0,i=(e=b(e)?(t=e,["*"]):e.match(H)).length;o<i;o++)n=e[o],wt.tweeners[n]=wt.tweeners[n]||[],wt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var o,i,r,a,s,l,c,u,d="width"in t||"height"in t,f=this,p={},h=e.style,g=e.nodeType&&ae(e),v=Z.get(e,"fxshow");for(o in n.queue||(null==(a=E._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,E.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[o],gt.test(i)){if(delete t[o],r=r||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[o])continue;g=!0}p[o]=v&&v[o]||E.style(e,o)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(p))for(o in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=v&&v.display)&&(c=Z.get(e,"display")),"none"===(u=E.css(e,"display"))&&(c?u=c:(ce([e],!0),c=e.style.display||c,u=E.css(e,"display"),ce([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===E.css(e,"float")&&(l||(f.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,p)l||(v?"hidden"in v&&(g=v.hidden):v=Z.access(e,"fxshow",{display:c}),r&&(v.hidden=!g),g&&ce([e],!0),f.done(function(){for(o in g||ce([e]),Z.remove(e,"fxshow"),p)E.style(e,o,p[o])})),l=xt(g?v[o]:0,o,f),o in v||(v[o]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?wt.prefilters.unshift(e):wt.prefilters.push(e)}}),E.speed=function(e,t,n){var o=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return E.fx.off?o.duration=0:"number"!=typeof o.duration&&(o.duration in E.fx.speeds?o.duration=E.fx.speeds[o.duration]:o.duration=E.fx.speeds._default),null!=o.queue&&!0!==o.queue||(o.queue="fx"),o.old=o.complete,o.complete=function(){b(o.old)&&o.old.call(this),o.queue&&E.dequeue(this,o.queue)},o},E.fn.extend({fadeTo:function(e,t,n,o){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,o)},animate:function(t,e,n,o){function i(){var e=wt(this,E.extend({},t),a);(r||Z.get(this,"finish"))&&e.stop(!0)}var r=E.isEmptyObject(t),a=E.speed(e,n,o);return i.finish=i,r||!1===a.queue?this.each(i):this.queue(a.queue,i)},stop:function(i,e,r){function a(e){var t=e.stop;delete e.stop,t(r)}return"string"!=typeof i&&(r=e,e=i,i=void 0),e&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=E.timers,o=Z.get(this);if(t)o[t]&&o[t].stop&&a(o[t]);else for(t in o)o[t]&&o[t].stop&&vt.test(t)&&a(o[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(r),e=!1,n.splice(t,1));!e&&r||E.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=Z.get(this),n=t[a+"queue"],o=t[a+"queueHooks"],i=E.timers,r=n?n.length:0;for(t.finish=!0,E.queue(this,a,[]),o&&o.stop&&o.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),E.each(["toggle","show","hide"],function(e,o){var i=E.fn[o];E.fn[o]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(bt(o,!0),e,t,n)}}),E.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,o){E.fn[e]=function(e,t,n){return this.animate(o,e,t,n)}}),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(dt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),dt=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ft||(ft=!0,mt())},E.fx.stop=function(){ft=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(o,e){return o=E.fx&&E.fx.speeds[o]||o,e=e||"fx",this.queue(e,function(e,t){var n=T.setTimeout(e,o);t.stop=function(){T.clearTimeout(n)}})},pt=C.createElement("input"),ht=C.createElement("select").appendChild(C.createElement("option")),pt.type="checkbox",y.checkOn=""!==pt.value,y.optSelected=ht.selected,(pt=C.createElement("input")).value="t",pt.type="radio",y.radioValue="t"===pt.value;var St,Tt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return B(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var o,i,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?E.prop(e,t,n):(1===r&&E.isXMLDoc(e)||(i=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?St:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):i&&"set"in i&&void 0!==(o=i.set(e,n,t))?o:(e.setAttribute(t,n+""),n):!(i&&"get"in i&&null!==(o=i.get(e,t)))&&null==(o=E.find.attr(e,t))?void 0:o)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,o=0,i=t&&t.match(H);if(i&&1===e.nodeType)for(;n=i[o++];)e.removeAttribute(n)}}),St={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var a=Tt[t]||E.find.attr;Tt[t]=function(e,t,n){var o,i,r=t.toLowerCase();return n||(i=Tt[r],Tt[r]=o,o=null!=a(e,t,n)?r:null,Tt[r]=i),o}});var Ct=/^(?:input|select|textarea|button)$/i,Et=/^(?:a|area)$/i;function kt(e){return(e.match(H)||[]).join(" ")}function At(e){return e.getAttribute&&e.getAttribute("class")||""}function Lt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(H)||[]}E.fn.extend({prop:function(e,t){return B(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var o,i,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&E.isXMLDoc(e)||(t=E.propFix[t]||t,i=E.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(o=i.set(e,n,t))?o:e[t]=n:i&&"get"in i&&null!==(o=i.get(e,t))?o:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):Ct.test(e.nodeName)||Et.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,o,i,r,a,s,l=0;if(b(t))return this.each(function(e){E(this).addClass(t.call(this,e,At(this)))});if((e=Lt(t)).length)for(;n=this[l++];)if(i=At(n),o=1===n.nodeType&&" "+kt(i)+" "){for(a=0;r=e[a++];)o.indexOf(" "+r+" ")<0&&(o+=r+" ");i!==(s=kt(o))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,o,i,r,a,s,l=0;if(b(t))return this.each(function(e){E(this).removeClass(t.call(this,e,At(this)))});if(!arguments.length)return this.attr("class","");if((e=Lt(t)).length)for(;n=this[l++];)if(i=At(n),o=1===n.nodeType&&" "+kt(i)+" "){for(a=0;r=e[a++];)for(;-1<o.indexOf(" "+r+" ");)o=o.replace(" "+r+" "," ");i!==(s=kt(o))&&n.setAttribute("class",s)}return this},toggleClass:function(i,t){var r=typeof i,a="string"==r||Array.isArray(i);return"boolean"==typeof t&&a?t?this.addClass(i):this.removeClass(i):b(i)?this.each(function(e){E(this).toggleClass(i.call(this,e,At(this),t),t)}):this.each(function(){var e,t,n,o;if(a)for(t=0,n=E(this),o=Lt(i);e=o[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==i&&"boolean"!=r||((e=At(this))&&Z.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==i&&Z.get(this,"__className__")||""))})},hasClass:function(e){for(var t,n=0,o=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+kt(At(t))+" ").indexOf(o))return!0;return!1}});var Pt=/\r/g;E.fn.extend({val:function(n){var o,e,i,t=this[0];return arguments.length?(i=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,E(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?"":e+""})),(o=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in o&&void 0!==o.set(this,t,"value")||(this.value=t))})):t?(o=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&"get"in o&&void 0!==(e=o.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Pt,""):null==e?"":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:kt(E.text(e))}},select:{get:function(e){for(var t,n,o=e.options,i=e.selectedIndex,r="select-one"===e.type,a=r?null:[],s=r?i+1:o.length,l=i<0?s:r?i:0;l<s;l++)if(((n=o[l]).selected||l===i)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=E(n).val(),r)return t;a.push(t)}return a},set:function(e,t){for(var n,o,i=e.options,r=E.makeArray(t),a=i.length;a--;)((o=i[a]).selected=-1<E.inArray(E.valHooks.option.get(o),r))&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},y.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in T;function $t(e){e.stopPropagation()}var Mt=/^(?:focusinfocus|focusoutblur)$/;E.extend(E.event,{trigger:function(e,t,n,o){var i,r,a,s,l,c,u,d=[n||C],f=m.call(e,"type")?e.type:e,p=m.call(e,"namespace")?e.namespace.split("."):[],h=u=r=n=n||C;if(3!==n.nodeType&&8!==n.nodeType&&!Mt.test(f+E.event.triggered)&&(-1<f.indexOf(".")&&(f=(p=f.split(".")).shift(),p.sort()),s=f.indexOf(":")<0&&"on"+f,(e=e[E.expando]?e:new E.Event(f,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[f]||{},o||!c.trigger||!1!==c.trigger.apply(n,t))){if(!o&&!c.noBubble&&!g(n)){for(a=c.delegateType||f,Mt.test(a+f)||(h=h.parentNode);h;h=h.parentNode)d.push(h),r=h;r===(n.ownerDocument||C)&&d.push(r.defaultView||r.parentWindow||T)}for(i=0;(h=d[i++])&&!e.isPropagationStopped();)u=h,e.type=1<i?a:c.bindType||f,(l=(Z.get(h,"events")||Object.create(null))[e.type]&&Z.get(h,"handle"))&&l.apply(h,t),(l=s&&h[s])&&l.apply&&V(h)&&(e.result=l.apply(h,t),!1===e.result&&e.preventDefault());return e.type=f,o||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!V(n)||s&&b(n[f])&&!g(n)&&((r=n[s])&&(n[s]=null),E.event.triggered=f,e.isPropagationStopped()&&u.addEventListener(f,$t),n[f](),e.isPropagationStopped()&&u.removeEventListener(f,$t),E.event.triggered=void 0,r&&(n[s]=r)),e.result}},simulate:function(e,t,n){var o=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(o,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),y.focusin||E.each({focus:"focusin",blur:"focusout"},function(n,o){function i(e){E.event.simulate(o,e.target,E.event.fix(e))}E.event.special[o]={setup:function(){var e=this.ownerDocument||this.document||this,t=Z.access(e,o);t||e.addEventListener(n,i,!0),Z.access(e,o,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Z.access(e,o)-1;t?Z.access(e,o,t):(e.removeEventListener(n,i,!0),Z.remove(e,o))}}});var Ot=T.location,jt={guid:Date.now()},Dt=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new T.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var Ht=/\[\]$/,It=/\r?\n/g,Nt=/^(?:submit|button|image|reset|file)$/i,Rt=/^(?:input|select|textarea|keygen)/i;E.param=function(e,t){function n(e,t){var n=b(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var o,i=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){n(this.name,this.value)});else for(o in e)!function n(o,e,i,r){var t;if(Array.isArray(e))E.each(e,function(e,t){i||Ht.test(o)?r(o,t):n(o+"["+("object"==typeof t&&null!=t?e:"")+"]",t,i,r)});else if(i||"object"!==w(e))r(o,e);else for(t in e)n(o+"["+t+"]",e[t],i,r)}(o,e[o],t,n);return i.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&Rt.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(It,"\r\n")}}):{name:t.name,value:n.replace(It,"\r\n")}}).get()}});var zt=/%20/g,qt=/#.*$/,Ft=/([?&])_=[^&]*/,Bt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Wt=/^(?:GET|HEAD)$/,_t=/^\/\//,Xt={},Yt={},Vt="*/".concat("*"),Ut=C.createElement("a");function Zt(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,o=0,i=e.toLowerCase().match(H)||[];if(b(t))for(;n=i[o++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(t)):(r[n]=r[n]||[]).push(t)}}function Gt(t,i,r,a){var s={},l=t===Yt;function c(e){var o;return s[e]=!0,E.each(t[e]||[],function(e,t){var n=t(i,r,a);return"string"!=typeof n||l||s[n]?l?!(o=n):void 0:(i.dataTypes.unshift(n),c(n),!1)}),o}return c(i.dataTypes[0])||!s["*"]&&c("*")}function Qt(e,t){var n,o,i=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:o=o||{})[n]=t[n]);return o&&E.extend(!0,e,o),e}Ut.href=Ot.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ot.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ot.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Qt(Qt(e,E.ajaxSettings),t):Qt(E.ajaxSettings,e)},ajaxPrefilter:Zt(Xt),ajaxTransport:Zt(Yt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var u,d,f,n,p,o,h,g,i,r,v=E.ajaxSetup({},t),m=v.context||v,y=v.context&&(m.nodeType||m.jquery)?E(m):E.event,b=E.Deferred(),x=E.Callbacks("once memory"),w=v.statusCode||{},a={},s={},l="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n)for(n={};t=Bt.exec(f);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?f:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)S.always(e[S.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||l;return u&&u.abort(t),c(0,t),this}};if(b.promise(S),v.url=((e||v.url||Ot.href)+"").replace(_t,Ot.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(H)||[""],null==v.crossDomain){o=C.createElement("a");try{o.href=v.url,o.href=o.href,v.crossDomain=Ut.protocol+"//"+Ut.host!=o.protocol+"//"+o.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=E.param(v.data,v.traditional)),Gt(Xt,v,t,S),h)return S;for(i in(g=E.event&&v.global)&&0==E.active++&&E.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Wt.test(v.type),d=v.url.replace(qt,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(zt,"+")):(r=v.url.slice(d.length),v.data&&(v.processData||"string"==typeof v.data)&&(d+=(Dt.test(d)?"&":"?")+v.data,delete v.data),!1===v.cache&&(d=d.replace(Ft,"$1"),r=(Dt.test(d)?"&":"?")+"_="+jt.guid+++r),v.url=d+r),v.ifModified&&(E.lastModified[d]&&S.setRequestHeader("If-Modified-Since",E.lastModified[d]),E.etag[d]&&S.setRequestHeader("If-None-Match",E.etag[d])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&S.setRequestHeader("Content-Type",v.contentType),S.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+Vt+"; q=0.01":""):v.accepts["*"]),v.headers)S.setRequestHeader(i,v.headers[i]);if(v.beforeSend&&(!1===v.beforeSend.call(m,S,v)||h))return S.abort();if(l="abort",x.add(v.complete),S.done(v.success),S.fail(v.error),u=Gt(Yt,v,t,S)){if(S.readyState=1,g&&y.trigger("ajaxSend",[S,v]),h)return S;v.async&&0<v.timeout&&(p=T.setTimeout(function(){S.abort("timeout")},v.timeout));try{h=!1,u.send(a,c)}catch(e){if(h)throw e;c(-1,e)}}else c(-1,"No Transport");function c(e,t,n,o){var i,r,a,s,l,c=t;h||(h=!0,p&&T.clearTimeout(p),u=void 0,f=o||"",S.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){for(var o,i,r,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=e.mimeType||t.getResponseHeader("Content-Type"));if(o)for(i in s)if(s[i]&&s[i].test(o)){l.unshift(i);break}if(l[0]in n)r=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){r=i;break}a=a||i}r=r||a}if(r)return r!==l[0]&&l.unshift(r),n[r]}(v,S,n)),!i&&-1<E.inArray("script",v.dataTypes)&&(v.converters["text script"]=function(){}),s=function(e,t,n,o){var i,r,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&o&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(a=c[l+" "+r]||c["* "+r]))for(i in c)if((s=i.split(" "))[1]===r&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[i]:!0!==c[i]&&(r=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(v,s,S,i),i?(v.ifModified&&((l=S.getResponseHeader("Last-Modified"))&&(E.lastModified[d]=l),(l=S.getResponseHeader("etag"))&&(E.etag[d]=l)),204===e||"HEAD"===v.type?c="nocontent":304===e?c="notmodified":(c=s.state,r=s.data,i=!(a=s.error))):(a=c,!e&&c||(c="error",e<0&&(e=0))),S.status=e,S.statusText=(t||c)+"",i?b.resolveWith(m,[r,c,S]):b.rejectWith(m,[S,c,a]),S.statusCode(w),w=void 0,g&&y.trigger(i?"ajaxSuccess":"ajaxError",[S,v,i?r:a]),x.fireWith(m,[S,c]),g&&(y.trigger("ajaxComplete",[S,v]),--E.active||E.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,i){E[i]=function(e,t,n,o){return b(t)&&(o=o||n,n=t,t=void 0),E.ajax(E.extend({url:e,type:i,dataType:o,data:t,success:n},E.isPlainObject(e)&&e))}}),E.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),E._evalUrl=function(e,t,n){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t,n)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){E(this).wrapInner(n.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){E(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new T.XMLHttpRequest}catch(e){}};var Kt={0:200,1223:204},Jt=E.ajaxSettings.xhr();y.cors=!!Jt&&"withCredentials"in Jt,y.ajax=Jt=!!Jt,E.ajaxTransport(function(i){var r,a;if(y.cors||Jt&&!i.crossDomain)return{send:function(e,t){var n,o=i.xhr();if(o.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)o[n]=i.xhrFields[n];for(n in i.mimeType&&o.overrideMimeType&&o.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)o.setRequestHeader(n,e[n]);r=function(e){return function(){r&&(r=a=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?t(0,"error"):t(o.status,o.statusText):t(Kt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=r(),a=o.onerror=o.ontimeout=r("error"),void 0!==o.onabort?o.onabort=a:o.onreadystatechange=function(){4===o.readyState&&T.setTimeout(function(){r&&a()})},r=r("abort");try{o.send(i.hasContent&&i.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(n){var o,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){o=E("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){o.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),C.head.appendChild(o[0])},abort:function(){i&&i()}}});var en,tn=[],nn=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=tn.pop()||E.expando+"_"+jt.guid++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,n){var o,i,r,a=!1!==e.jsonp&&(nn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&nn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(nn,"$1"+o):!1!==e.jsonp&&(e.url+=(Dt.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return r||E.error(o+" was not called"),r[0]},e.dataTypes[0]="json",i=T[o],T[o]=function(){r=arguments},n.always(function(){void 0===i?E(T).removeProp(o):T[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,tn.push(o)),r&&b(i)&&i(r[0]),r=i=void 0}),"script"}),y.createHTMLDocument=((en=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===en.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((o=(t=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,t.head.appendChild(o)):t=C),r=!n&&[],(i=L.exec(e))?[t.createElement(i[1])]:(i=be([e],t,r),r&&r.length&&E(r).remove(),E.merge([],i.childNodes)));var o,i,r},E.fn.load=function(e,t,n){var o,i,r,a=this,s=e.indexOf(" ");return-1<s&&(o=kt(e.slice(s)),e=e.slice(0,s)),b(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),0<a.length&&E.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){r=arguments,a.html(o?E("<div>").append(E.parseHTML(e)).find(o):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},E.expr.pseudos.animated=function(t){return E.grep(E.timers,function(e){return t===e.elem}).length},E.offset={setOffset:function(e,t,n){var o,i,r,a,s,l,c=E.css(e,"position"),u=E(e),d={};"static"===c&&(e.style.position="relative"),s=u.offset(),r=E.css(e,"top"),l=E.css(e,"left"),i=("absolute"===c||"fixed"===c)&&-1<(r+l).indexOf("auto")?(a=(o=u.position()).top,o.left):(a=parseFloat(r)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,n,E.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+i),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,o=this[0];return o?o.getClientRects().length?(e=o.getBoundingClientRect(),n=o.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,o=this[0],i={top:0,left:0};if("fixed"===E.css(o,"position"))t=o.getBoundingClientRect();else{for(t=this.offset(),n=o.ownerDocument,e=o.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==o&&1===e.nodeType&&((i=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),i.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-E.css(o,"marginTop",!0),left:t.left-i.left-E.css(o,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||oe})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var r="pageYOffset"===i;E.fn[t]=function(e){return B(this,function(e,t,n){var o;return g(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===n?o?o[i]:e[t]:void(o?o.scrollTo(r?o.pageXOffset:n,r?n:o.pageYOffset):e[t]=n)},t,e,arguments.length)}}),E.each(["top","left"],function(e,n){E.cssHooks[n]=Ke(y.pixelPosition,function(e,t){if(t)return t=Qe(e,n),Ye.test(t)?E(e).position()[n]+"px":t})}),E.each({Height:"height",Width:"width"},function(a,s){E.each({padding:"inner"+a,content:s,"":"outer"+a},function(o,r){E.fn[r]=function(e,t){var n=arguments.length&&(o||"boolean"!=typeof e),i=o||(!0===e||!0===t?"margin":"border");return B(this,function(e,t,n){var o;return g(e)?0===r.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+a],o["scroll"+a],e.body["offset"+a],o["offset"+a],o["client"+a])):void 0===n?E.css(e,t,i):E.style(e,t,n,i)},s,n?e:void 0,n)}})}),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,o){return this.on(t,e,n,o)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){E.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var on=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;E.proxy=function(e,t){var n,o,i;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return o=s.call(arguments,2),(i=function(){return e.apply(t||this,o.concat(s.call(arguments)))}).guid=e.guid=e.guid||E.guid++,i},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=A,E.isFunction=b,E.isWindow=g,E.camelCase=Y,E.type=w,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?"":(e+"").replace(on,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return E});var rn=T.jQuery,an=T.$;return E.noConflict=function(e){return T.$===E&&(T.$=an),e&&T.jQuery===E&&(T.jQuery=rn),E},void 0===e&&(T.jQuery=T.$=E),E}),function(l,d,g,v){"use strict";var e,i,a,r,f,t,c,p,u,o,n,s,h,m;function y(e,t){var n,o,i,r=[],a=0;e&&e.isDefaultPrevented()||(e.preventDefault(),t=t||{},e&&e.data&&(t=u(e.data.options,t)),n=t.$target||g(e.currentTarget).trigger("blur"),(i=g.fancybox.getInstance())&&i.$trigger&&i.$trigger.is(n)||(r=t.selector?g(t.selector):(o=n.attr("data-fancybox")||"")?(r=e.data?e.data.items:[]).length?r.filter('[data-fancybox="'+o+'"]'):g('[data-fancybox="'+o+'"]'):[n],(a=g(r).index(n))<0&&(a=0),(i=g.fancybox.open(r,t,a)).$trigger=n))}l.console=l.console||{info:function(e){}},g&&(g.fn.fancybox?console.info("fancyBox already initialized"):(e={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:g.noop,beforeLoad:g.noop,afterLoad:g.noop,beforeShow:g.noop,afterShow:g.noop,beforeClose:g.noop,afterClose:g.noop,onActivate:g.noop,onDeactivate:g.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},i=g(l),a=g(d),r=0,f=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(e){return l.setTimeout(e,1e3/60)},t=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(e){l.clearTimeout(e)},c=function(){var e,t=d.createElement("fakeelement"),n={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in n)if(t.style[e]!==v)return n[e];return"transitionend"}(),p=function(e){return e&&e.length&&e[0].offsetHeight},u=function(e,t){var n=g.extend(!0,{},e,t);return g.each(t,function(e,t){g.isArray(t)&&(n[e]=t)}),n},o=function(e,t,n){var o=this;o.opts=u({index:n},g.fancybox.defaults),g.isPlainObject(t)&&(o.opts=u(o.opts,t)),g.fancybox.isMobile&&(o.opts=u(o.opts,o.opts.mobile)),o.id=o.opts.id||++r,o.currIndex=parseInt(o.opts.index,10)||0,o.prevIndex=null,o.prevPos=null,o.currPos=0,o.firstRun=!0,o.group=[],o.slides={},o.addContent(e),o.group.length&&o.init()},g.extend(o.prototype,{init:function(){var t,n,o=this,i=o.group[o.currIndex].opts;i.closeExisting&&g.fancybox.close(!0),g("body").addClass("fancybox-active"),!g.fancybox.getInstance()&&!1!==i.hideScrollbar&&!g.fancybox.isMobile&&d.body.scrollHeight>l.innerHeight&&(g("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-d.documentElement.clientWidth)+"px;}</style>"),g("body").addClass("compensate-for-scrollbar")),n="",g.each(i.buttons,function(e,t){n+=i.btnTpl[t]||""}),t=g(o.translate(o,i.baseTpl.replace("{{buttons}}",n).replace("{{arrows}}",i.btnTpl.arrowLeft+i.btnTpl.arrowRight))).attr("id","fancybox-container-"+o.id).addClass(i.baseClass).data("FancyBox",o).appendTo(i.parentEl),o.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){o.$refs[e]=t.find(".fancybox-"+e)}),o.trigger("onInit"),o.activate(),o.jumpTo(o.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang]||e.opts.i18n.en;return t.replace(/\{\{(\w+)\}\}/g,function(e,t){return n[t]===v?e:n[t]})},addContent:function(e){var t,c=this,n=g.makeArray(e);g.each(n,function(e,t){var n,o,i,r,a,s={},l={};g.isPlainObject(t)?l=(s=t).opts||t:"object"===g.type(t)&&g(t).length?(l=(n=g(t)).data()||{},(l=g.extend(!0,{},l,l.options)).$orig=n,s.src=c.opts.src||l.src||n.attr("href"),s.type||s.src||(s.type="inline",s.src=t)):s={type:"html",src:t+""},s.opts=g.extend(!0,{},c.opts,l),g.isArray(l.buttons)&&(s.opts.buttons=l.buttons),g.fancybox.isMobile&&s.opts.mobile&&(s.opts=u(s.opts,s.opts.mobile)),o=s.type||s.opts.type,r=s.src||"",!o&&r&&((i=r.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(o="video",s.opts.video.format||(s.opts.video.format="video/"+("ogv"===i[1]?"ogg":i[1]))):r.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?o="image":r.match(/\.(pdf)((\?|#).*)?$/i)?(o="iframe",s=g.extend(!0,s,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===r.charAt(0)&&(o="inline")),o?s.type=o:c.trigger("objectNeedsType",s),s.contentType||(s.contentType=-1<g.inArray(s.type,["html","inline","ajax"])?"html":s.type),s.index=c.group.length,"auto"==s.opts.smallBtn&&(s.opts.smallBtn=-1<g.inArray(s.type,["html","inline","ajax"])),"auto"===s.opts.toolbar&&(s.opts.toolbar=!s.opts.smallBtn),s.$thumb=s.opts.$thumb||null,s.opts.$trigger&&s.index===c.opts.index&&(s.$thumb=s.opts.$trigger.find("img:first"),s.$thumb.length&&(s.opts.$orig=s.opts.$trigger)),s.$thumb&&s.$thumb.length||!s.opts.$orig||(s.$thumb=s.opts.$orig.find("img:first")),s.$thumb&&!s.$thumb.length&&(s.$thumb=null),s.thumb=s.opts.thumb||(s.$thumb?s.$thumb[0].src:null),"function"===g.type(s.opts.caption)&&(s.opts.caption=s.opts.caption.apply(t,[c,s])),"function"===g.type(c.opts.caption)&&(s.opts.caption=c.opts.caption.apply(t,[c,s])),s.opts.caption instanceof g||(s.opts.caption=s.opts.caption===v?"":s.opts.caption+""),"ajax"===s.type&&1<(a=r.split(/\s+/,2)).length&&(s.src=a.shift(),s.opts.filter=a.shift()),s.opts.modal&&(s.opts=g.extend(!0,s.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),c.group.push(s)}),Object.keys(c.slides).length&&(c.updateControls(),(t=c.Thumbs)&&t.isActive&&(t.create(),t.focus()))},addEvents:function(){var o=this;o.removeEvents(),o.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),o.close(e)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),o.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),o.next()}).on("click.fb","[data-fancybox-zoom]",function(e){o[o.isScaledDown()?"scaleToActual":"scaleToFit"]()}),i.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?(o.requestId&&t(o.requestId),o.requestId=f(function(){o.update(e)})):(o.current&&"iframe"===o.current.type&&o.$refs.stage.hide(),setTimeout(function(){o.$refs.stage.show(),o.update(e)},g.fancybox.isMobile?600:250))}),a.on("keydown.fb",function(e){var t=(g.fancybox?g.fancybox.getInstance():null).current,n=e.keyCode||e.which;if(9!=n){if(!(!t.opts.keyboard||e.ctrlKey||e.altKey||e.shiftKey||g(e.target).is("input,textarea,video,audio,select")))return 8===n||27===n?(e.preventDefault(),void o.close(e)):37===n||38===n?(e.preventDefault(),void o.previous()):39===n||40===n?(e.preventDefault(),void o.next()):void o.trigger("afterKeydown",e,n)}else t.opts.trapFocus&&o.focus(e)}),o.group[o.currIndex].opts.idleTime&&(o.idleSecondsCounter=0,a.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){o.idleSecondsCounter=0,o.isIdle&&o.showControls(),o.isIdle=!1}),o.idleInterval=l.setInterval(function(){o.idleSecondsCounter++,o.idleSecondsCounter>=o.group[o.currIndex].opts.idleTime&&!o.isDragging&&(o.isIdle=!0,o.idleSecondsCounter=0,o.hideControls())},1e3))},removeEvents:function(){i.off("orientationchange.fb resize.fb"),a.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,o){var t,n,i,r,a,s,l,c,u,d=this,f=d.group.length;if(!(d.isDragging||d.isClosing||d.isAnimating&&d.firstRun)){if(e=parseInt(e,10),!(i=d.current?d.current.opts.loop:d.opts.loop)&&(e<0||f<=e))return!1;if(t=d.firstRun=!Object.keys(d.slides).length,a=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,r=d.createSlide(e),1<f&&((i||r.index<f-1)&&d.createSlide(e+1),(i||0<r.index)&&d.createSlide(e-1)),d.current=r,d.currIndex=r.index,d.currPos=r.pos,d.trigger("beforeShow",t),d.updateControls(),r.forcedDuration=v,g.isNumeric(o)?r.forcedDuration=o:o=r.opts[t?"animationDuration":"transitionDuration"],o=parseInt(o,10),n=d.isMoved(r),r.$slide.addClass("fancybox-slide--current"),t)return r.opts.animationEffect&&o&&d.$refs.container.css("transition-duration",o+"ms"),d.$refs.container.addClass("fancybox-is-open").trigger("focus"),d.loadSlide(r),void d.preload("image");s=g.fancybox.getTranslate(a.$slide),l=g.fancybox.getTranslate(d.$refs.stage),g.each(d.slides,function(e,t){g.fancybox.stop(t.$slide,!0)}),a.pos!==r.pos&&(a.isComplete=!1),a.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),n?(u=s.left-(a.pos*s.width+a.pos*a.opts.gutter),g.each(d.slides,function(e,t){t.$slide.removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var n=t.pos*s.width+t.pos*t.opts.gutter;g.fancybox.setTranslate(t.$slide,{top:0,left:n-l.left+u}),t.pos!==r.pos&&t.$slide.addClass("fancybox-slide--"+(t.pos>r.pos?"next":"previous")),p(t.$slide),g.fancybox.animate(t.$slide,{top:0,left:(t.pos-r.pos)*s.width+(t.pos-r.pos)*t.opts.gutter},o,function(){t.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),t.pos===d.currPos&&d.complete()})})):o&&r.opts.transitionEffect&&(c="fancybox-animated fancybox-fx-"+r.opts.transitionEffect,a.$slide.addClass("fancybox-slide--"+(a.pos>r.pos?"next":"previous")),g.fancybox.animate(a.$slide,c,o,function(){a.$slide.removeClass(c).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),r.isLoaded?d.revealContent(r):d.loadSlide(r),d.preload("image")}},createSlide:function(e){var t,n=this,o=e%n.group.length;return o=o<0?n.group.length+o:o,!n.slides[e]&&n.group[o]&&(t=g('<div class="fancybox-slide"></div>').appendTo(n.$refs.stage),n.slides[e]=g.extend(!0,{},n.group[o],{pos:e,$slide:t,isLoaded:!1}),n.updateSlide(n.slides[e])),n.slides[e]},scaleToActual:function(e,t,n){var o,i,r,a,s,l=this,c=l.current,u=c.$content,d=g.fancybox.getTranslate(c.$slide).width,f=g.fancybox.getTranslate(c.$slide).height,p=c.width,h=c.height;l.isAnimating||l.isMoved()||!u||"image"!=c.type||!c.isLoaded||c.hasError||(l.isAnimating=!0,g.fancybox.stop(u),e=e===v?.5*d:e,t=t===v?.5*f:t,(o=g.fancybox.getTranslate(u)).top-=g.fancybox.getTranslate(c.$slide).top,o.left-=g.fancybox.getTranslate(c.$slide).left,a=p/o.width,s=h/o.height,i=.5*d-.5*p,r=.5*f-.5*h,d<p&&(0<(i=o.left*a-(e*a-e))&&(i=0),i<d-p&&(i=d-p)),f<h&&(0<(r=o.top*s-(t*s-t))&&(r=0),r<f-h&&(r=f-h)),l.updateCursor(p,h),g.fancybox.animate(u,{top:r,left:i,scaleX:a,scaleY:s},n||366,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(e){var t,n=this,o=n.current,i=o.$content;n.isAnimating||n.isMoved()||!i||"image"!=o.type||!o.isLoaded||o.hasError||(n.isAnimating=!0,g.fancybox.stop(i),t=n.getFitPos(o),n.updateCursor(t.width,t.height),g.fancybox.animate(i,{top:t.top,left:t.left,scaleX:t.width/i.width(),scaleY:t.height/i.height()},e||366,function(){n.isAnimating=!1}))},getFitPos:function(e){var t,n,o,i,r=e.$content,a=e.$slide,s=e.width||e.opts.width,l=e.height||e.opts.height,c={};return!!(e.isLoaded&&r&&r.length)&&(t=g.fancybox.getTranslate(this.$refs.stage).width,n=g.fancybox.getTranslate(this.$refs.stage).height,t-=parseFloat(a.css("paddingLeft"))+parseFloat(a.css("paddingRight"))+parseFloat(r.css("marginLeft"))+parseFloat(r.css("marginRight")),n-=parseFloat(a.css("paddingTop"))+parseFloat(a.css("paddingBottom"))+parseFloat(r.css("marginTop"))+parseFloat(r.css("marginBottom")),s&&l||(s=t,l=n),t-.5<(s*=o=Math.min(1,t/s,n/l))&&(s=t),n-.5<(l*=o)&&(l=n),"image"===e.type?(c.top=Math.floor(.5*(n-l))+parseFloat(a.css("paddingTop")),c.left=Math.floor(.5*(t-s))+parseFloat(a.css("paddingLeft"))):"video"===e.contentType&&(s/(i=e.opts.width&&e.opts.height?s/l:e.opts.ratio||16/9)<l?l=s/i:l*i<s&&(s=l*i)),c.width=s,c.height=l,c)},update:function(n){var o=this;g.each(o.slides,function(e,t){o.updateSlide(t,n)})},updateSlide:function(e,t){var n=this,o=e&&e.$content,i=e.width||e.opts.width,r=e.height||e.opts.height,a=e.$slide;n.adjustCaption(e),o&&(i||r||"video"===e.contentType)&&!e.hasError&&(g.fancybox.stop(o),g.fancybox.setTranslate(o,n.getFitPos(e)),e.pos===n.currPos&&(n.isAnimating=!1,n.updateCursor())),n.adjustLayout(e),a.length&&(a.trigger("refresh"),e.pos===n.currPos&&n.$refs.toolbar.add(n.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",a.get(0).scrollHeight>a.get(0).clientHeight)),n.trigger("onUpdate",e,t)},centerSlide:function(e){var t=this,n=t.current,o=n.$slide;!t.isClosing&&n&&(o.siblings().css({transform:"",opacity:""}),o.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),g.fancybox.animate(o,{top:0,left:0,opacity:1},e===v?0:e,function(){o.css({transform:"",opacity:""}),n.isComplete||t.complete()},!1))},isMoved:function(e){var t,n,o=e||this.current;return!!o&&(n=g.fancybox.getTranslate(this.$refs.stage),t=g.fancybox.getTranslate(o.$slide),!o.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(t.top-n.top)||.5<Math.abs(t.left-n.left)))},updateCursor:function(e,t){var n,o,i=this,r=i.current,a=i.$refs.container;r&&!i.isClosing&&i.Guestures&&(a.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),o=!!(n=i.canPan(e,t))||i.isZoomable(),a.toggleClass("fancybox-is-zoomable",o),g("[data-fancybox-zoom]").prop("disabled",!o),n?a.addClass("fancybox-can-pan"):o&&("zoom"===r.opts.clickContent||g.isFunction(r.opts.clickContent)&&"zoom"==r.opts.clickContent(r))?a.addClass("fancybox-can-zoomIn"):r.opts.touch&&(r.opts.touch.vertical||1<i.group.length)&&"video"!==r.contentType&&a.addClass("fancybox-can-swipe"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing&&"image"===t.type&&!t.hasError){if(!t.isLoaded)return!0;if((e=this.getFitPos(t))&&(t.width>e.width||t.height>e.height))return!0}return!1},isScaledDown:function(e,t){var n=!1,o=this.current,i=o.$content;return e!==v&&t!==v?n=e<o.width&&t<o.height:i&&(n=(n=g.fancybox.getTranslate(i)).width<o.width&&n.height<o.height),n},canPan:function(e,t){var n=this.current,o=null,i=!1;return"image"===n.type&&(n.isComplete||e&&t)&&!n.hasError&&(i=this.getFitPos(n),e!==v&&t!==v?o={width:e,height:t}:n.isComplete&&(o=g.fancybox.getTranslate(n.$content)),o&&i&&(i=1.5<Math.abs(o.width-i.width)||1.5<Math.abs(o.height-i.height))),i},loadSlide:function(n){var e,t,o,i=this;if(!n.isLoading&&!n.isLoaded){if(!(n.isLoading=!0)===i.trigger("beforeLoad",n))return n.isLoading=!1;switch(e=n.type,(t=n.$slide).off("refresh").trigger("onReset").addClass(n.opts.slideClass),e){case"image":i.setImage(n);break;case"iframe":i.setIframe(n);break;case"html":i.setContent(n,n.src||n.content);break;case"video":i.setContent(n,n.opts.video.tpl.replace(/\{\{src\}\}/gi,n.src).replace("{{format}}",n.opts.videoFormat||n.opts.video.format||"").replace("{{poster}}",n.thumb||""));break;case"inline":g(n.src).length?i.setContent(n,g(n.src)):i.setError(n);break;case"ajax":i.showLoading(n),o=g.ajax(g.extend({},n.opts.ajax.settings,{url:n.src,success:function(e,t){"success"===t&&i.setContent(n,e)},error:function(e,t){e&&"abort"!==t&&i.setError(n)}})),t.one("onReset",function(){o.abort()});break;default:i.setError(n)}return!0}},setImage:function(t){var e,n=this;setTimeout(function(){var e=t.$image;n.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||n.showLoading(t)},50),n.checkSrcset(t),t.$content=g('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,(e=d.createElement("img")).onerror=function(){g(this).remove(),t.$ghost=null},e.onload=function(){n.afterLoad(t)},t.$ghost=g(e).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),n.setBigImage(t)},checkSrcset:function(e){var t,n,o,i,r=e.opts.srcset||e.opts.image.srcset;if(r){o=l.devicePixelRatio||1,i=l.innerWidth*o,(n=r.split(",").map(function(e){var o={};return e.trim().split(/\s+/).forEach(function(e,t){var n=parseInt(e.substring(0,e.length-1),10);if(0===t)return o.url=e;n&&(o.value=n,o.postfix=e[e.length-1])}),o})).sort(function(e,t){return e.value-t.value});for(var a=0;a<n.length;a++){var s=n[a];if("w"===s.postfix&&s.value>=i||"x"===s.postfix&&s.value>=o){t=s;break}}!t&&n.length&&(t=n[n.length-1]),t&&(e.src=t.url,e.width&&e.height&&"w"==t.postfix&&(e.height=e.width/e.height*t.value,e.width=t.value),e.opts.srcset=r)}},setBigImage:function(t){var n=this,e=d.createElement("img"),o=g(e);t.$image=o.one("error",function(){n.setError(t)}).one("load",function(){var e;t.$ghost||(n.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),n.afterLoad(t)),n.isClosing||(t.opts.srcset&&((e=t.opts.sizes)&&"auto"!==e||(e=(1<t.width/t.height&&1<i.width()/i.height()?"100":Math.round(t.width/t.height*100))+"vw"),o.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!n.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),n.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(e.complete||"complete"==e.readyState)&&o.naturalWidth&&o.naturalHeight?o.trigger("load"):e.error&&o.trigger("error")},resolveImageSlideSize:function(e,t,n){var o=parseInt(e.opts.width,10),i=parseInt(e.opts.height,10);e.width=t,e.height=n,0<o&&(e.width=o,e.height=Math.floor(o*n/t)),0<i&&(e.width=Math.floor(i*t/n),e.height=i)},setIframe:function(i){var r,t=this,a=i.opts.iframe,s=i.$slide;i.$content=g('<div class="fancybox-content'+(a.preload?" fancybox-is-hidden":"")+'"></div>').css(a.css).appendTo(s),s.addClass("fancybox-slide--"+i.contentType),i.$iframe=r=g(a.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(a.attr).appendTo(i.$content),a.preload?(t.showLoading(i),r.on("load.fb error.fb",function(e){this.isReady=1,i.$slide.trigger("refresh"),t.afterLoad(i)}),s.on("refresh.fb",function(){var e,t=i.$content,n=a.css.width,o=a.css.height;if(1===r[0].isReady){try{e=r.contents().find("body")}catch(e){}e&&e.length&&e.children().length&&(s.css("overflow","visible"),t.css({width:"100%","max-width":"100%",height:"9999px"}),n===v&&(n=Math.ceil(Math.max(e[0].clientWidth,e.outerWidth(!0)))),t.css("width",n||"").css("max-width",""),o===v&&(o=Math.ceil(Math.max(e[0].clientHeight,e.outerHeight(!0)))),t.css("height",o||""),s.css("overflow","auto")),t.removeClass("fancybox-is-hidden")}})):t.afterLoad(i),r.attr("src",i.src),s.one("onReset",function(){try{g(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(e){}g(this).off("refresh.fb").empty(),i.isLoaded=!1,i.isRevealed=!1})},setContent:function(e,t){var n;this.isClosing||(this.hideLoading(e),e.$content&&g.fancybox.stop(e.$content),e.$slide.empty(),(n=t)&&n.hasOwnProperty&&n instanceof g&&t.parent().length?((t.hasClass("fancybox-content")||t.parent().hasClass("fancybox-content"))&&t.parents(".fancybox-slide").trigger("onReset"),e.$placeholder=g("<div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===g.type(t)&&(t=g("<div>").append(g.trim(t)).contents()),e.opts.filter&&(t=g("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){g(this).find("video,audio").trigger("pause"),e.$placeholder&&(e.$placeholder.after(t.removeClass("fancybox-content").hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(g(this).empty(),e.isLoaded=!1,e.isRevealed=!1)}),g(t).appendTo(e.$slide),g(t).is("video,audio")&&(g(t).addClass("fancybox-video"),g(t).wrap("<div></div>"),e.contentType="video",e.opts.width=e.opts.width||g(t).attr("width"),e.opts.height=e.opts.height||g(t).attr("height")),e.$content=e.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),e.$content.siblings().hide(),e.$content.length||(e.$content=e.$slide.wrapInner("<div></div>").children().first()),e.$content.addClass("fancybox-content"),e.$slide.addClass("fancybox-slide--"+e.contentType),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.trigger("onReset").removeClass("fancybox-slide--"+e.contentType).addClass("fancybox-slide--error"),e.contentType="html",this.setContent(e,this.translate(e,e.opts.errorTpl)),e.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=g(this.translate(this,this.opts.spinnerTpl)).appendTo(e.$slide).hide().fadeIn("fast"))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.stop().remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),!e.opts.smallBtn||e.$smallBtn&&e.$smallBtn.length||(e.$smallBtn=g(t.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content)),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&g('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.adjustCaption(e),t.adjustLayout(e),e.pos===t.currPos&&t.updateCursor(),t.revealContent(e))},adjustCaption:function(e){var t,n=this,o=e||n.current,i=o.opts.caption,r=o.opts.preventCaptionOverlap,a=n.$refs.caption,s=!1;a.toggleClass("fancybox-caption--separate",r),r&&i&&i.length&&(o.pos!==n.currPos?((t=a.clone().appendTo(a.parent())).children().eq(0).empty().html(i),s=t.outerHeight(!0),t.empty().remove()):n.$caption&&(s=n.$caption.outerHeight(!0)),o.$slide.css("padding-bottom",s||""))},adjustLayout:function(e){var t,n,o,i,r=e||this.current;r.isLoaded&&!0!==r.opts.disableLayoutFix&&(r.$content.css("margin-bottom",""),r.$content.outerHeight()>r.$slide.height()+.5&&(o=r.$slide[0].style["padding-bottom"],i=r.$slide.css("padding-bottom"),0<parseFloat(i)&&(t=r.$slide[0].scrollHeight,r.$slide.css("padding-bottom",0),Math.abs(t-r.$slide[0].scrollHeight)<1&&(n=i),r.$slide.css("padding-bottom",o))),r.$content.css("margin-bottom",n))},revealContent:function(e){var t,n,o,i,r=this,a=e.$slide,s=!1,l=!1,c=r.isMoved(e),u=e.isRevealed;return e.isRevealed=!0,t=e.opts[r.firstRun?"animationEffect":"transitionEffect"],o=e.opts[r.firstRun?"animationDuration":"transitionDuration"],o=parseInt(e.forcedDuration===v?o:e.forcedDuration,10),!c&&e.pos===r.currPos&&o||(t=!1),"zoom"===t&&(e.pos===r.currPos&&o&&"image"===e.type&&!e.hasError&&(l=r.getThumbPos(e))?s=r.getFitPos(e):t="fade"),"zoom"===t?(r.isAnimating=!0,s.scaleX=s.width/l.width,s.scaleY=s.height/l.height,"auto"==(i=e.opts.zoomOpacity)&&(i=.1<Math.abs(e.width/e.height-l.width/l.height)),i&&(l.opacity=.1,s.opacity=1),g.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),l),p(e.$content),void g.fancybox.animate(e.$content,s,o,function(){r.isAnimating=!1,r.complete()})):(r.updateSlide(e),t?(g.fancybox.stop(a),n="fancybox-slide--"+(e.pos>=r.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+t,a.addClass(n).removeClass("fancybox-slide--current"),e.$content.removeClass("fancybox-is-hidden"),p(a),"image"!==e.type&&e.$content.hide().show(0),void g.fancybox.animate(a,"fancybox-slide--current",o,function(){a.removeClass(n).css({transform:"",opacity:""}),e.pos===r.currPos&&r.complete()},!0)):(e.$content.removeClass("fancybox-is-hidden"),u||!c||"image"!==e.type||e.hasError||e.$content.hide().fadeIn("fast"),void(e.pos===r.currPos&&r.complete())))},getThumbPos:function(e){var t,n,o,i,r,a,s,l,c,u=e.$thumb;return!!(u&&(s=u[0])&&s.ownerDocument===d&&(g(".fancybox-container").css("pointer-events","none"),l={x:s.getBoundingClientRect().left+s.offsetWidth/2,y:s.getBoundingClientRect().top+s.offsetHeight/2},c=d.elementFromPoint(l.x,l.y)===s,g(".fancybox-container").css("pointer-events",""),c))&&(n=g.fancybox.getTranslate(u),o=parseFloat(u.css("border-top-width")||0),i=parseFloat(u.css("border-right-width")||0),r=parseFloat(u.css("border-bottom-width")||0),a=parseFloat(u.css("border-left-width")||0),t={top:n.top+o,left:n.left+a,width:n.width-i-a,height:n.height-o-r,scaleX:1,scaleY:1},0<n.width&&0<n.height&&t)},complete:function(){var e,n=this,t=n.current,o={};!n.isMoved()&&t.isLoaded&&(t.isComplete||(t.isComplete=!0,t.$slide.siblings().trigger("onReset"),n.preload("inline"),p(t.$slide),t.$slide.addClass("fancybox-slide--complete"),g.each(n.slides,function(e,t){t.pos>=n.currPos-1&&t.pos<=n.currPos+1?o[t.pos]=t:t&&(g.fancybox.stop(t.$slide),t.$slide.off().remove())}),n.slides=o),n.isAnimating=!1,n.updateCursor(),n.trigger("afterShow"),t.opts.video.autoStart&&t.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),n.next()}),t.opts.autoFocus&&"html"===t.contentType&&((e=t.$content.find("input[autofocus]:enabled:visible:first")).length?e.trigger("focus"):n.focus(null,!0)),t.$slide.scrollTop(0).scrollLeft(0))},preload:function(e){var t,n,o=this;o.group.length<2||(n=o.slides[o.currPos+1],(t=o.slides[o.currPos-1])&&t.type===e&&o.loadSlide(t),n&&n.type===e&&o.loadSlide(n))},focus:function(e,t){var n,o,i=this,r=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");i.isClosing||((n=(n=!e&&i.current&&i.current.isComplete?i.current.$slide.find("*:visible"+(t?":not(.fancybox-close-small)":"")):i.$refs.container.find("*:visible")).filter(r).filter(function(){return"hidden"!==g(this).css("visibility")&&!g(this).hasClass("disabled")})).length?(o=n.index(d.activeElement),e&&e.shiftKey?(o<0||0==o)&&(e.preventDefault(),n.eq(n.length-1).trigger("focus")):(o<0||o==n.length-1)&&(e&&e.preventDefault(),n.eq(0).trigger("focus"))):i.$refs.container.trigger("focus"))},activate:function(){var t=this;g(".fancybox-container").each(function(){var e=g(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(e,t){function n(){u.cleanUp(e)}var o,i,r,a,s,l,c,u=this,d=u.current;return!u.isClosing&&(!(u.isClosing=!0)===u.trigger("beforeClose",e)?(u.isClosing=!1,f(function(){u.update()}),!1):(u.removeEvents(),r=d.$content,o=d.opts.animationEffect,i=g.isNumeric(t)?t:o?d.opts.animationDuration:0,d.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==e?g.fancybox.stop(d.$slide):o=!1,d.$slide.siblings().trigger("onReset").remove(),i&&u.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",i+"ms"),u.hideLoading(d),u.hideControls(!0),u.updateCursor(),"zoom"!==o||r&&i&&"image"===d.type&&!u.isMoved()&&!d.hasError&&(c=u.getThumbPos(d))||(o="fade"),"zoom"===o?(g.fancybox.stop(r),l={top:(a=g.fancybox.getTranslate(r)).top,left:a.left,scaleX:a.width/c.width,scaleY:a.height/c.height,width:c.width,height:c.height},"auto"==(s=d.opts.zoomOpacity)&&(s=.1<Math.abs(d.width/d.height-c.width/c.height)),s&&(c.opacity=0),g.fancybox.setTranslate(r,l),p(r),g.fancybox.animate(r,c,i,n)):o&&i?g.fancybox.animate(d.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+o,i,n):!0===e?setTimeout(n,i):n(),!0))},cleanUp:function(e){var t,n,o,i=this,r=i.current.opts.$orig;i.current.$slide.trigger("onReset"),i.$refs.container.empty().remove(),i.trigger("afterClose",e),i.current.opts.backFocus&&(r&&r.length&&r.is(":visible")||(r=i.$trigger),r&&r.length&&(n=l.scrollX,o=l.scrollY,r.trigger("focus"),g("html, body").scrollTop(o).scrollLeft(n))),i.current=null,(t=g.fancybox.getInstance())?t.activate():(g("body").removeClass("fancybox-active compensate-for-scrollbar"),g("#fancybox-style-noscroll").remove())},trigger:function(e,t){var n,o=Array.prototype.slice.call(arguments,1),i=this,r=t&&t.opts?t:i.current;if(r?o.unshift(r):r=i,o.unshift(i),g.isFunction(r.opts[e])&&(n=r.opts[e].apply(r,o)),!1===n)return n;"afterClose"!==e&&i.$refs?i.$refs.container.trigger(e+".fb",o):a.trigger(e+".fb",o)},updateControls:function(){var e=this,t=e.current,n=t.index,o=e.$refs.container,i=e.$refs.caption,r=t.opts.caption;t.$slide.trigger("refresh"),r&&r.length?(e.$caption=i).children().eq(0).html(r):e.$caption=null,e.hasHiddenControls||e.isIdle||e.showControls(),o.find("[data-fancybox-count]").html(e.group.length),o.find("[data-fancybox-index]").html(n+1),o.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&n<=0),o.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&n>=e.group.length-1),"image"===t.type?o.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():t.opts.toolbar&&o.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),g(d.activeElement).is(":hidden,[disabled]")&&e.$refs.container.trigger("focus")},hideControls:function(e){var t=["infobar","toolbar","nav"];!e&&this.current.opts.preventCaptionOverlap||t.push("caption"),this.$refs.container.removeClass(t.map(function(e){return"fancybox-show-"+e}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,n=e.$refs.container;e.hasHiddenControls=!1,e.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&1<e.group.length)).toggleClass("fancybox-show-caption",!!e.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&1<e.group.length)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),g.fancybox={version:"3.5.7",defaults:e,getInstance:function(e){var t=g('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),n=Array.prototype.slice.call(arguments,1);return t instanceof o&&("string"===g.type(e)?t[e].apply(t,n):"function"===g.type(e)&&e.apply(t,n),t)},open:function(e,t,n){return new o(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close(e))},destroy:function(){this.close(!0),a.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(n=d.createElement("div"),l.getComputedStyle&&l.getComputedStyle(n)&&l.getComputedStyle(n).getPropertyValue("transform")&&!(d.documentMode&&d.documentMode<11)),getTranslate:function(e){var t;return!(!e||!e.length)&&{top:(t=e[0].getBoundingClientRect()).top||0,left:t.left||0,width:t.width,height:t.height,opacity:parseFloat(e.css("opacity"))}},setTranslate:function(e,t){var n="",o={};if(e&&t)return t.left===v&&t.top===v||(n=(t.left===v?e.position().left:t.left)+"px, "+(t.top===v?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),t.scaleX!==v&&t.scaleY!==v?n+=" scale("+t.scaleX+", "+t.scaleY+")":t.scaleX!==v&&(n+=" scaleX("+t.scaleX+")"),n.length&&(o.transform=n),t.opacity!==v&&(o.opacity=t.opacity),t.width!==v&&(o.width=t.width),t.height!==v&&(o.height=t.height),e.css(o)},animate:function(t,n,o,i,r){var a,s=this;g.isFunction(o)&&(i=o,o=null),s.stop(t),a=s.getTranslate(t),t.on(c,function(e){e&&e.originalEvent&&(!t.is(e.originalEvent.target)||"z-index"==e.originalEvent.propertyName)||(s.stop(t),g.isNumeric(o)&&t.css("transition-duration",""),g.isPlainObject(n)?n.scaleX!==v&&n.scaleY!==v&&s.setTranslate(t,{top:n.top,left:n.left,width:a.width*n.scaleX,height:a.height*n.scaleY,scaleX:1,scaleY:1}):!0!==r&&t.removeClass(n),g.isFunction(i)&&i(e))}),g.isNumeric(o)&&t.css("transition-duration",o+"ms"),g.isPlainObject(n)?(n.scaleX!==v&&n.scaleY!==v&&(delete n.width,delete n.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),g.fancybox.setTranslate(t,n)):t.addClass(n),t.data("timer",setTimeout(function(){t.trigger(c)},o+33))},stop:function(e,t){e&&e.length&&(clearTimeout(e.data("timer")),t&&e.trigger(c),e.off(c).css("transition-duration",""),e.parent().removeClass("fancybox-is-scaling"))}},g.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?g("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},y):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},y),this},a.on("click.fb-start","[data-fancybox]",y),a.on("click.fb-start","[data-fancybox-trigger]",function(e){g('[data-fancybox="'+g(this).attr("data-fancybox-trigger")+'"]').eq(g(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:g(this)})}),s=".fancybox-button",h="fancybox-focus",m=null,a.on("mousedown mouseup focus blur",s,function(e){switch(e.type){case"mousedown":m=g(this);break;case"mouseup":m=null;break;case"focusin":g(s).removeClass(h),g(this).is(m)||g(this).is("[disabled]")||g(this).addClass(h);break;case"focusout":g(s).removeClass(h)}})))}(window,document,jQuery),function(p){"use strict";function h(n,e,t){if(n)return t=t||"","object"===p.type(t)&&(t=p.param(t,!0)),p.each(e,function(e,t){n=n.replace("$"+e,t||"")}),t.length&&(n+=(0<n.indexOf("?")?"&":"?")+t),n}var o={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12]+"").replace(/\?/,"&")+"&output="+(e[12]&&0<e[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};p(document).on("objectNeedsType.fb",function(e,t,i){var r,a,s,l,c,u,d=i.src||"",f=!1,n=p.extend(!0,{},o,i.opts.media);p.each(n,function(e,t){if(a=d.match(t.matcher)){if(f=t.type,u=e,c={},t.paramPlace&&a[t.paramPlace]){"?"==(l=a[t.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var n=0;n<l.length;++n){var o=l[n].split("=",2);2==o.length&&(c[o[0]]=decodeURIComponent(o[1].replace(/\+/g," ")))}}return s=p.extend(!0,{},t.params,i.opts[e],c),d="function"===p.type(t.url)?t.url.call(this,a,s,i):h(t.url,a,s),r="function"===p.type(t.thumb)?t.thumb.call(this,a,s,i):h(t.thumb,a),"youtube"===e?d=d.replace(/&t=((\d+)m)?(\d+)s/,function(e,t,n,o){return"&start="+((n?60*parseInt(n,10):0)+parseInt(o,10))}):"vimeo"===e&&(d=d.replace("&%23","#")),!1}}),f?(i.opts.thumb||i.opts.$thumb&&i.opts.$thumb.length||(i.opts.thumb=r),"iframe"===f&&(i.opts=p.extend(!0,i.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),p.extend(i,{type:f,src:d,origSrc:i.src,contentSource:u,contentType:"image"===f?"image":"gmap_place"==u||"gmap_search"==u?"map":"video"})):d&&(i.type=i.opts.defaultType)});var i={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(e){var t,n=this;this[e].loaded?setTimeout(function(){n.done(e)}):this[e].loading||(this[e].loading=!0,(t=document.createElement("script")).type="text/javascript",t.src=this[e].src,"youtube"===e?window.onYouTubeIframeAPIReady=function(){n[e].loaded=!0,n.done(e)}:t.onload=function(){n[e].loaded=!0,n.done(e)},document.body.appendChild(t))},done:function(e){var t,n;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(t=p.fancybox.getInstance())&&(n=t.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?new YT.Player(n.attr("id"),{events:{onStateChange:function(e){0==e.data&&t.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(n).on("ended",function(){t.next()}))}};p(document).on({"afterShow.fb":function(e,t,n){1<t.group.length&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&i.load(n.contentSource)}})}(jQuery),function(g,l,v){"use strict";function u(e){var t=[];for(var n in e=(e=e.originalEvent||e||g.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[n].pageX?t.push({x:e[n].pageX,y:e[n].pageY}):e[n].clientX&&t.push({x:e[n].clientX,y:e[n].clientY});return t}function m(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0}function c(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||v.isFunction(e.get(0).onclick)||e.data("selectable"))return 1;for(var t=0,n=e[0].attributes,o=n.length;t<o;t++)if("data-fancybox-"===n[t].nodeName.substr(0,14))return 1}function d(e){for(var t,n,o,i,r,a=!1;t=e.get(0),r=i=o=n=void 0,n=g.getComputedStyle(t)["overflow-y"],o=g.getComputedStyle(t)["overflow-x"],i=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,r=("scroll"===o||"auto"===o)&&t.scrollWidth>t.clientWidth,!(a=i||r)&&(e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body"););return a}function n(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",v.proxy(t,"ontouchstart"))}var y=g.requestAnimationFrame||g.webkitRequestAnimationFrame||g.mozRequestAnimationFrame||g.oRequestAnimationFrame||function(e){return g.setTimeout(e,1e3/60)},b=g.cancelAnimationFrame||g.webkitCancelAnimationFrame||g.mozCancelAnimationFrame||g.oCancelAnimationFrame||function(e){g.clearTimeout(e)};n.prototype.destroy=function(){var e=this;e.$container.off(".fb.touch"),v(l).off(".fb.touch"),e.requestId&&(b(e.requestId),e.requestId=null),e.tapped&&(clearTimeout(e.tapped),e.tapped=null)},n.prototype.ontouchstart=function(e){var t=this,n=v(e.target),o=t.instance,i=o.current,r=i.$slide,a=i.$content,s="touchstart"==e.type;if(s&&t.$container.off("mousedown.fb.touch"),(!e.originalEvent||2!=e.originalEvent.button)&&r.length&&n.length&&!c(n)&&!c(n.parent())&&(n.is("img")||!(e.originalEvent.clientX>n[0].clientWidth+n.offset().left))){if(!i||o.isAnimating||i.$slide.hasClass("fancybox-animated"))return e.stopPropagation(),void e.preventDefault();t.realPoints=t.startPoints=u(e),t.startPoints.length&&(i.touch&&e.stopPropagation(),t.startEvent=e,t.canTap=!0,t.$target=n,t.$content=a,t.opts=i.opts.touch,t.isPanning=!1,t.isSwiping=!1,t.isZooming=!1,t.isScrolling=!1,t.canPan=o.canPan(),t.startTime=(new Date).getTime(),t.distanceX=t.distanceY=t.distance=0,t.canvasWidth=Math.round(r[0].clientWidth),t.canvasHeight=Math.round(r[0].clientHeight),t.contentLastPos=null,t.contentStartPos=v.fancybox.getTranslate(t.$content)||{top:0,left:0},t.sliderStartPos=v.fancybox.getTranslate(r),t.stagePos=v.fancybox.getTranslate(o.$refs.stage),t.sliderStartPos.top-=t.stagePos.top,t.sliderStartPos.left-=t.stagePos.left,t.contentStartPos.top-=t.stagePos.top,t.contentStartPos.left-=t.stagePos.left,v(l).off(".fb.touch").on(s?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",v.proxy(t,"ontouchend")).on(s?"touchmove.fb.touch":"mousemove.fb.touch",v.proxy(t,"ontouchmove")),v.fancybox.isMobile&&l.addEventListener("scroll",t.onscroll,!0),((t.opts||t.canPan)&&(n.is(t.$stage)||t.$stage.find(n).length)||(n.is(".fancybox-image")&&e.preventDefault(),v.fancybox.isMobile&&n.parents(".fancybox-caption").length))&&(t.isScrollable=d(n)||d(n.parent()),v.fancybox.isMobile&&t.isScrollable||e.preventDefault(),1!==t.startPoints.length&&!i.hasError||(t.canPan?(v.fancybox.stop(t.$content),t.isPanning=!0):t.isSwiping=!0,t.$container.addClass("fancybox-is-grabbing")),2===t.startPoints.length&&"image"===i.type&&(i.isLoaded||i.$ghost)&&(t.canTap=!1,t.isSwiping=!1,t.isPanning=!1,t.isZooming=!0,v.fancybox.stop(t.$content),t.centerPointStartX=.5*(t.startPoints[0].x+t.startPoints[1].x)-v(g).scrollLeft(),t.centerPointStartY=.5*(t.startPoints[0].y+t.startPoints[1].y)-v(g).scrollTop(),t.percentageOfImageAtPinchPointX=(t.centerPointStartX-t.contentStartPos.left)/t.contentStartPos.width,t.percentageOfImageAtPinchPointY=(t.centerPointStartY-t.contentStartPos.top)/t.contentStartPos.height,t.startDistanceBetweenFingers=m(t.startPoints[0],t.startPoints[1]))))}},n.prototype.onscroll=function(e){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},n.prototype.ontouchmove=function(e){var t=this;void 0===e.originalEvent.buttons||0!==e.originalEvent.buttons?t.isScrolling?t.canTap=!1:(t.newPoints=u(e),(t.opts||t.canPan)&&t.newPoints.length&&t.newPoints.length&&(t.isSwiping&&!0===t.isSwiping||e.preventDefault(),t.distanceX=m(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=m(t.newPoints[0],t.startPoints[0],"y"),t.distance=m(t.newPoints[0],t.startPoints[0]),0<t.distance&&(t.isSwiping?t.onSwipe(e):t.isPanning?t.onPan():t.isZooming&&t.onZoom()))):t.ontouchend(e)},n.prototype.onSwipe=function(e){var t,i=this,r=i.instance,n=i.isSwiping,o=i.sliderStartPos.left||0;if(!0!==n)"x"==n&&(0<i.distanceX&&(i.instance.group.length<2||0===i.instance.current.index&&!i.instance.current.opts.loop)?o+=Math.pow(i.distanceX,.8):i.distanceX<0&&(i.instance.group.length<2||i.instance.current.index===i.instance.group.length-1&&!i.instance.current.opts.loop)?o-=Math.pow(-i.distanceX,.8):o+=i.distanceX),i.sliderLastPos={top:"x"==n?0:i.sliderStartPos.top+i.distanceY,left:o},i.requestId&&(b(i.requestId),i.requestId=null),i.requestId=y(function(){i.sliderLastPos&&(v.each(i.instance.slides,function(e,t){var n=t.pos-i.instance.currPos;v.fancybox.setTranslate(t.$slide,{top:i.sliderLastPos.top,left:i.sliderLastPos.left+n*i.canvasWidth+n*t.opts.gutter})}),i.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(i.distance)){if(i.canTap=!1,r.group.length<2&&i.opts.vertical?i.isSwiping="y":r.isDragging||!1===i.opts.vertical||"auto"===i.opts.vertical&&800<v(g).width()?i.isSwiping="x":(t=Math.abs(180*Math.atan2(i.distanceY,i.distanceX)/Math.PI),i.isSwiping=45<t&&t<135?"y":"x"),"y"===i.isSwiping&&v.fancybox.isMobile&&i.isScrollable)return void(i.isScrolling=!0);r.isDragging=i.isSwiping,i.startPoints=i.newPoints,v.each(r.slides,function(e,t){var n,o;v.fancybox.stop(t.$slide),n=v.fancybox.getTranslate(t.$slide),o=v.fancybox.getTranslate(r.$refs.stage),t.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),t.pos===r.current.pos&&(i.sliderStartPos.top=n.top-o.top,i.sliderStartPos.left=n.left-o.left),v.fancybox.setTranslate(t.$slide,{top:n.top-o.top,left:n.left-o.left})}),r.SlideShow&&r.SlideShow.isActive&&r.SlideShow.stop()}},n.prototype.onPan=function(){var e=this;m(e.newPoints[0],e.realPoints[0])<(v.fancybox.isMobile?10:5)?e.startPoints=e.newPoints:(e.canTap=!1,e.contentLastPos=e.limitMovement(),e.requestId&&b(e.requestId),e.requestId=y(function(){v.fancybox.setTranslate(e.$content,e.contentLastPos)}))},n.prototype.limitMovement=function(){var e=this,t=e.canvasWidth,n=e.canvasHeight,o=e.distanceX,i=e.distanceY,r=e.contentStartPos,a=r.left,s=r.top,l=r.width,c=r.height,u=t<l?a+o:a,d=s+i,f=Math.max(0,.5*t-.5*l),p=Math.max(0,.5*n-.5*c),h=Math.min(t-l,.5*t-.5*l),g=Math.min(n-c,.5*n-.5*c);return 0<o&&f<u&&(u=f-1+Math.pow(-f+a+o,.8)||0),o<0&&u<h&&(u=h+1-Math.pow(h-a-o,.8)||0),0<i&&p<d&&(d=p-1+Math.pow(-p+s+i,.8)||0),i<0&&d<g&&(d=g+1-Math.pow(g-s-i,.8)||0),{top:d,left:u}},n.prototype.limitPosition=function(e,t,n,o){var i=this.canvasWidth,r=this.canvasHeight;return e=i<n?(e=0<e?0:e)<i-n?i-n:e:Math.max(0,i/2-n/2),{top:t=r<o?(t=0<t?0:t)<r-o?r-o:t:Math.max(0,r/2-o/2),left:e}},n.prototype.onZoom=function(){var e=this,t=e.contentStartPos,n=t.width,o=t.height,i=t.left,r=t.top,a=m(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,s=Math.floor(n*a),l=Math.floor(o*a),c=(n-s)*e.percentageOfImageAtPinchPointX,u=(o-l)*e.percentageOfImageAtPinchPointY,d=(e.newPoints[0].x+e.newPoints[1].x)/2-v(g).scrollLeft(),f=(e.newPoints[0].y+e.newPoints[1].y)/2-v(g).scrollTop(),p=d-e.centerPointStartX,h={top:r+(u+(f-e.centerPointStartY)),left:i+(c+p),scaleX:a,scaleY:a};e.canTap=!1,e.newWidth=s,e.newHeight=l,e.contentLastPos=h,e.requestId&&b(e.requestId),e.requestId=y(function(){v.fancybox.setTranslate(e.$content,e.contentLastPos)})},n.prototype.ontouchend=function(e){var t=this,n=t.isSwiping,o=t.isPanning,i=t.isZooming,r=t.isScrolling;if(t.endPoints=u(e),t.dMs=Math.max((new Date).getTime()-t.startTime,1),t.$container.removeClass("fancybox-is-grabbing"),v(l).off(".fb.touch"),l.removeEventListener("scroll",t.onscroll,!0),t.requestId&&(b(t.requestId),t.requestId=null),t.isSwiping=!1,t.isPanning=!1,t.isZooming=!1,t.isScrolling=!1,t.instance.isDragging=!1,t.canTap)return t.onTap(e);t.speed=100,t.velocityX=t.distanceX/t.dMs*.5,t.velocityY=t.distanceY/t.dMs*.5,o?t.endPanning():i?t.endZooming():t.endSwiping(n,r)},n.prototype.endSwiping=function(e,t){var n=this,o=!1,i=n.instance.group.length,r=Math.abs(n.distanceX),a="x"==e&&1<i&&(130<n.dMs&&10<r||50<r);n.sliderLastPos=null,"y"==e&&!t&&50<Math.abs(n.distanceY)?(v.fancybox.animate(n.instance.current.$slide,{top:n.sliderStartPos.top+n.distanceY+150*n.velocityY,opacity:0},200),o=n.instance.close(!0,250)):a&&0<n.distanceX?o=n.instance.previous(300):a&&n.distanceX<0&&(o=n.instance.next(300)),!1!==o||"x"!=e&&"y"!=e||n.instance.centerSlide(200),n.$container.removeClass("fancybox-is-sliding")},n.prototype.endPanning=function(){var e,t,n,o=this;o.contentLastPos&&(t=!1===o.opts.momentum||350<o.dMs?(e=o.contentLastPos.left,o.contentLastPos.top):(e=o.contentLastPos.left+500*o.velocityX,o.contentLastPos.top+500*o.velocityY),(n=o.limitPosition(e,t,o.contentStartPos.width,o.contentStartPos.height)).width=o.contentStartPos.width,n.height=o.contentStartPos.height,v.fancybox.animate(o.$content,n,366))},n.prototype.endZooming=function(){var e,t,n,o,i=this,r=i.instance.current,a=i.newWidth,s=i.newHeight;i.contentLastPos&&(e=i.contentLastPos.left,o={top:t=i.contentLastPos.top,left:e,width:a,height:s,scaleX:1,scaleY:1},v.fancybox.setTranslate(i.$content,o),a<i.canvasWidth&&s<i.canvasHeight?i.instance.scaleToFit(150):a>r.width||s>r.height?i.instance.scaleToActual(i.centerPointStartX,i.centerPointStartY,150):(n=i.limitPosition(e,t,a,s),v.fancybox.animate(i.$content,n,150)))},n.prototype.onTap=function(n){function e(e){var t=a.opts[e];if(v.isFunction(t)&&(t=t.apply(r,[a,n])),t)switch(t){case"close":r.close(o.startEvent);break;case"toggleControls":r.toggleControls();break;case"next":r.next();break;case"nextOrClose":1<r.group.length?r.next():r.close(o.startEvent);break;case"zoom":"image"==a.type&&(a.isLoaded||a.$ghost)&&(r.canPan()?r.scaleToFit():r.isScaledDown()?r.scaleToActual(l,c):r.group.length<2&&r.close(o.startEvent))}}var t,o=this,i=v(n.target),r=o.instance,a=r.current,s=n&&u(n)||o.startPoints,l=s[0]?s[0].x-v(g).scrollLeft()-o.stagePos.left:0,c=s[0]?s[0].y-v(g).scrollTop()-o.stagePos.top:0;if((!n.originalEvent||2!=n.originalEvent.button)&&(i.is("img")||!(l>i[0].clientWidth+i.offset().left))){if(i.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(i.is(".fancybox-slide"))t="Slide";else{if(!r.current.$content||!r.current.$content.find(i).addBack().filter(i).length)return;t="Content"}if(o.tapped){if(clearTimeout(o.tapped),o.tapped=null,50<Math.abs(l-o.tapX)||50<Math.abs(c-o.tapY))return this;e("dblclick"+t)}else o.tapX=l,o.tapY=c,a.opts["dblclick"+t]&&a.opts["dblclick"+t]!==a.opts["click"+t]?o.tapped=setTimeout(function(){o.tapped=null,r.isAnimating||e("click"+t)},500):e("click"+t);return this}},v(l).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new n(t))}).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,jQuery),function(a,s){"use strict";s.extend(!0,s.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function n(e){this.instance=e,this.init()}s.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this,t=e.instance,n=t.group[t.currIndex].opts.slideShow;e.$button=t.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),t.group.length<2||!n?e.$button.hide():n.progress&&(e.$progress=s('<div class="fancybox-progress"></div>').appendTo(t.$refs.inner))},set:function(e){var t=this,n=t.instance,o=n.current;o&&(!0===e||o.opts.loop||n.currIndex<n.group.length-1)?t.isActive&&"video"!==o.contentType&&(t.$progress&&s.fancybox.animate(t.$progress.show(),{scaleX:1},o.opts.slideShow.speed),t.timer=setTimeout(function(){n.current.opts.loop||n.current.index!=n.group.length-1?n.next():n.jumpTo(0)},o.opts.slideShow.speed)):(t.stop(),n.idleSecondsCounter=0,n.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var e=this,t=e.instance.current;t&&(e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),e.isActive=!0,t.isComplete&&e.set(!0),e.instance.trigger("onSlideShowChange",!0))},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),e.isActive=!1,e.instance.trigger("onSlideShowChange",!1),e.$progress&&e.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),s(a).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,o){var i=t&&t.SlideShow;o?i&&n.opts.slideShow.autoStart&&i.start():i&&i.isActive&&i.clear()},"afterShow.fb":function(e,t,n){var o=t&&t.SlideShow;o&&o.isActive&&o.set()},"afterKeydown.fb":function(e,t,n,o,i){var r=t&&t.SlideShow;!r||!n.opts.slideShow||80!==i&&32!==i||s(a.activeElement).is("button,a,input")||(o.preventDefault(),r.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),s(a).on("visibilitychange",function(){var e=s.fancybox.getInstance(),t=e&&e.SlideShow;t&&t.isActive&&(a.hidden?t.clear():t.set())})}(document,jQuery),function(r,n){"use strict";var o,i=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],t={},n=0;n<e.length;n++){var o=e[n];if(o&&o[1]in r){for(var i=0;i<o.length;i++)t[e[0][i]]=o[i];return t}}return!1}();i&&(o={request:function(e){(e=e||r.documentElement)[i.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){r[i.exitFullscreen]()},toggle:function(e){e=e||r.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(r[i.fullscreenElement])},enabled:function(){return Boolean(r[i.fullscreenEnabled])}},n.extend(!0,n.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),n(r).on(i.fullscreenchange,function(){var e=o.isFullscreen(),t=n.fancybox.getInstance();t&&(t.current&&"image"===t.current.type&&t.isAnimating&&(t.isAnimating=!1,t.update(!0,!0,0),t.isComplete||t.complete()),t.trigger("onFullscreenChange",e),t.$refs.container.toggleClass("fancybox-is-fullscreen",e),t.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!e).toggleClass("fancybox-button--fsexit",e))})),n(r).on({"onInit.fb":function(e,t){i?t&&t.group[t.currIndex].opts.fullScreen?(t.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),o.toggle()}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&o.request(),t.FullScreen=o):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():t.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(e,t,n,o,i){t&&t.FullScreen&&70===i&&(o.preventDefault(),t.FullScreen.toggle())},"beforeClose.fb":function(e,t){t&&t.FullScreen&&t.$refs.container.hasClass("fancybox-is-fullscreen")&&o.exit()}})}(document,jQuery),function(e,r){"use strict";var a="fancybox-thumbs",s=a+"-active";r.fancybox.defaults=r.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},r.fancybox.defaults);function o(e){this.init(e)}r.extend(o.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this,n=e.group,o=0;t.instance=e,t.opts=n[e.currIndex].opts.thumbs,(e.Thumbs=t).$button=e.$refs.toolbar.find("[data-fancybox-thumbs]");for(var i=0,r=n.length;i<r&&(n[i].thumb&&o++,!(1<o));i++);1<o&&t.opts?(t.$button.removeAttr("style").on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var n,e=this,t=e.instance,o=e.opts.parentEl,i=[];e.$grid||(e.$grid=r('<div class="'+a+" "+a+"-"+e.opts.axis+'"></div>').appendTo(t.$refs.container.find(o).addBack().filter(o)),e.$grid.on("click","a",function(){t.jumpTo(r(this).attr("data-index"))})),e.$list||(e.$list=r('<div class="'+a+'__list">').appendTo(e.$grid)),r.each(t.group,function(e,t){(n=t.thumb)||"image"!==t.type||(n=t.src),i.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(n&&n.length?' style="background-image:url('+n+')"':'class="fancybox-thumbs-missing"')+"></a>")}),e.$list[0].innerHTML=i.join(""),"x"===e.opts.axis&&e.$list.width(parseInt(e.$grid.css("padding-right"),10)+t.group.length*e.$list.children().eq(0).outerWidth(!0))},focus:function(e){var t,n,o=this,i=o.$list,r=o.$grid;o.instance.current&&(n=(t=i.children().removeClass(s).filter('[data-index="'+o.instance.current.index+'"]').addClass(s)).position(),"y"===o.opts.axis&&(n.top<0||n.top>i.height()-t.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},e):"x"===o.opts.axis&&(n.left<r.scrollLeft()||n.left>r.scrollLeft()+(r.width()-t.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},e))},update:function(){var e=this;e.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),e.isVisible?(e.$grid||e.create(),e.instance.trigger("onThumbsShow"),e.focus(0)):e.$grid&&e.instance.trigger("onThumbsHide"),e.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),r(e).on({"onInit.fb":function(e,t){var n;t&&!t.Thumbs&&(n=new o(t)).isActive&&!0===n.opts.autoStart&&n.show()},"beforeShow.fb":function(e,t,n,o){var i=t&&t.Thumbs;i&&i.isVisible&&i.focus(o?0:250)},"afterKeydown.fb":function(e,t,n,o,i){var r=t&&t.Thumbs;r&&r.isActive&&71===i&&(o.preventDefault(),r.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,jQuery),function(e,r){"use strict";r.extend(!0,r.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(e,t){return!e.currentHash&&"inline"!==t.type&&"html"!==t.type&&(t.origSrc||t.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),r(e).on("click","[data-fancybox-share]",function(){var e,t,n,o=r.fancybox.getInstance(),i=o.current||null;i&&("function"===r.type(i.opts.share.url)&&(e=i.opts.share.url.apply(i,[o,i])),t=i.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===i.type?encodeURIComponent(i.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g,(n={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(e).replace(/[&<>"'`=\/]/g,function(e){return n[e]}))).replace(/\{\{descr\}\}/g,o.$caption?encodeURIComponent(o.$caption.text()):""),r.fancybox.open({src:o.translate(o,t),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(e,t){o.$refs.container.one("beforeClose.fb",function(){e.close(null,0)}),t.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(r,a,i){"use strict";function s(){var e=r.location.hash.substr(1),t=e.split("-"),n=1<t.length&&/^\+?\d+$/.test(t[t.length-1])&&parseInt(t.pop(-1),10)||1;return{hash:e,index:n<1?1:n,gallery:t.join("-")}}function t(e){""!==e.gallery&&i("[data-fancybox='"+i.escapeSelector(e.gallery)+"']").eq(e.index-1).focus().trigger("click.fb-start")}function l(e){var t,n;return!!e&&(""!==(n=(t=e.current?e.current.opts:e.opts).hash||(t.$orig?t.$orig.data("fancybox")||t.$orig.data("fancybox-trigger"):""))&&n)}i.escapeSelector||(i.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})}),i(function(){!1!==i.fancybox.defaults.hash&&(i(a).on({"onInit.fb":function(e,t){var n,o;!1!==t.group[t.currIndex].opts.hash&&(n=s(),(o=l(t))&&n.gallery&&o==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(e,t,n,o){var i;n&&!1!==n.opts.hash&&(i=l(t))&&(t.currentHash=i+(1<t.group.length?"-"+(n.index+1):""),r.location.hash!=="#"+t.currentHash&&(o&&!t.origHash&&(t.origHash=r.location.hash),t.hashTimer&&clearTimeout(t.hashTimer),t.hashTimer=setTimeout(function(){"replaceState"in r.history?(r.history[o?"pushState":"replaceState"]({},a.title,r.location.pathname+r.location.search+"#"+t.currentHash),o&&(t.hasCreatedHistory=!0)):r.location.hash=t.currentHash,t.hashTimer=null},300)))},"beforeClose.fb":function(e,t,n){n&&!1!==n.opts.hash&&(clearTimeout(t.hashTimer),t.currentHash&&t.hasCreatedHistory?r.history.back():t.currentHash&&("replaceState"in r.history?r.history.replaceState({},a.title,r.location.pathname+r.location.search+(t.origHash||"")):r.location.hash=t.origHash),t.currentHash=null)}}),i(r).on("hashchange.fb",function(){var e=s(),o=null;i.each(i(".fancybox-container").get().reverse(),function(e,t){var n=i(t).data("FancyBox");if(n&&n.currentHash)return o=n,!1}),o?o.currentHash===e.gallery+"-"+e.index||1===e.index&&o.currentHash==e.gallery||(o.currentHash=null,o.close()):""!==e.gallery&&t(e)}),setTimeout(function(){i.fancybox.getInstance()||t(s())},50))})}(window,document,jQuery),function(e,t){"use strict";var i=(new Date).getTime();t(e).on({"onInit.fb":function(e,o,t){o.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(e){var t=o.current,n=(new Date).getTime();o.group.length<2||!1===t.opts.wheel||"auto"===t.opts.wheel&&"image"!==t.type||(e.preventDefault(),e.stopPropagation(),t.$slide.hasClass("fancybox-animated")||(e=e.originalEvent||e,n-i<250||(i=n,o[(-e.deltaY||-e.deltaX||e.wheelDelta||-e.detail)<0?"next":"previous"]())))})}})}(document,jQuery),function(e,t,n,o){"function"==typeof define&&define.amd?define(function(){return e.fullpage=o(t,n),e.fullpage}):"object"==typeof exports?module.exports=o(t,n):t.fullpage=o(t,n)}(this,window,document,function(Nt,Rt){"use strict";var zt="fullpage-wrapper",qt="."+zt,Ft="fp-responsive",Bt="fp-notransition",Wt="fp-destroyed",_t="fp-enabled",Xt="fp-viewing",Yt="active",Vt="."+Yt,Ut="fp-completely",Zt="fp-section",Gt="."+Zt,Qt=Gt+Vt,Kt="fp-tableCell",Jt="."+Kt,en="#fp-nav",tn="fp-slide",nn="."+tn,on=nn+Vt,rn="fp-slides",an="."+rn,sn="fp-slidesContainer",ln="."+sn,cn="fp-table",un="fp-slidesNav",dn="."+un,fn=dn+" a",pn=".fp-controlArrow",hn=pn+".fp-prev",gn=pn+".fp-next";function vn(e,t){Nt.console&&Nt.console[e]&&Nt.console[e]("fullPage: "+t)}function mn(e,t){return(t=1<arguments.length?t:Rt)?t.querySelectorAll(e):null}function yn(e){e=e||{};for(var t=1,n=arguments.length;t<n;++t){var o=arguments[t];if(o)for(var i in o)o.hasOwnProperty(i)&&("[object Object]"!==Object.prototype.toString.call(o[i])?e[i]=o[i]:e[i]=yn(e[i],o[i]))}return e}function bn(e,t){return null!=e&&(e.classList?e.classList.contains(t):new RegExp("(^| )"+t+"( |$)","gi").test(e.className))}function xn(){return"innerHeight"in Nt?Nt.innerHeight:Rt.documentElement.offsetHeight}function wn(){return Nt.innerWidth}function Sn(e,t){var n;for(n in e=a(e),t)if(t.hasOwnProperty(n)&&null!==n)for(var o=0;o<e.length;o++)e[o].style[n]=t[n];return e}function n(e,t,n){for(var o=e[n];o&&!Xn(o,t);)o=o[n];return o}function Tn(e,t){return n(e,t,"previousElementSibling")}function Cn(e,t){return n(e,t,"nextElementSibling")}function En(e){return e.previousElementSibling}function kn(e){return e.nextElementSibling}function An(e){return e[e.length-1]}function Ln(e,t){e=r(e)?e[0]:e;for(var n=null!=t?mn(t,e.parentNode):e.parentNode.childNodes,o=0,i=0;i<n.length;i++){if(n[i]==e)return o;1==n[i].nodeType&&o++}return-1}function a(e){return r(e)?e:[e]}function Pn(e){e=a(e);for(var t=0;t<e.length;t++)e[t].style.display="none";return e}function $n(e){e=a(e);for(var t=0;t<e.length;t++)e[t].style.display="block";return e}function r(e){return"[object Array]"===Object.prototype.toString.call(e)||"[object NodeList]"===Object.prototype.toString.call(e)}function Mn(e,t){e=a(e);for(var n=0;n<e.length;n++){var o=e[n];o.classList?o.classList.add(t):o.className+=" "+t}return e}function On(e,t){e=a(e);for(var n=t.split(" "),o=0;o<n.length;o++){t=n[o];for(var i=0;i<e.length;i++){var r=e[i];r.classList?r.classList.remove(t):r.className=r.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}}return e}function jn(e,t){t.appendChild(e)}function o(e,t,n){var o;t=t||Rt.createElement("div");for(var i=0;i<e.length;i++){var r=e[i];(!n||i)&&n||(o=t.cloneNode(!0),r.parentNode.insertBefore(o,r)),o.appendChild(r)}return e}function Dn(e,t){o(e,t,!0)}function Hn(e,t){for("string"==typeof t&&(t=Vn(t)),e.appendChild(t);e.firstChild!==t;)t.appendChild(e.firstChild)}function In(e){for(var t=Rt.createDocumentFragment();e.firstChild;)t.appendChild(e.firstChild);e.parentNode.replaceChild(t,e)}function Nn(e,t){return e&&1===e.nodeType?Xn(e,t)?e:Nn(e.parentNode,t):null}function Rn(e,t){i(e,e.nextSibling,t)}function zn(e,t){i(e,e,t)}function i(e,t,n){r(n)||("string"==typeof n&&(n=Vn(n)),n=[n]);for(var o=0;o<n.length;o++)e.parentNode.insertBefore(n[o],t)}function qn(){var e=Rt.documentElement;return(Nt.pageYOffset||e.scrollTop)-(e.clientTop||0)}function Fn(t){return Array.prototype.filter.call(t.parentNode.children,function(e){return e!==t})}function Bn(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function Wn(e){if("function"==typeof e)return!0;var t=Object.prototype.toString(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}function _n(e,t,n){var o;n=void 0===n?{}:n,"function"==typeof Nt.CustomEvent?o=new CustomEvent(t,{detail:n}):(o=Rt.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,n),e.dispatchEvent(o)}function Xn(e,t){return(e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector).call(e,t)}function Yn(e,t){if("boolean"==typeof t)for(var n=0;n<e.length;n++)e[n].style.display=t?"block":"none";return e}function Vn(e){var t=Rt.createElement("div");return t.innerHTML=e.trim(),t.firstChild}function Un(e){e=a(e);for(var t=0;t<e.length;t++){var n=e[t];n&&n.parentElement&&n.parentNode.removeChild(n)}}function s(e,t,n){for(var o=e[n],i=[];o;)!Xn(o,t)&&null!=t||i.push(o),o=o[n];return i}function Zn(e,t){return s(e,t,"nextElementSibling")}function Gn(e,t){return s(e,t,"previousElementSibling")}return Nt.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(e,t){t=t||Nt;for(var n=0;n<this.length;n++)e.call(t,this[n],n,this)}),Nt.fp_utils={$:mn,deepExtend:yn,hasClass:bn,getWindowHeight:xn,css:Sn,until:n,prevUntil:Tn,nextUntil:Cn,prev:En,next:kn,last:An,index:Ln,getList:a,hide:Pn,show:$n,isArrayOrList:r,addClass:Mn,removeClass:On,appendTo:jn,wrap:o,wrapAll:Dn,wrapInner:Hn,unwrap:In,closest:Nn,after:Rn,before:zn,insertBefore:i,getScrollTop:qn,siblings:Fn,preventDefault:Bn,isFunction:Wn,trigger:_n,matches:Xn,toggle:Yn,createElementFromHTML:Vn,remove:Un,filter:function(e,t){Array.prototype.filter.call(e,t)},untilAll:s,nextAll:Zn,prevAll:Gn,showError:vn},function(e,x){var t,n,o,i,r=x&&new RegExp("([\\d\\w]{8}-){3}[\\d\\w]{8}|^(?=.*?[A-Y])(?=.*?[a-y])(?=.*?[0-8])(?=.*?[#?!@$%^&*-]).{8,}$").test(x.licenseKey)||-1<Rt.domain.indexOf("alvarotrigo.com"),a=mn("html, body"),c=mn("html")[0],w=mn("body")[0];if(!bn(c,_t)){var y={};x=yn({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowReset:!1,scrollOverflowHandler:Nt.fp_scrolloverflow?Nt.fp_scrolloverflow.iscrollHandler:null,scrollOverflowOptions:null,touchSensitivity:5,touchWrapper:"string"==typeof e?mn(e)[0]:e,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},cards:!1,cardsOptions:{perspective:100,fadeContent:!0,fadeBackground:!0},sectionSelector:".section",slideSelector:".slide",v2compatible:!1,afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},x);var S,s,h,u,d=!1,l=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),f="ontouchstart"in Nt||0<navigator.msMaxTouchPoints||navigator.maxTouchPoints,p="string"==typeof e?mn(e)[0]:e,T=xn(),g=wn(),C=!1,v=!0,E=!0,m=[],b={m:{up:!0,down:!0,left:!0,right:!0}};b.k=yn({},b.m);var k,A,L,P,$,M,O,j,D,H=Nt.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"},I={touchmove:"ontouchmove"in Nt?"touchmove":H.move,touchstart:"ontouchstart"in Nt?"touchstart":H.down},N='a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]',R=!1;try{var z=Object.defineProperty({},"passive",{get:function(){R=!0}});Nt.addEventListener("testPassive",null,z),Nt.removeEventListener("testPassive",null,z)}catch(e){}var q,F,B,W=yn({},x),_=!1,X=!0,Y=["parallax","scrollOverflowReset","dragAndMove","offsetSections","fadingEffect","responsiveSlides","continuousHorizontal","interlockedSlides","scrollHorizontally","resetSliders","cards"];Mt(),Nt.fp_easings=yn(Nt.fp_easings,{easeInOutCubic:function(e,t,n,o){return(e/=o/2)<1?n/2*e*e*e+t:n/2*((e-=2)*e*e+2)+t}}),p&&(y.version="3.0.8",y.setAutoScrolling=oe,y.setRecordHistory=ie,y.setScrollingSpeed=re,y.setFitToSection=ae,y.setLockAnchors=function(e){x.lockAnchors=e},y.setMouseWheelScrolling=se,y.setAllowScrolling=le,y.setKeyboardScrolling=ue,y.moveSectionUp=de,y.moveSectionDown=fe,y.silentMoveTo=pe,y.moveTo=he,y.moveSlideRight=ge,y.moveSlideLeft=ve,y.fitToSection=Ae,y.reBuild=me,y.setResponsive=be,y.getFullpageData=function(){return x},y.destroy=function(e){oe(!1,"internal"),le(!0),ce(!1),ue(!1),Mn(p,Wt),[$,P,A,M,O,D,L,B].forEach(function(e){clearTimeout(e)}),Nt.removeEventListener("scroll",ke),Nt.removeEventListener("hashchange",Ke),Nt.removeEventListener("resize",lt),Rt.removeEventListener("keydown",et),Rt.removeEventListener("keyup",tt),["click","touchstart"].forEach(function(e){Rt.removeEventListener(e,xe)}),["mouseenter","touchstart","mouseleave","touchend"].forEach(function(e){Rt.removeEventListener(e,Se,!0)}),e&&(At(0),mn("img[data-src], source[data-src], audio[data-src], iframe[data-src]",p).forEach(function(e){We(e,"src")}),mn("img[data-srcset]").forEach(function(e){We(e,"srcset")}),Un(mn(en+", "+dn+", "+pn)),Sn(mn(Gt),{height:"","background-color":"",padding:""}),Sn(mn(nn),{width:""}),Sn(p,{height:"",position:"","-ms-touch-action":"","touch-action":""}),Sn(a,{overflow:"",height:""}),On(c,_t),On(w,Ft),w.className.split(/\s+/).forEach(function(e){0===e.indexOf(Xt)&&On(w,e)}),mn(Gt+", "+nn).forEach(function(e){x.scrollOverflowHandler&&x.scrollOverflow&&x.scrollOverflowHandler.remove(e),On(e,cn+" "+Yt+" "+Ut),e.getAttribute("data-fp-styles")&&e.setAttribute("style",e.getAttribute("data-fp-styles")),bn(e,Zt)&&!_&&e.removeAttribute("data-anchor")}),ft(p),[Jt,ln,an].forEach(function(e){mn(e,p).forEach(function(e){In(e)})}),Sn(p,{"-webkit-transition":"none",transition:"none"}),Nt.scrollTo(0,0),[Zt,tn,sn].forEach(function(e){On(mn("."+e),e)}))},y.getActiveSection=function(){return new Ht(mn(Qt)[0])},y.getActiveSlide=function(){return qe(mn(on,mn(Qt)[0])[0])},y.test={top:"0px",translate3d:"translate3d(0px, 0px, 0px)",translate3dH:function(){for(var e=[],t=0;t<mn(x.sectionSelector,p).length;t++)e.push("translate3d(0px, 0px, 0px)");return e}(),left:function(){for(var e=[],t=0;t<mn(x.sectionSelector,p).length;t++)e.push(0);return e}(),options:x,setAutoScrolling:oe},y.shared={afterRenderActions:Ee,isNormalScrollElement:!1},Nt.fullpage_api=y,x.$&&Object.keys(y).forEach(function(e){x.$.fn.fullpage[e]=y[e]}),x.css3&&(x.css3=function(){var e,t=Rt.createElement("p"),n={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var o in t.style.display="block",Rt.body.insertBefore(t,null),n)void 0!==t.style[o]&&(t.style[o]="translate3d(1px,1px,1px)",e=Nt.getComputedStyle(t).getPropertyValue(n[o]));return Rt.body.removeChild(t),void 0!==e&&0<e.length&&"none"!==e}()),x.scrollBar=x.scrollBar||x.hybrid,x.anchors.length||(t="[data-anchor]",(n=mn(x.sectionSelector.split(",").join(t+",")+t,p)).length&&n.length===mn(Gt).length&&(_=!0,n.forEach(function(e){x.anchors.push(e.getAttribute("data-anchor").toString())}))),x.navigationTooltips.length||(o="[data-tooltip]",(i=mn(x.sectionSelector.split(",").join(o+",")+o,p)).length&&i.forEach(function(e){x.navigationTooltips.push(e.getAttribute("data-tooltip").toString())})),function(){Sn(p,{height:"100%",position:"relative"}),Mn(p,zt),Mn(c,_t),T=xn(),On(p,Wt),Mn(mn(x.sectionSelector,p),Zt),Mn(mn(x.slideSelector,p),tn);for(var e,t,n,o=mn(Gt),i=0;i<o.length;i++){var r=i,a=o[i],s=mn(nn,a),l=s.length;a.setAttribute("data-fp-styles",a.getAttribute("style")),t=a,(n=r)||null!=mn(Qt)[0]||Mn(t,Yt),u=mn(Qt)[0],Sn(t,{height:T+"px"}),x.paddingTop&&Sn(t,{"padding-top":x.paddingTop}),x.paddingBottom&&Sn(t,{"padding-bottom":x.paddingBottom}),void 0!==x.sectionsColor[n]&&Sn(t,{"background-color":x.sectionsColor[n]}),void 0!==x.anchors[n]&&t.setAttribute("data-anchor",x.anchors[n]),e=r,void 0!==x.anchors[e]&&bn(a,Yt)&&pt(x.anchors[e],e),x.menu&&x.css3&&null!=Nn(mn(x.menu)[0],qt)&&mn(x.menu).forEach(function(e){w.appendChild(e)}),0<l?function(e,t,n){var o=100*n,i=100/n,r=Rt.createElement("div");r.className=rn,Dn(t,r);var a,s,l=Rt.createElement("div");l.className=sn,Dn(t,l),Sn(mn(ln,e),{width:o+"%"}),1<n&&(x.controlArrows&&(a=e,s=[Vn('<div class="fp-controlArrow fp-prev"></div>'),Vn('<div class="fp-controlArrow fp-next"></div>')],Rn(mn(an,a)[0],s),"#fff"!==x.controlArrowColor&&(Sn(mn(gn,a),{"border-color":"transparent transparent transparent "+x.controlArrowColor}),Sn(mn(hn,a),{"border-color":"transparent "+x.controlArrowColor+" transparent transparent"})),x.loopHorizontal||Pn(mn(hn,a))),x.slidesNavigation&&function(e,t){jn(Vn('<div class="'+un+'"><ul></ul></div>'),e);var n=mn(dn,e)[0];Mn(n,"fp-"+x.slidesNavPosition);for(var o=0;o<t;o++){jn(Vn('<li><a href="#"><span class="fp-sr-only">'+Ce(o,"Slide",mn(nn,e)[o])+"</span><span></span></a></li>"),mn("ul",n)[0])}Sn(n,{"margin-left":"-"+n.innerWidth/2+"px"}),Mn(mn("a",mn("li",n)[0]),Yt)}(e,n)),t.forEach(function(e){Sn(e,{width:i+"%"}),x.verticalCentered&&gt(e)});var c=mn(on,e)[0];null!=c&&(0!==Ln(mn(Qt),Gt)||0===Ln(mn(Qt),Gt)&&0!==Ln(c))?kt(c,"internal"):Mn(t[0],Yt)}(a,s,l):x.verticalCentered&&gt(a)}x.fixedElements&&x.css3&&mn(x.fixedElements).forEach(function(e){w.appendChild(e)}),x.navigation&&function(){var e=Rt.createElement("div");e.setAttribute("id","fp-nav");var t=Rt.createElement("ul");e.appendChild(t),jn(e,w);var n=mn(en)[0];Mn(n,"fp-"+x.navigationPosition),x.showActiveTooltip&&Mn(n,"fp-show-active");for(var o="",i=0;i<mn(Gt).length;i++){var r="";x.anchors.length&&(r=x.anchors[i]),o+='<li><a href="#'+r+'"><span class="fp-sr-only">'+Ce(i,"Section")+"</span><span></span></a>";var a=x.navigationTooltips[i];void 0!==a&&""!==a&&(o+='<div class="fp-tooltip fp-'+x.navigationPosition+'">'+a+"</div>"),o+="</li>"}mn("ul",n)[0].innerHTML=o,Mn(mn("a",mn("li",mn(en)[0])[Ln(mn(Qt)[0],Gt)]),Yt)}(),mn('iframe[src*="youtube.com/embed/"]',p).forEach(function(e){var t,n=(t=e).getAttribute("src");t.setAttribute("src",n+(/\?/.test(n)?"&":"?")+"enablejsapi=1")}),x.scrollOverflow&&(k=x.scrollOverflowHandler.init(x))}(),le(!0),ce(!0),oe(x.autoScrolling,"internal"),ut(),Ct(),"complete"===Rt.readyState&&Qe(),Nt.addEventListener("load",Qe),x.scrollOverflow||Ee(),function(){for(var e=1;e<4;e++)D=setTimeout(Te,350*e)}(),Nt.addEventListener("scroll",ke),Nt.addEventListener("hashchange",Ke),Nt.addEventListener("focus",function(){v=!0}),Nt.addEventListener("blur",function(){h=v=!1}),Nt.addEventListener("resize",lt),Rt.addEventListener("keydown",et),Rt.addEventListener("keyup",tt),["click","touchstart"].forEach(function(e){Rt.addEventListener(e,xe)}),x.normalScrollElements&&(["mouseenter","touchstart"].forEach(function(e){we(e,!1)}),["mouseleave","touchend"].forEach(function(e){we(e,!0)})));var V=!1,U=0,Z=0,G=0,Q=0,K=0,J=(new Date).getTime(),ee=0,te=0,ne=T;return y}function oe(e,t){e||At(0),$t("autoScrolling",e,t);var n,o=mn(Qt)[0];x.autoScrolling&&!x.scrollBar?(Sn(a,{overflow:"hidden",height:"100%"}),ie(W.recordHistory,"internal"),Sn(p,{"-ms-touch-action":"none","touch-action":"none"}),null!=o&&At(o.offsetTop)):(Sn(a,{overflow:"visible",height:"initial"}),ie(!!x.autoScrolling&&W.recordHistory,"internal"),Sn(p,{"-ms-touch-action":"","touch-action":""}),null!=o&&(n=Fe(o.offsetTop)).element.scrollTo(0,n.options))}function ie(e,t){$t("recordHistory",e,t)}function re(e,t){$t("scrollingSpeed",e,t)}function ae(e,t){$t("fitToSection",e,t)}function se(e){e?(function(){var e,t="";Nt.addEventListener?e="addEventListener":(e="attachEvent",t="on");var n="onwheel"in Rt.createElement("div")?"wheel":void 0!==Rt.onmousewheel?"mousewheel":"DOMMouseScroll",o=!!R&&{passive:!1};"DOMMouseScroll"==n?Rt[e](t+"MozMousePixelScroll",De,o):Rt[e](t+n,De,o)}(),p.addEventListener("mousedown",nt),p.addEventListener("mouseup",ot)):(Rt.addEventListener?(Rt.removeEventListener("mousewheel",De,!1),Rt.removeEventListener("wheel",De,!1),Rt.removeEventListener("MozMousePixelScroll",De,!1)):Rt.detachEvent("onmousewheel",De),p.removeEventListener("mousedown",nt),p.removeEventListener("mouseup",ot))}function le(t,e){void 0!==e?(e=e.replace(/ /g,"").split(",")).forEach(function(e){Pt(t,e,"m")}):Pt(t,"all","m")}function ce(e){var t,n;e?(se(!0),(l||f)&&(x.autoScrolling&&(w.removeEventListener(I.touchmove,Pe,{passive:!1}),w.addEventListener(I.touchmove,Pe,{passive:!1})),(n=x.touchWrapper).removeEventListener(I.touchstart,Oe),n.removeEventListener(I.touchmove,$e,{passive:!1}),n.addEventListener(I.touchstart,Oe),n.addEventListener(I.touchmove,$e,{passive:!1}))):(se(!1),(l||f)&&(x.autoScrolling&&(w.removeEventListener(I.touchmove,$e,{passive:!1}),w.removeEventListener(I.touchmove,Pe,{passive:!1})),(t=x.touchWrapper).removeEventListener(I.touchstart,Oe),t.removeEventListener(I.touchmove,$e,{passive:!1})))}function ue(t,e){void 0!==e?(e=e.replace(/ /g,"").split(",")).forEach(function(e){Pt(t,e,"k")}):(Pt(t,"all","k"),x.keyboardScrolling=t)}function de(){var e=Tn(mn(Qt)[0],Gt);e||!x.loopTop&&!x.continuousVertical||(e=An(mn(Gt))),null!=e&&Ne(e,null,!0)}function fe(){var e=Cn(mn(Qt)[0],Gt);e||!x.loopBottom&&!x.continuousVertical||(e=mn(Gt)[0]),null!=e&&Ne(e,null,!1)}function pe(e,t){re(0,"internal"),he(e,t),re(W.scrollingSpeed,"internal")}function he(e,t){var n=yt(e);void 0!==t?bt(e,t):null!=n&&Ne(n)}function ge(e){He("right",e)}function ve(e){He("left",e)}function me(e){if(!bn(p,Wt)){C=!0,T=xn(),g=wn();for(var t=mn(Gt),n=0;n<t.length;++n){var o=t[n],i=mn(an,o)[0],r=mn(nn,o);x.verticalCentered&&Sn(mn(Jt,o),{height:vt(o)+"px"}),Sn(o,{height:T+"px"}),1<r.length&&at(i,mn(on,i)[0])}x.scrollOverflow&&k.createScrollBarForAll();var a=Ln(mn(Qt)[0],Gt);a&&pe(a+1),C=!1,Wn(x.afterResize)&&e&&x.afterResize.call(p,Nt.innerWidth,Nt.innerHeight),Wn(x.afterReBuild)&&!e&&x.afterReBuild.call(p)}}function ye(){return bn(w,Ft)}function be(e){var t=ye();e?t||(oe(!1,"internal"),ae(!1,"internal"),Pn(mn(en)),Mn(w,Ft),Wn(x.afterResponsive)&&x.afterResponsive.call(p,e),x.scrollOverflow&&k.createScrollBarForAll()):t&&(oe(W.autoScrolling,"internal"),ae(W.autoScrolling,"internal"),$n(mn(en)),On(w,Ft),Wn(x.afterResponsive)&&x.afterResponsive.call(p,e))}function xe(e){var t=e.target;t&&Nn(t,en+" a")?function(e){Bn(e);var t=Ln(Nn(this,en+" li"));Ne(mn(Gt)[t])}.call(t,e):Xn(t,".fp-tooltip")?function(){_n(En(this),"click")}.call(t):Xn(t,pn)?function(){var e=Nn(this,Gt);bn(this,"fp-prev")?b.m.left&&ve(e):b.m.right&&ge(e)}.call(t,e):Xn(t,fn)||null!=Nn(t,fn)?function(e){Bn(e);var t=mn(an,Nn(this,Gt))[0];at(t,mn(nn,t)[Ln(Nn(this,"li"))])}.call(t,e):Nn(t,x.menu+" [data-menuanchor]")&&function(e){!mn(x.menu)[0]||!x.lockAnchors&&x.anchors.length||(Bn(e),he(this.getAttribute("data-menuanchor")))}.call(t,e)}function we(e,t){Rt["fp_"+e]=t,Rt.addEventListener(e,Se,!0)}function Se(e){var t=e.type,o=!1,i=x.scrollOverflow,r="mouseleave"===t?e.toElement||e.relatedTarget:e.target;if(r==Rt||!r)return ce(!0),void(i&&x.scrollOverflowHandler.setIscroll(r,!0));"touchend"===t&&(X=!1,setTimeout(function(){X=!0},800)),"mouseenter"===t&&!X||(x.normalScrollElements.split(",").forEach(function(e){var t,n;o||(t=Xn(r,e),n=Nn(r,e),(t||n)&&(y.shared.isNormalScrollElement||(ce(!1),i&&x.scrollOverflowHandler.setIscroll(r,!1)),y.shared.isNormalScrollElement=!0,o=!0))}),!o&&y.shared.isNormalScrollElement&&(ce(!0),i&&x.scrollOverflowHandler.setIscroll(r,!0),y.shared.isNormalScrollElement=!1))}function Te(){var e=xn(),t=wn();T===e&&g===t||(T=e,g=t,me(!0))}function Ce(e,t,n){var o="Section"===t?x.anchors[e]:n.getAttribute("data-anchor");return x.navigationTooltips[e]||o||t+" "+(e+1)}function Ee(){var e,t,n=mn(Qt)[0];Mn(n,Ut),Xe(n),_e(),Ve(n),x.scrollOverflow&&x.scrollOverflowHandler.afterLoad(),t=yt((e=Je()).section),e.section&&t&&(void 0===t||Ln(t)!==Ln(u))||!Wn(x.afterLoad)||Re("afterLoad",{activeSection:n,element:n,direction:null,anchorLink:n.getAttribute("data-anchor"),sectionIndex:Ln(n,Gt)}),Wn(x.afterRender)&&Re("afterRender")}function ke(){var e;if(!C&&(!x.autoScrolling||x.scrollBar)){var t=qn(),n=U<t?"down":"up",o=0,i=(ee=U=t)+xn()/2,r=w.offsetHeight-xn()===t,a=mn(Gt);if(r)o=a.length-1;else if(t)for(var s=0;s<a.length;++s)a[s].offsetTop<=i&&(o=s);else o=0;var l,c,u,d,f,p,h,g,v,m,y=n,b=(m=mn(Qt)[0].offsetTop)+xn();("up"!=y?m<=qn():b>=qn()+xn())&&(bn(mn(Qt)[0],Ut)||(Mn(mn(Qt)[0],Ut),On(Fn(mn(Qt)[0]),Ut))),bn(e=a[o],Yt)||(V=!0,d=Ln(u=mn(Qt)[0],Gt)+1,f=ht(e),p=e.getAttribute("data-anchor"),v={activeSection:u,sectionIndex:(h=Ln(e,Gt)+1)-1,anchorLink:p,element:e,leavingSection:d,direction:f},(g=mn(on,e)[0])&&(c=g.getAttribute("data-anchor"),l=Ln(g)),E&&(Mn(e,Yt),On(Fn(e),Yt),Wn(x.onLeave)&&Re("onLeave",v),Wn(x.afterLoad)&&Re("afterLoad",v),Ze(u),Xe(e),Ve(e),pt(p,h-1),x.anchors.length&&(S=p),wt(l,c,p)),clearTimeout(M),M=setTimeout(function(){V=!1},100)),x.fitToSection&&(clearTimeout(O),O=setTimeout(function(){x.fitToSection&&mn(Qt)[0].offsetHeight<=T&&Ae()},x.fitToSectionDelay))}}function Ae(){E&&(C=!0,Ne(mn(Qt)[0]),C=!1)}function Le(e){if(b.m[e]){var t="down"===e?fe:de;if(x.scrollOverflow){var n=x.scrollOverflowHandler.scrollable(mn(Qt)[0]),o="down"===e?"bottom":"top";if(null!=n){if(!x.scrollOverflowHandler.isScrolled(o,n))return 1;t()}else t()}else t()}}function Pe(e){x.autoScrolling&&Me(e)&&b.m.up&&Bn(e)}function $e(e){var t,n=Nn(e.target,Gt)||mn(Qt)[0];Me(e)&&(x.autoScrolling&&Bn(e),t=Et(e),Q=t.y,K=t.x,mn(an,n).length&&Math.abs(G-K)>Math.abs(Z-Q)?!d&&Math.abs(G-K)>wn()/100*x.touchSensitivity&&(K<G?b.m.right&&ge(n):b.m.left&&ve(n)):x.autoScrolling&&E&&Math.abs(Z-Q)>Nt.innerHeight/100*x.touchSensitivity&&(Q<Z?Le("down"):Z<Q&&Le("up")))}function Me(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function Oe(e){var t;x.fitToSection&&(q=!1),Me(e)&&(t=Et(e),Z=t.y,G=t.x)}function je(e,t){for(var n=0,o=e.slice(Math.max(e.length-t,1)),i=0;i<o.length;i++)n+=o[i];return Math.ceil(n/t)}function De(e){var t=(new Date).getTime(),n=bn(mn(".fp-completely")[0],"fp-normal-scroll");if(!b.m.down&&!b.m.up)return Bn(e),!1;if(x.autoScrolling&&!h&&!n){var o=(e=e||Nt.event).wheelDelta||-e.deltaY||-e.detail,i=Math.max(-1,Math.min(1,o)),r=void 0!==e.wheelDeltaX||void 0!==e.deltaX,a=Math.abs(e.wheelDeltaX)<Math.abs(e.wheelDelta)||Math.abs(e.deltaX)<Math.abs(e.deltaY)||!r;149<m.length&&m.shift(),m.push(Math.abs(o)),x.scrollBar&&Bn(e);var s,l=t-J;return J=t,200<l&&(m=[]),E&&(s=je(m,10),je(m,70)<=s&&a&&Le(i<0?"down":"up")),!1}x.fitToSection&&(q=!1)}function He(e,t){var n=null==t?mn(Qt)[0]:t,o=mn(an,n)[0];if(!(null==o||d||mn(nn,o).length<2)){var i=mn(on,o)[0],r=null;if(null==(r=("left"===e?Tn:Cn)(i,nn))){if(!x.loopHorizontal)return;var a=Fn(i),r="left"===e?a[a.length-1]:a[0]}d=!y.test.isTesting,at(o,r,e)}}function Ie(){for(var e=mn(on),t=0;t<e.length;t++)kt(e[t],"internal")}function Ne(e,t,n){if(null!=e){var o,i,r,a,s,l,c,u,d={element:e,callback:t,isMovementUp:n,dtop:(o=e.offsetHeight,i=e.offsetTop,a=ee<(r=i),s=r-T+o,l=x.bigSectionsDestination,T<o?(a||l)&&"bottom"!==l||(r=s):(a||C&&null==kn(e))&&(r=s),ee=r),yMovement:ht(e),anchorLink:e.getAttribute("data-anchor"),sectionIndex:Ln(e,Gt),activeSlide:mn(on,e)[0],activeSection:mn(Qt)[0],leavingSection:Ln(mn(Qt),Gt)+1,localIsResizing:C};if(!(d.activeSection==e&&!C||x.scrollBar&&qn()===d.dtop&&!bn(e,"fp-auto-height"))){if(null!=d.activeSlide&&(c=d.activeSlide.getAttribute("data-anchor"),u=Ln(d.activeSlide)),!d.localIsResizing){var f=d.yMovement;if(void 0!==n&&(f=n?"up":"down"),d.direction=f,Wn(x.onLeave)&&!1===Re("onLeave",d))return}x.autoScrolling&&x.continuousVertical&&void 0!==d.isMovementUp&&(!d.isMovementUp&&"up"==d.yMovement||d.isMovementUp&&"down"==d.yMovement)&&((m=d).isMovementUp?zn(mn(Qt)[0],Zn(m.activeSection,Gt)):Rn(mn(Qt)[0],Gn(m.activeSection,Gt).reverse()),At(mn(Qt)[0].offsetTop),Ie(),m.wrapAroundElements=m.activeSection,m.dtop=m.element.offsetTop,m.yMovement=ht(m.element),d=m),d.localIsResizing||Ze(d.activeSection),x.scrollOverflow&&x.scrollOverflowHandler.beforeLeave(),Mn(e,Yt),On(Fn(e),Yt),Xe(e),x.scrollOverflow&&x.scrollOverflowHandler.onLeave(),E=y.test.isTesting,wt(u,c,d.anchorLink,d.sectionIndex),p=d,g=x.scrollingSpeed<700,v=g?700:x.scrollingSpeed,x.css3&&x.autoScrolling&&!x.scrollBar?(mt("translate3d(0px, -"+Math.round(p.dtop)+"px, 0px)",!0),x.scrollingSpeed?(clearTimeout(P),P=setTimeout(function(){Be(p),E=!g},x.scrollingSpeed)):Be(p)):(h=Fe(p.dtop),y.test.top=-p.dtop+"px",Ot(h.element,h.options,x.scrollingSpeed,function(){x.scrollBar?setTimeout(function(){Be(p)},30):(Be(p),E=!g)})),g&&(clearTimeout(B),B=setTimeout(function(){E=!0},v)),S=d.anchorLink,pt(d.anchorLink,d.sectionIndex)}}var p,h,g,v,m}function Re(e,t){var n,o,i,r=(o=t,(i=x.v2compatible?{afterRender:function(){return[p]},onLeave:function(){return[o.activeSection,o.leavingSection,o.sectionIndex+1,o.direction]},afterLoad:function(){return[o.element,o.anchorLink,o.sectionIndex+1]},afterSlideLoad:function(){return[o.destiny,o.anchorLink,o.sectionIndex+1,o.slideAnchor,o.slideIndex]},onSlideLeave:function(){return[o.prevSlide,o.anchorLink,o.sectionIndex+1,o.prevSlideIndex,o.direction,o.slideIndex]}}:{afterRender:function(){return{section:ze(mn(Qt)[0]),slide:qe(mn(on,mn(Qt)[0])[0])}},onLeave:function(){return{origin:ze(o.activeSection),destination:ze(o.element),direction:o.direction}},afterLoad:function(){return i.onLeave()},afterSlideLoad:function(){return{section:ze(o.section),origin:qe(o.prevSlide),destination:qe(o.destiny),direction:o.direction}},onSlideLeave:function(){return i.afterSlideLoad()}})[e]());if(x.v2compatible){if(!1===x[e].apply(r[0],r.slice(1)))return!1}else if(_n(p,e,r),!1===x[e].apply(r[Object.keys(r)[0]],(n=r,Object.keys(n).map(function(e){return n[e]}))))return!1;return!0}function ze(e){return e?new Ht(e):null}function qe(e){return e?new It(e):null}function Fe(e){var t={};return x.autoScrolling&&!x.scrollBar?(t.options=-e,t.element=mn(qt)[0]):(t.options=e,t.element=Nt),t}function Be(e){var t;null!=(t=e).wrapAroundElements&&(t.isMovementUp?zn(mn(Gt)[0],t.wrapAroundElements):Rn(mn(Gt)[mn(Gt).length-1],t.wrapAroundElements),At(mn(Qt)[0].offsetTop),Ie()),Wn(x.afterLoad)&&!e.localIsResizing&&Re("afterLoad",e),x.scrollOverflow&&x.scrollOverflowHandler.afterLoad(),e.localIsResizing||Ve(e.element),Mn(e.element,Ut),On(Fn(e.element),Ut),_e(),E=!0,Wn(e.callback)&&e.callback()}function We(e,t){e.setAttribute(t,e.getAttribute("data-"+t)),e.removeAttribute("data-"+t)}function _e(){var e=mn(".fp-auto-height")[0]||ye()&&mn(".fp-auto-height-responsive")[0];x.lazyLoading&&e&&mn(Gt+":not("+Vt+")").forEach(function(e){var t=e.getBoundingClientRect(),n=t.top,o=t.bottom;(n+2<T&&0<n||2<o&&o<T)&&Xe(e)})}function Xe(o){x.lazyLoading&&mn("img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]",Ge(o)).forEach(function(n){var e;["src","srcset"].forEach(function(e){var t=n.getAttribute("data-"+e);null!=t&&t&&(We(n,e),n.addEventListener("load",function(){Ye(o)}))}),Xn(n,"source")&&(e=Nn(n,"video, audio"))&&(e.load(),e.onloadeddata=function(){Ye(o)})})}function Ye(e){x.scrollOverflow&&(clearTimeout(F),F=setTimeout(function(){bn(w,Ft)||k.createScrollBar(e)},200))}function Ve(e){var t=Ge(e);mn("video, audio",t).forEach(function(e){e.hasAttribute("data-autoplay")&&"function"==typeof e.play&&e.play()}),mn('iframe[src*="youtube.com/embed/"]',t).forEach(function(e){e.hasAttribute("data-autoplay")&&Ue(e),e.onload=function(){e.hasAttribute("data-autoplay")&&Ue(e)}})}function Ue(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function Ze(e){var t=Ge(e);mn("video, audio",t).forEach(function(e){e.hasAttribute("data-keepplaying")||"function"!=typeof e.pause||e.pause()}),mn('iframe[src*="youtube.com/embed/"]',t).forEach(function(e){/youtube\.com\/embed\//.test(e.getAttribute("src"))&&!e.hasAttribute("data-keepplaying")&&e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")})}function Ge(e){var t=mn(on,e);return t.length&&(e=t[0]),e}function Qe(){var e=Je(),t=e.section,n=e.slide;t&&(x.animateAnchor?bt:pe)(t,n)}function Ke(){var e,t,n,o,i;V||x.lockAnchors||(t=(e=Je()).section,n=e.slide,i=(o=void 0===S)&&void 0===n&&!d,t&&t.length&&(t&&t!==S&&!o||i||!d&&s!=n)&&bt(t,n))}function Je(){var e,t,n,o,i,r=Nt.location.hash;return r.length&&(t=r.replace("#","").split("/"),o=(n=-1<r.indexOf("#/"))?"/"+t[1]:decodeURIComponent(t[0]),(i=n?t[2]:t[1])&&i.length&&(e=decodeURIComponent(i))),{section:o,slide:e}}function et(e){clearTimeout(j);var t,n,o,i,r,a,s,l,c,u,d=Rt.activeElement,f=e.keyCode;function p(e){return Bn(e),u[0]?u[0].focus():null}9===f?(l=(t=e).shiftKey,c=Rt.activeElement,u=it(Ge(mn(Qt)[0])),n=t,i=(o=it(Rt)).indexOf(Rt.activeElement),a=qe(Nn(r=o[n.shiftKey?i-1:i+1],nn)),s=ze(Nn(r,Gt)),(a||s)&&(c?null==Nn(c,Qt+","+Qt+" "+on)&&(c=p(t)):p(t),(!l&&c==u[u.length-1]||l&&c==u[0])&&Bn(t))):Xn(d,"textarea")||Xn(d,"input")||Xn(d,"select")||"true"===d.getAttribute("contentEditable")||""===d.getAttribute("contentEditable")||!x.keyboardScrolling||!x.autoScrolling||(-1<[40,38,32,33,34].indexOf(f)&&Bn(e),h=e.ctrlKey,j=setTimeout(function(){!function(e){var t=e.shiftKey,n=Rt.activeElement,o=Xn(n,"video")||Xn(n,"audio");if(E||!([37,39].indexOf(e.keyCode)<0))switch(e.keyCode){case 38:case 33:b.k.up&&de();break;case 32:if(t&&b.k.up&&!o){de();break}case 40:case 34:b.k.down&&(32===e.keyCode&&o||fe());break;case 36:b.k.up&&he(1);break;case 35:b.k.down&&he(mn(Gt).length);break;case 37:b.k.left&&ve();break;case 39:b.k.right&&ge()}}(e)},150))}function tt(e){v&&(h=e.ctrlKey)}function nt(e){2==e.which&&(te=e.pageY,p.addEventListener("mousemove",rt))}function ot(e){2==e.which&&p.removeEventListener("mousemove",rt)}function it(e){return[].slice.call(mn(N,e)).filter(function(e){return"-1"!==e.getAttribute("tabindex")&&null!==e.offsetParent})}function rt(e){x.autoScrolling&&(E&&(e.pageY<te&&b.m.up?de():e.pageY>te&&b.m.down&&fe()),te=e.pageY)}function at(e,t,n){var o,i,r,a,s,l,c=Nn(e,Gt),u={slides:e,destiny:t,direction:n,destinyPos:{left:t.offsetLeft},slideIndex:Ln(t),section:c,sectionIndex:Ln(c,Gt),anchorLink:c.getAttribute("data-anchor"),slidesNav:mn(dn,c)[0],slideAnchor:Tt(t),prevSlide:mn(on,c)[0],prevSlideIndex:Ln(mn(on,c)[0]),localIsResizing:C};u.xMovement=(o=u.prevSlideIndex)==(i=u.slideIndex)?"none":i<o?"left":"right",u.direction=u.direction?u.direction:u.xMovement,u.localIsResizing||(E=!1),x.onSlideLeave&&!u.localIsResizing&&"none"!==u.xMovement&&Wn(x.onSlideLeave)&&!1===Re("onSlideLeave",u)?d=!1:(Mn(t,Yt),On(Fn(t),Yt),u.localIsResizing||(Ze(u.prevSlide),Xe(t)),!x.loopHorizontal&&x.controlArrows&&(Yn(mn(hn,c),0!==u.slideIndex),Yn(mn(gn,c),null!=kn(t))),bn(c,Yt)&&!u.localIsResizing&&wt(u.slideIndex,u.slideAnchor,u.anchorLink,u.sectionIndex),r=e,l=(a=u).destinyPos,x.css3?(s="translate3d(-"+Math.round(l.left)+"px, 0px, 0px)",y.test.translate3dH[a.sectionIndex]=s,Sn(dt(mn(ln,r)),Lt(s)),$=setTimeout(function(){st(a)},x.scrollingSpeed)):(y.test.left[a.sectionIndex]=Math.round(l.left),Ot(r,Math.round(l.left),x.scrollingSpeed,function(){st(a)})))}function st(e){var t=e.slidesNav,n=e.slideIndex;x.slidesNavigation&&null!=t&&(On(mn(Vt,t),Yt),Mn(mn("a",mn("li",t)[n]),Yt)),e.localIsResizing||(Wn(x.afterSlideLoad)&&Re("afterSlideLoad",e),E=!0,Ve(e.destiny)),d=!1}function lt(){C=!0,clearTimeout(A),A=setTimeout(function(){for(var e=0;e<4;e++)L=setTimeout(ct,200*e)},200)}function ct(){var e,t;ut(),l?Xn(e=Rt.activeElement,"textarea")||Xn(e,"input")||Xn(e,"select")||(t=xn(),Math.abs(t-ne)>20*Math.max(ne,t)/100&&(me(!0),ne=t)):Te()}function ut(){var e=x.responsive||x.responsiveWidth,t=x.responsiveHeight,n=e&&Nt.innerWidth<e,o=t&&Nt.innerHeight<t;e&&t?be(n||o):e?be(n):t&&be(o)}function dt(e){var t="all "+x.scrollingSpeed+"ms "+x.easingcss3;return On(e,Bt),Sn(e,{"-webkit-transition":t,transition:t})}function ft(e){return Mn(e,Bt)}function pt(e,t){var n,o,i=e;mn(x.menu).forEach(function(e){x.menu&&null!=e&&(On(mn(Vt,e),Yt),Mn(mn('[data-menuanchor="'+i+'"]',e),Yt))}),n=e,o=t,x.navigation&&null!=mn(en)[0]&&(On(mn(Vt,mn(en)[0]),Yt),Mn(n?mn('a[href="#'+n+'"]',mn(en)[0]):mn("a",mn("li",mn(en)[0])[o]),Yt))}function ht(e){var t=Ln(mn(Qt)[0],Gt),n=Ln(e,Gt);return t==n?"none":n<t?"up":"down"}function gt(e){var t;bn(e,cn)||((t=Rt.createElement("div")).className=Kt,t.style.height=vt(e)+"px",Mn(e,cn),Hn(e,t))}function vt(e){var t,n,o=T;return(x.paddingTop||x.paddingBottom)&&(bn(t=e,Zt)||(t=Nn(e,Gt)),n=parseInt(getComputedStyle(t)["padding-top"])+parseInt(getComputedStyle(t)["padding-bottom"]),o=T-n),o}function mt(e,t){(t?dt:ft)(p),Sn(p,Lt(e)),y.test.translate3d=e,setTimeout(function(){On(p,Bt)},10)}function yt(e){var t,n=mn(Gt+'[data-anchor="'+e+'"]',p)[0];return n||(t=void 0!==e?e-1:0,n=mn(Gt)[t]),n}function bt(e,t){var n,o,i,r,a=yt(e);null!=a&&(null==(i=mn(nn+'[data-anchor="'+(n=t)+'"]',o=a)[0])&&(n=void 0!==n?n:0,i=mn(nn,o)[n]),r=i,Tt(a)===S||bn(a,Yt)?xt(r):Ne(a,function(){xt(r)}))}function xt(e){null!=e&&at(Nn(e,an),e)}function wt(e,t,n){var o="";x.anchors.length&&!x.lockAnchors&&(e?(null!=n&&(o=n),null==t&&(t=e),St(o+"/"+(s=t))):(null!=e&&(s=t),St(n))),Ct()}function St(e){var t;x.recordHistory?location.hash=e:l||f?Nt.history.replaceState(void 0,void 0,"#"+e):(t=Nt.location.href.split("#")[0],Nt.location.replace(t+"#"+e))}function Tt(e){if(!e)return null;var t=e.getAttribute("data-anchor"),n=Ln(e);return null==t&&(t=n),t}function Ct(){var e=mn(Qt)[0],t=mn(on,e)[0],n=Tt(e),o=Tt(t),i=String(n);t&&(i=i+"-"+o),i=i.replace("/","-").replace("#","");var r=new RegExp("\\b\\s?"+Xt+"-[^\\s]+\\b","g");w.className=w.className.replace(r,""),Mn(w,Xt+"-"+i)}function Et(e){var t=[];return t.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,f&&Me(e)&&x.scrollBar&&void 0!==e.touches&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function kt(e,t){re(0,"internal"),void 0!==t&&(C=!0),at(Nn(e,an),e),void 0!==t&&(C=!1),re(W.scrollingSpeed,"internal")}function At(e){var t,n=Math.round(e);x.css3&&x.autoScrolling&&!x.scrollBar?mt("translate3d(0px, -"+n+"px, 0px)",!1):x.autoScrolling&&!x.scrollBar?(Sn(p,{top:-n+"px"}),y.test.top=-n+"px"):jt((t=Fe(n)).element,t.options)}function Lt(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function Pt(t,e,n){"all"!==e?b[n][e]=t:Object.keys(b[n]).forEach(function(e){b[n][e]=t})}function $t(e,t,n){x[e]=t,"internal"!==n&&(W[e]=t)}function Mt(){var e=x.licenseKey,t="font-size: 15px;background:yellow;";r?e&&e.length<20&&(console.warn("%c This website was made using fullPage.js slider. More info on the following website:",t),console.warn("%c https://alvarotrigo.com/fullPage/",t)):(vn("error","Fullpage.js version 3 has changed its license to GPLv3 and it requires a `licenseKey` option. Read about it here:"),vn("error","https://github.com/alvarotrigo/fullPage.js#options.")),bn(c,_t)?vn("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(x.continuousVertical&&(x.loopTop||x.loopBottom)&&(x.continuousVertical=!1,vn("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),!x.scrollOverflow||!x.scrollBar&&x.autoScrolling||vn("warn","Options scrollBar:true and autoScrolling:false are mutually exclusive with scrollOverflow:true. Sections with scrollOverflow might not work well in Firefox"),!x.continuousVertical||!x.scrollBar&&x.autoScrolling||(x.continuousVertical=!1,vn("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),x.scrollOverflow&&null==x.scrollOverflowHandler&&(x.scrollOverflow=!1,vn("error","The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.")),Y.forEach(function(e){x[e]&&vn("warn","fullpage.js extensions require fullpage.extensions.min.js file instead of the usual fullpage.js. Requested: "+e)}),x.anchors.forEach(function(t){var e,n=[].slice.call(mn("[name]")).filter(function(e){return e.getAttribute("name")&&e.getAttribute("name").toLowerCase()==t.toLowerCase()}),o=[].slice.call(mn("[id]")).filter(function(e){return e.getAttribute("id")&&e.getAttribute("id").toLowerCase()==t.toLowerCase()});(o.length||n.length)&&(vn("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE)."),e=o.length?"id":"name",(o.length||n.length)&&vn("error",'"'+t+'" is is being used by another element `'+e+"` property"))}))}function Ot(t,n,o,i){var e,r=(e=t).self!=Nt&&bn(e,rn)?e.scrollLeft:!x.autoScrolling||x.scrollBar?qn():e.offsetTop,a=n-r,s=0;q=!0;var l=function(){var e;q?(e=n,s+=20,o&&(e=Nt.fp_easings[x.easing](s,r,a,o)),jt(t,e),s<o?setTimeout(l,20):void 0!==i&&i()):s<o&&i()};l()}function jt(e,t){!x.autoScrolling||x.scrollBar||e.self!=Nt&&bn(e,rn)?e.self!=Nt&&bn(e,rn)?e.scrollLeft=t:e.scrollTo(0,t):e.style.top=t+"px"}function Dt(e,t){this.anchor=e.getAttribute("data-anchor"),this.item=e,this.index=Ln(e,t),this.isLast=this.index===e.parentElement.querySelectorAll(t).length-1,this.isFirst=!this.index}function Ht(e){Dt.call(this,e,Gt)}function It(e){Dt.call(this,e,nn)}Mt()}}),window.jQuery&&window.fullpage&&function(t,n){"use strict";t&&n?t.fn.fullpage=function(e){e=t.extend({},e,{$:t}),new n(this[0],e)}:window.fp_utils.showError("error","jQuery is required to use the jQuery fullpage adapter!")}(window.jQuery,window.fullpage),function(t,n){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(e){return n(e,t,t.document,t.Math)}):"object"==typeof exports&&exports?module.exports=n(require("jquery"),t,t.document,t.Math):n(jQuery,t,t.document,t.Math)}("undefined"!=typeof window?window:this,function(kt,At,Lt,Pt,$t){"use strict";var Mt="fullpage-wrapper",Ot="."+Mt,jt="fp-responsive",Dt="fp-notransition",Ht="fp-destroyed",It="fp-enabled",Nt="fp-viewing",Rt="active",zt="."+Rt,qt="fp-completely",Ft="fp-section",Bt="."+Ft,Wt=Bt+zt,_t="fp-tableCell",Xt="."+_t,Yt="#fp-nav",Vt="fp-tooltip",Ut="fp-slide",Zt="."+Ut,Gt=Zt+zt,Qt="fp-slides",Kt="."+Qt,Jt="fp-slidesContainer",en="."+Jt,tn="fp-table",nn="fp-slidesNav",on="."+nn,rn=on+" a",e="fp-controlArrow",an="."+e,sn="fp-prev",ln=an+"."+sn,cn=an+".fp-next",un=kt(At),dn=kt(Lt);kt.fn.fullpage=function(v){var l,m,y,b,r,u,s,a,o,i,x,w,S,t,T,c,d,n,f,p,h,C,E,g,k,e,A,L,P,$,M,O,j,D,H,I,N,R,z,q,F,B,W,_,X,Y;function V(e,t){e||gt(0),Tt("autoScrolling",e,t);var n=kt(Wt);v.autoScrolling&&!v.scrollBar?(l.css({overflow:"hidden",height:"100%"}),U($.recordHistory,"internal"),x.css({"-ms-touch-action":"none","touch-action":"none"}),n.length&&gt(n.position().top)):(l.css({overflow:"visible",height:"initial"}),U(!1,"internal"),x.css({"-ms-touch-action":"","touch-action":""}),yt(x),n.length&&l.scrollTop(n.position().top)),x.trigger("setAutoScrolling",[e])}function U(e,t){Tt("recordHistory",e,t)}function Z(e,t){"internal"!==t&&v.fadingEffect&&y.fadingEffect&&y.fadingEffect.update(e),Tt("scrollingSpeed",e,t)}function G(e,t){Tt("fitToSection",e,t)}function Q(e){e?(function(){var e,t="";At.addEventListener?e="addEventListener":(e="attachEvent",t="on");var n="onwheel"in Lt.createElement("div")?"wheel":Lt.onmousewheel!==$t?"mousewheel":"DOMMouseScroll";"DOMMouseScroll"==n?Lt[e](t+"MozMousePixelScroll",we,!1):Lt[e](t+n,we,!1)}(),x.on("mousedown",Be).on("mouseup",We)):(Lt.addEventListener?(Lt.removeEventListener("mousewheel",we,!1),Lt.removeEventListener("wheel",we,!1),Lt.removeEventListener("MozMousePixelScroll",we,!1)):Lt.detachEvent("onmousewheel",we),x.off("mousedown",Be).off("mouseup",We))}function K(n,e){void 0!==e?(e=e.replace(/ /g,"").split(","),kt.each(e,function(e,t){mt(n,t,"m")})):(mt(n,"all","m"),n?(Q(!0),(o||i)&&(v.autoScrolling&&m.off(A.touchmove).on(A.touchmove,ve),kt(Ot).off(A.touchstart).on(A.touchstart,be).off(A.touchmove).on(A.touchmove,me))):(Q(!1),(o||i)&&(v.autoScrolling&&m.off(A.touchmove),kt(Ot).off(A.touchstart).off(A.touchmove))))}function J(n,e){void 0!==e?(e=e.replace(/ /g,"").split(","),kt.each(e,function(e,t){mt(n,t,"k")})):(mt(n,"all","k"),v.keyboardScrolling=n)}function ee(){var e=kt(Wt).prev(Bt);e.length||!v.loopTop&&!v.continuousVertical||(e=kt(Bt).last()),e.length&&Ee(e,null,!0)}function te(){var e=kt(Wt).next(Bt);e.length||!v.loopBottom&&!v.continuousVertical||(e=kt(Bt).first()),e.length&&Ee(e,null,!1)}function ne(e,t){Z(0,"internal"),oe(e,t),Z($.scrollingSpeed,"internal")}function oe(e,t){var n=rt(e);void 0!==t?at(e,t):0<n.length&&Ee(n)}function ie(e){Se("right",e)}function re(e){Se("left",e)}function ae(e){var t;x.hasClass(Ht)||(S=!0,w=un.height(),kt(Bt).each(function(){var e=kt(this).find(Kt),t=kt(this).find(Zt);v.verticalCentered&&kt(this).find(Xt).css("height",ot(kt(this))+"px"),kt(this).css("height",ue(kt(this))+"px"),1<t.length&&Xe(e,e.find(Gt))}),v.scrollOverflow&&n.createScrollBarForAll(),(t=kt(Wt).index(Bt))&&!bt("fadingEffect")&&ne(t+1),S=!1,kt.isFunction(v.afterResize)&&e&&v.afterResize.call(x),kt.isFunction(v.afterReBuild)&&!e&&v.afterReBuild.call(x),x.trigger("afterRebuild"))}function se(e){var t=m.hasClass(jt);e?t||(V(!1,"internal"),G(!1,"internal"),kt(Yt).hide(),m.addClass(jt),kt.isFunction(v.afterResponsive)&&v.afterResponsive.call(x,e),v.responsiveSlides&&y.responsiveSlides&&y.responsiveSlides.toSections(),x.trigger("afterResponsive",[e])):t&&(V($.autoScrolling,"internal"),G($.autoScrolling,"internal"),kt(Yt).show(),m.removeClass(jt),kt.isFunction(v.afterResponsive)&&v.afterResponsive.call(x,e),v.responsiveSlides&&y.responsiveSlides&&y.responsiveSlides.toSlides(),x.trigger("afterResponsive",[e]))}function le(e){var t="fp_"+e+"Extension";M[e]=v[e+"Key"],y[e]=void 0!==At[t]?new At[t]:null,y[e]&&y[e].c(e)}function ce(e,t,n){var o,i=100*n,r=100/n;t.wrapAll('<div class="'+Jt+'" />'),t.parent().wrap('<div class="'+Qt+'" />'),e.find(en).css("width",i+"%"),1<n&&(v.controlArrows&&((o=e).find(Kt).after('<div class="fp-controlArrow fp-prev"></div><div class="fp-controlArrow fp-next"></div>'),"#fff"!=v.controlArrowColor&&(o.find(cn).css("border-color","transparent transparent transparent "+v.controlArrowColor),o.find(ln).css("border-color","transparent "+v.controlArrowColor+" transparent transparent")),v.loopHorizontal||o.find(ln).hide()),v.slidesNavigation&&function(e,t){e.append('<div class="'+nn+'"><ul></ul></div>');var n=e.find(on);n.addClass(v.slidesNavPosition);for(var o=0;o<t;o++)n.find("ul").append('<li><a href="#"><span></span></a></li>');n.css("margin-left","-"+n.width()/2+"px"),n.find("li").first().find("a").addClass(Rt)}(e,n)),t.each(function(e){kt(this).css("width",r+"%"),v.verticalCentered&&nt(kt(this))});var a=e.find(Gt);a.length&&(0!==kt(Wt).index(Bt)||0===kt(Wt).index(Bt)&&0!==a.index())?(ht(a,"internal"),a.addClass("fp-initial")):t.eq(0).addClass(Rt)}function ue(e){return v.offsetSections&&y.offsetSections?Pt.round(y.offsetSections.getWindowHeight(e)):w}function de(){var e,t=kt(Wt);t.addClass(qt),Le(t),Pe(t),v.scrollOverflow&&v.scrollOverflowHandler.afterLoad(),(!(e=rt(ze().section))||e.length&&e.index()===s.index())&&kt.isFunction(v.afterLoad)&&v.afterLoad.call(t,t.data("anchor"),t.index(Bt)+1),kt.isFunction(v.afterRender)&&v.afterRender.call(x),x.trigger("afterRender")}function fe(){B||(requestAnimationFrame(pe),B=!0)}function pe(){var e,t;if(x.trigger("onScroll"),(!v.autoScrolling||v.scrollBar||bt("dragAndMove"))&&!St()){var n,o,i,r,a,s,l,c,u=bt("dragAndMove")?Pt.abs(y.dragAndMove.getCurrentScroll()):un.scrollTop(),d=(t=u,W=t,0),f=u+un.height()/2,p=(bt("dragAndMove")?y.dragAndMove.getDocumentHeight():m.height()-un.height())===u,h=Lt.querySelectorAll(Bt);if(p)d=h.length-1;else if(u)for(var g=0;g<h.length;++g)h[g].offsetTop<=f&&(d=g);else d=0;(e=kt(h).eq(d)).hasClass(Rt)||(O=!0,r=(i=kt(Wt)).index(Bt)+1,a=et(e),s=e.data("anchor"),l=e.index(Bt)+1,(c=e.find(Gt)).length&&(o=c.data("anchor"),n=c.index()),T&&(e.addClass(Rt).siblings().removeClass(Rt),xt("parallax","afterLoad"),kt.isFunction(v.onLeave)&&v.onLeave.call(i,r,l,a),kt.isFunction(v.afterLoad)&&v.afterLoad.call(e,s,l),v.resetSliders&&y.resetSliders&&y.resetSliders.apply({localIsResizing:S,leavingSection:r}),Me(i),Le(e),Pe(e),Je(s,l-1),v.anchors.length&&(b=s),lt(n,o,s)),clearTimeout(C),C=setTimeout(function(){O=!1},100)),v.fitToSection&&(clearTimeout(E),E=setTimeout(function(){v.fitToSection&&kt(Wt).outerHeight()<=w&&he()},v.fitToSectionDelay))}B=!1}function he(){T&&(S=!0,Ee(kt(Wt)),S=!1)}function ge(e){if(d.m[e]){var t="down"===e?te:ee;if(y.scrollHorizontally&&(t=y.scrollHorizontally.getScrollSection(e,t)),v.scrollOverflow){var n=v.scrollOverflowHandler.scrollable(kt(Wt)),o="down"===e?"bottom":"top";if(0<n.length){if(!v.scrollOverflowHandler.isScrolled(o,n))return 1;t()}else t()}else t()}}function ve(e){var t=e.originalEvent;v.autoScrolling&&ye(t)&&e.preventDefault()}function me(e){var t,n=e.originalEvent,o=kt(n.target).closest(Bt);ye(n)&&(v.autoScrolling&&e.preventDefault(),t=pt(n),H=t.y,I=t.x,o.find(Kt).length&&Pt.abs(D-I)>Pt.abs(j-H)?!a&&Pt.abs(D-I)>un.outerWidth()/100*v.touchSensitivity&&(I<D?d.m.right&&ie(o):d.m.left&&re(o)):v.autoScrolling&&T&&Pt.abs(j-H)>un.height()/100*v.touchSensitivity&&(H<j?ge("down"):j<H&&ge("up")))}function ye(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function be(e){var t,n=e.originalEvent;v.fitToSection&&l.stop(),ye(n)&&(t=pt(n),j=t.y,D=t.x)}function xe(e,t){for(var n=0,o=e.slice(Pt.max(e.length-t,1)),i=0;i<o.length;i++)n+=o[i];return Pt.ceil(n/t)}function we(e){var t=(new Date).getTime(),n=kt(".fp-completely").hasClass("fp-normal-scroll");if(v.autoScrolling&&!u&&!n){var o=(e=e||At.event).wheelDelta||-e.deltaY||-e.detail,i=Pt.max(-1,Pt.min(1,o)),r=void 0!==e.wheelDeltaX||void 0!==e.deltaX,a=Pt.abs(e.wheelDeltaX)<Pt.abs(e.wheelDelta)||Pt.abs(e.deltaX)<Pt.abs(e.deltaY)||!r;149<c.length&&c.shift(),c.push(Pt.abs(o)),v.scrollBar&&(e.preventDefault?e.preventDefault():e.returnValue=!1);var s=t-F;return F=t,200<s&&(c=[]),!T||wt()||xe(c,10)>=xe(c,70)&&a&&ge(i<0?"down":"up"),!1}v.fitToSection&&l.stop()}function Se(e,t){var n=(void 0===t?kt(Wt):t).find(Kt);if(!(!n.length||wt()||a||n.find(Zt).length<2)){var o=n.find(Gt),i=null;if(!(i="left"===e?o.prev(Zt):o.next(Zt)).length){if(!v.loopHorizontal)return;i="left"===e?o.siblings(":last"):o.siblings(":first")}a=!0,Xe(n,i,e)}}function Te(){kt(Gt).each(function(){ht(kt(this),"internal")})}function Ce(e){var t=e.position(),n=t.top,o=bt("dragAndMove")&&y.dragAndMove.isGrabbing?y.dragAndMove.isScrollingDown():t.top>W,i=n-w+e.outerHeight(),r=v.bigSectionsDestination;return e.outerHeight()>w?(o||r)&&"bottom"!==r||(n=i):(o||S&&e.is(":last-child"))&&(n=i),v.offsetSections&&y.offsetSections&&(n=y.offsetSections.getSectionPosition(o,n,e)),W=n}function Ee(e,t,n){if(void 0!==e&&e.length){var o,i,r={element:e,callback:t,isMovementUp:n,dtop:Ce(e),yMovement:et(e),anchorLink:e.data("anchor"),sectionIndex:e.index(Bt),activeSlide:e.find(Gt),activeSection:kt(Wt),leavingSection:kt(Wt).index(Bt)+1,localIsResizing:S};if(!(r.activeSection.is(e)&&!S||v.scrollBar&&un.scrollTop()===r.dtop&&!e.hasClass("fp-auto-height"))){if(r.activeSlide.length&&(o=r.activeSlide.data("anchor"),i=r.activeSlide.index()),kt.isFunction(v.onLeave)&&!r.localIsResizing){var a=r.yMovement;if(void 0!==n&&(a=n?"up":"down"),!1===v.onLeave.call(r.activeSection,r.leavingSection,r.sectionIndex+1,a))return}xt("parallax","apply",r),v.autoScrolling&&v.continuousVertical&&void 0!==r.isMovementUp&&(!r.isMovementUp&&"up"==r.yMovement||r.isMovementUp&&"down"==r.yMovement)&&((f=r).isMovementUp?f.activeSection.before(f.activeSection.nextAll(Bt)):f.activeSection.after(f.activeSection.prevAll(Bt).get().reverse()),gt(kt(Wt).position().top),Te(),f.wrapAroundElements=f.activeSection,f.dtop=f.element.position().top,f.yMovement=et(f.element),f.leavingSection=f.activeSection.index(Bt)+1,f.sectionIndex=f.element.index(Bt),kt(Ot).trigger("onContinuousVertical",[f]),r=f),bt("scrollOverflowReset")&&y.scrollOverflowReset.setPrevious(r.activeSection),r.localIsResizing||Me(r.activeSection),v.scrollOverflow&&v.scrollOverflowHandler.beforeLeave(),e.addClass(Rt).siblings().removeClass(Rt),Le(e),v.scrollOverflow&&v.scrollOverflowHandler.onLeave(),T=!1,lt(i,o,r.anchorLink,r.sectionIndex),l=r,v.css3&&v.autoScrolling&&!v.scrollBar?(it("translate3d(0px, -"+Pt.round(l.dtop)+"px, 0px)",!0),v.scrollingSpeed?(clearTimeout(p),p=setTimeout(function(){ke(l)},v.scrollingSpeed)):ke(l)):(u=l,d={},v.autoScrolling&&!v.scrollBar?(d.options={top:-u.dtop},d.element=Ot):(d.options={scrollTop:u.dtop},d.element="html, body"),kt((c=d).element).animate(c.options,v.scrollingSpeed,v.easing).promise().done(function(){v.scrollBar?setTimeout(function(){ke(l)},30):ke(l)})),b=r.anchorLink,Je(r.anchorLink,(s=r).wrapAroundElements&&s.wrapAroundElements.length?s.isMovementUp?kt(Bt).length-1:0:s.sectionIndex)}}var s,l,c,u,d,f}function ke(e){var t;(t=e).wrapAroundElements&&t.wrapAroundElements.length&&(t.isMovementUp?kt(".fp-section:first").before(t.wrapAroundElements):kt(".fp-section:last").after(t.wrapAroundElements),gt(kt(Wt).position().top),Te(),t.sectionIndex=t.element.index(Bt),t.leavingSection=t.activeSection.index(Bt)+1),kt.isFunction(v.afterLoad)&&!e.localIsResizing&&v.afterLoad.call(e.element,e.anchorLink,e.sectionIndex+1),v.scrollOverflow&&v.scrollOverflowHandler.afterLoad(),xt("parallax","afterLoad"),bt("scrollOverflowReset")&&y.scrollOverflowReset.reset(),v.resetSliders&&y.resetSliders&&y.resetSliders.apply(e),e.localIsResizing||Pe(e.element),e.element.addClass(qt).siblings().removeClass(qt),T=!0,kt.isFunction(e.callback)&&e.callback.call(this)}function Ae(e,t){e.attr(t,e.data(t)).removeAttr("data-"+t)}function Le(e){var o;v.lazyLoading&&Oe(e).find("img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]").each(function(){var e;o=kt(this),kt.each(["src","srcset"],function(e,t){var n=o.attr("data-"+t);void 0!==n&&n&&Ae(o,t)}),o.is("source")&&(e=o.closest("video").length?"video":"audio",o.closest(e).get(0).load())})}function Pe(e){var t=Oe(e);t.find("video, audio").each(function(){var e=kt(this).get(0);e.hasAttribute("data-autoplay")&&"function"==typeof e.play&&e.play()}),t.find('iframe[src*="youtube.com/embed/"]').each(function(){var e=kt(this).get(0);e.hasAttribute("data-autoplay")&&$e(e),e.onload=function(){e.hasAttribute("data-autoplay")&&$e(e)}})}function $e(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function Me(e){var t=Oe(e);t.find("video, audio").each(function(){var e=kt(this).get(0);e.hasAttribute("data-keepplaying")||"function"!=typeof e.pause||e.pause()}),t.find('iframe[src*="youtube.com/embed/"]').each(function(){var e=kt(this).get(0);/youtube\.com\/embed\//.test(kt(this).attr("src"))&&!e.hasAttribute("data-keepplaying")&&kt(this).get(0).contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")})}function Oe(e){var t=e.find(Gt);return t.length&&(e=kt(t)),e}function je(e){var c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(e){var t,n,o,i,r,a,s="",l=0;for(e=e.replace(/[^A-Za-z0-9+/=]/g,"");l<e.length;)t=c.indexOf(e.charAt(l++))<<2|(i=c.indexOf(e.charAt(l++)))>>4,n=(15&i)<<4|(r=c.indexOf(e.charAt(l++)))>>2,o=(3&r)<<6|(a=c.indexOf(e.charAt(l++))),s+=String.fromCharCode(t),64!=r&&(s+=String.fromCharCode(n)),64!=a&&(s+=String.fromCharCode(o));return function(e){for(var t,n,o="",i=0,r=0;i<e.length;)(n=e.charCodeAt(i))<128?(o+=String.fromCharCode(n),i++):191<n&&n<224?(r=e.charCodeAt(i+1),o+=String.fromCharCode((31&n)<<6|63&r),i+=2):(r=e.charCodeAt(i+1),t=e.charCodeAt(i+2),o+=String.fromCharCode((15&n)<<12|(63&r)<<6|63&t),i+=3);return o}(s)}function i(e){return e.slice(3).slice(0,-3)}return function(e){var t=e.split("_");if(1<t.length){var n=t[1];return e.replace(i(t[1]),"").split("_")[0]+"_"+o(n.slice(3).slice(0,-3))}return i(e)}(o(e))}function De(e){R=je("MTIzPGRpdj48YSBocmVmPSJodHRwOi8vYWx2YXJvdHJpZ28uY29tL2Z1bGxQYWdlL2V4dGVuc2lvbnMvIiBzdHlsZT0iY29sb3I6ICNmZmYgIWltcG9ydGFudDsgdGV4dC1kZWNvcmF0aW9uOm5vbmUgIWltcG9ydGFudDsiPlVubGljZW5zZWQgZnVsbFBhZ2UuanMgRXh0ZW5zaW9uPC9hPjwvZGl2PjEyMw=="),z=kt("<div/>").html(R).contents(),bt(e)&&y[e]&&(function(e){var t=function(){if(Lt.domain.length){for(var e=Lt.domain.replace(/^(www\.)/,"").split(".");2<e.length;)e.shift();return e.join(".").replace(/(^\.*)|(\.*$)/g,"")}return""}(),n=["MTM0bG9jYWxob3N0MjM0","MTM0MC4xMjM0","MTM0anNoZWxsLm5ldDIzNA==","UDdDQU5ZNlNN"],o=je(n[0]),i=je(n[1]),r=je(n[2]),a=je(n[3]),s=[o,i,r].indexOf(t)<0&&0!==t.length,l=void 0!==M[e]&&M[e].length;if(l||!s){var c=l?je(M[e]):"",u=1<(c=c.split("_")).length&&-1<c[1].indexOf(e,c[1].length-e.length);return!(c[0].indexOf(t,c[0].length-t.length)<0&&s&&a!=c[0])&&u||!s}}(e)||(He(),setInterval(He,2e3)))}function He(){L||(Pt.random()<.5?m.prepend(z):m.append(z),L=!0,z.bind("destroyed",function(){clearTimeout(q),q=setTimeout(Ie,900)})),kt(z).attr("style",je("MTIzei1pbmRleDo5OTk5OTk5O3Bvc2l0aW9uOmZpeGVkO3RvcDoyMHB4O2JvdHRvbTphdXRvO2xlZnQ6MjBweDtyaWdodDphdXRvO2JhY2tncm91bmQ6cmVkO3BhZGRpbmc6N3B4IDE1cHg7Zm9udC1zaXplOjE0cHg7Zm9udC1mYW1pbHk6YXJpYWw7Y29sb3I6I2ZmZjtkaXNwbGF5OmlubGluZS1ibG9jazt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwwLDApO29wYWNpdHk6MTtoZWlnaHQ6YXV0bzt3aWR0aDphdXRvO3pvb206MTttYXJnaW46YXV0bztib3JkZXI6bm9uZTt2aXNpYmlsaXR5OnZpc2libGU7Y2xpcC1wYXRoOm5vbmU7MTIz").replace(/;/g,je("MTIzICFpbXBvcnRhbnQ7MzQ1")))}function Ie(){L=!1}function Ne(){var e=ze(),t=e.section,n=e.slide;t&&(v.animateAnchor?at:ne)(t,n)}function Re(){var e,t,n,o,i;O||v.lockAnchors||(t=(e=ze()).section,n=e.slide,i=(o=void 0===b)&&void 0===n&&!a,t&&t.length&&(t&&t!==b&&!o||i||!a&&r!=n)&&at(t,n))}function ze(){var e,t,n,o,i,r=At.location.hash;return r.length&&(t=r.replace("#","").split("/"),o=(n=-1<r.indexOf("#/"))?"/"+t[1]:decodeURIComponent(t[0]),(i=n?t[2]:t[1])&&i.length&&(e=decodeURIComponent(i))),{section:o,slide:e}}function qe(e){clearTimeout(g);var t,n,o,i,r,a,s=kt(":focus"),l=e.which;function c(e){return e.preventDefault(),a.first().focus()}9===l?(n=(t=e).shiftKey,o=kt(":focus"),i=kt(Wt),r=i.find(Gt),a=(r.length?r:i).find(P).not('[tabindex="-1"]'),o.length?o.closest(Wt,Gt).length||(o=c(t)):c(t),(!n&&o.is(a.last())||n&&o.is(a.first()))&&t.preventDefault()):s.is("textarea")||s.is("input")||s.is("select")||"true"===s.attr("contentEditable")||""===s.attr("contentEditable")||!v.keyboardScrolling||!v.autoScrolling||(-1<kt.inArray(l,[40,38,32,33,34])&&e.preventDefault(),u=e.ctrlKey,g=setTimeout(function(){!function(e){var t=e.shiftKey;if(T||!([37,39].indexOf(e.which)<0))switch(e.which){case 38:case 33:d.k.up&&ee();break;case 32:if(t&&d.k.up){ee();break}case 40:case 34:d.k.down&&te();break;case 36:d.k.up&&oe(1);break;case 35:d.k.down&&oe(kt(Bt).length);break;case 37:d.k.left&&re();break;case 39:d.k.right&&ie()}}(e)},150))}function Fe(e){t&&(u=e.ctrlKey)}function Be(e){2==e.which&&(_=e.pageY,x.on("mousemove",_e))}function We(e){2==e.which&&x.off("mousemove")}function _e(e){T&&(e.pageY<_&&d.m.up?ee():e.pageY>_&&d.m.down&&te()),_=e.pageY}function Xe(e,t,n){var o=e.closest(Bt),i={slides:e,destiny:t,direction:n,destinyPos:t.position(),slideIndex:t.index(),section:o,sectionIndex:o.index(Bt),anchorLink:o.data("anchor"),slidesNav:o.find(on),slideAnchor:ut(t),prevSlide:o.find(Gt),prevSlideIndex:o.find(Gt).index(),localIsResizing:S};i.xMovement=tt(i.prevSlideIndex,i.slideIndex),i.localIsResizing||(T=!1),xt("parallax","applyHorizontal",i),v.onSlideLeave&&!i.localIsResizing&&"none"!==i.xMovement&&kt.isFunction(v.onSlideLeave)&&!1===v.onSlideLeave.call(i.prevSlide,i.anchorLink,i.sectionIndex+1,i.prevSlideIndex,i.direction,i.slideIndex)?a=!1:(t.addClass(Rt).siblings().removeClass(Rt),i.localIsResizing||(Me(i.prevSlide),Le(t)),Ye(i),o.hasClass(Rt)&&!i.localIsResizing&&lt(i.slideIndex,i.slideAnchor,i.anchorLink,i.sectionIndex),y.continuousHorizontal&&y.continuousHorizontal.apply(i),St()?Ve(i):Ue(e,i,!0),v.interlockedSlides&&y.interlockedSlides&&(bt("continuousHorizontal")&&void 0!==n&&n!==i.xMovement||y.interlockedSlides.apply(i)))}function Ye(e){!v.loopHorizontal&&v.controlArrows&&(e.section.find(ln).toggle(0!==e.slideIndex),e.section.find(cn).toggle(!e.destiny.is(":last-child")))}function Ve(e){var t,n;y.continuousHorizontal&&y.continuousHorizontal.afterSlideLoads(e),t=e.slidesNav,n=e.slideIndex,t.find(zt).removeClass(Rt),t.find("li").eq(n).find("a").addClass(Rt),e.localIsResizing||(xt("parallax","afterSlideLoads"),kt.isFunction(v.afterSlideLoad)&&v.afterSlideLoad.call(e.destiny,e.anchorLink,e.sectionIndex+1,e.slideAnchor,e.slideIndex),T=!0,Pe(e.destiny)),a=!1,bt("interlockedSlides")&&y.interlockedSlides.apply(e)}function Ue(e,t,n){var o,i=t.destinyPos;v.css3?(o="translate3d(-"+Pt.round(i.left)+"px, 0px, 0px)",Qe(e.find(en)).css(vt(o)),h=setTimeout(function(){n&&Ve(t)},v.scrollingSpeed,v.easing)):e.animate({scrollLeft:Pt.round(i.left)},v.scrollingSpeed,v.easing,function(){n&&Ve(t)})}function Ze(){var e,t;x.trigger("onResize"),Ge(),o?(e=kt(Lt.activeElement)).is("textarea")||e.is("input")||e.is("select")||(t=un.height(),Pt.abs(t-X)>20*Pt.max(X,t)/100&&(ae(!0),X=t)):(clearTimeout(f),f=setTimeout(function(){ae(!0)},350))}function Ge(){var e=v.responsive||v.responsiveWidth,t=v.responsiveHeight,n=e&&un.outerWidth()<e,o=t&&un.height()<t;e&&t?se(n||o):e?se(n):t&&se(o)}function Qe(e){var t="all "+v.scrollingSpeed+"ms "+v.easingcss3;return e.removeClass(Dt),e.css({"-webkit-transition":t,transition:t})}function Ke(e){return e.addClass(Dt)}function Je(e,t){var n,o,i=e;v.menu&&(kt(v.menu).find(zt).removeClass(Rt),kt(v.menu).find('[data-menuanchor="'+i+'"]').addClass(Rt)),n=e,o=t,v.navigation&&(kt(Yt).find(zt).removeClass(Rt),n?kt(Yt).find('a[href="#'+n+'"]').addClass(Rt):kt(Yt).find("li").eq(o).find("a").addClass(Rt))}function et(e){var t=kt(Wt).index(Bt),n=e.index(Bt);return t==n?"none":n<t?"up":"down"}function tt(e,t){return e==t?"none":t<e?"left":"right"}function nt(e){var t;e.hasClass(tn)||(t=kt('<div class="'+_t+'" />').height(ot(e)),e.addClass(tn).wrapInner(t))}function ot(e){var t,n=ue(e);return(v.paddingTop||v.paddingBottom)&&((t=e).hasClass(Ft)||(t=e.closest(Bt)),n-=parseInt(t.css("padding-top"))+parseInt(t.css("padding-bottom"))),n}function it(e,t){(t?Qe:Ke)(x),clearTimeout(k),x.css(vt(e)),k=setTimeout(function(){x.removeClass(Dt)},10)}function rt(e){var t,n=x.find(Bt+'[data-anchor="'+e+'"]');return n.length||(t=void 0!==e?e-1:0,n=kt(Bt).eq(t)),n}function at(e,t){var n,o,i,r,a=rt(e);a.length&&(n=t,(i=(o=a).find(Zt+'[data-anchor="'+n+'"]')).length||(n=void 0!==n?n:0,i=o.find(Zt).eq(n)),r=i,e===b||a.hasClass(Rt)?st(r):Ee(a,function(){st(r)}))}function st(e){e.length&&Xe(e.closest(Kt),e)}function lt(e,t,n){var o="";v.anchors.length&&!v.lockAnchors&&(e?(void 0!==n&&(o=n),void 0===t&&(t=e),ct(o+"/"+(r=t))):(void 0!==e&&(r=t),ct(n))),dt()}function ct(e){var t;v.recordHistory?location.hash=e:o||i?At.history.replaceState($t,$t,"#"+e):(t=At.location.href.split("#")[0],At.location.replace(t+"#"+e))}function ut(e){var t=e.data("anchor"),n=e.index();return void 0===t&&(t=n),t}function dt(){var e=kt(Wt),t=e.find(Gt),n=ut(e),o=ut(t),i=String(n);t.length&&(i=i+"-"+o),i=i.replace("/","-").replace("#","");var r=new RegExp("\\b\\s?"+Nt+"-[^\\s]+\\b","g");m[0].className=m[0].className.replace(r,""),m.addClass(Nt+"-"+i)}function ft(){return At.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"}}function pt(e){var t=[];return t.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,i&&ye(e)&&v.scrollBar&&void 0!==e.touches&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function ht(e,t){Z(0,"internal"),void 0!==t&&(S=!0),Xe(e.closest(Kt),e),void 0!==t&&(S=!1),Z($.scrollingSpeed,"internal")}function gt(e){var t=Pt.round(e);v.css3&&v.autoScrolling&&!v.scrollBar?it("translate3d(0px, -"+t+"px, 0px)",!1):v.autoScrolling&&!v.scrollBar?x.css("top",-t):l.scrollTop(t)}function vt(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function mt(n,e,o){"all"!==e?d[o][e]=n:kt.each(Object.keys(d[o]),function(e,t){d[o][t]=n})}function yt(e){return e.css({"-webkit-transition":"none",transition:"none"})}function bt(e){return null!==v[e]&&"object"==typeof v[e]?v[e].enabled&&y[e]:v[e]&&y[e]}function xt(e,t,n){return bt(e)&&y[e][t](n)}function wt(){return bt("dragAndMove")&&y.dragAndMove.isAnimating}function St(){return bt("dragAndMove")&&y.dragAndMove.isGrabbing}function Tt(e,t,n){v[e]=t,"internal"!==n&&($[e]=t)}function Ct(){kt("html").hasClass(It)?Et("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(v.continuousVertical&&(v.loopTop||v.loopBottom)&&(v.continuousVertical=!1,Et("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),v.scrollBar&&v.scrollOverflow&&Et("warn","Option `scrollBar` is mutually exclusive with `scrollOverflow`. Sections with scrollOverflow might not work well in Firefox"),!v.continuousVertical||!v.scrollBar&&v.autoScrolling||(v.continuousVertical=!1,Et("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),v.scrollOverflow&&!v.scrollOverflowHandler&&(v.scrollOverflow=!1,Et("error","The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.")),kt.each(v.anchors,function(e,t){var n=dn.find("[name]").filter(function(){return kt(this).attr("name")&&kt(this).attr("name").toLowerCase()==t.toLowerCase()}),o=dn.find("[id]").filter(function(){return kt(this).attr("id")&&kt(this).attr("id").toLowerCase()==t.toLowerCase()});(o.length||n.length)&&(Et("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE)."),o.length&&Et("error",'"'+t+'" is is being used by another element `id` property'),n.length&&Et("error",'"'+t+'" is is being used by another element `name` property'))}))}function Et(e,t){console&&console[e]&&console[e]("fullPage: "+t)}kt("html").hasClass(It)?Ct():(l=kt("html, body"),m=kt("body"),y=kt.fn.fullpage,v=kt.extend(!0,{menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowReset:!1,scrollOverflowHandler:kt.fn.fp_scrolloverflow?kt.fn.fp_scrolloverflow.iscrollHandler:null,scrollOverflowOptions:null,touchSensitivity:5,normalScrollElementTouchThreshold:5,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},sectionSelector:".section",slideSelector:".slide",afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},v),a=!1,o=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),i="ontouchstart"in At||0<navigator.msMaxTouchPoints||navigator.maxTouchPoints,x=kt(this),w=un.height(),(d={m:{up:T=t=!(S=!(c=[])),down:!0,left:!0,right:!0}}).k=kt.extend(!0,{},d.m),e=ft(),A={touchmove:"ontouchmove"in At?"touchmove":e.move,touchstart:"ontouchstart"in At?"touchstart":e.down},L=!1,P='a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]',$=kt.extend(!0,{},v),M={},Ct(),kt.extend(kt.easing,{easeInOutCubic:function(e,t,n,o,i){return(t/=i/2)<1?o/2*t*t*t+n:o/2*((t-=2)*t*t+2)+n}}),kt.event.special.destroyed={remove:function(e){e.handler&&e.handler()}},kt(this).length&&(y.version="2.9.7",y.setAutoScrolling=V,y.setRecordHistory=U,y.setScrollingSpeed=Z,y.setFitToSection=G,y.setLockAnchors=function(e){v.lockAnchors=e},y.setMouseWheelScrolling=Q,y.setAllowScrolling=K,y.setKeyboardScrolling=J,y.moveSectionUp=ee,y.moveSectionDown=te,y.silentMoveTo=ne,y.moveTo=oe,y.moveSlideRight=ie,y.moveSlideLeft=re,y.fitToSection=he,y.reBuild=ae,y.setResponsive=se,y.getFullpageData=function(){return{options:v,internals:{canScroll:T,isScrollAllowed:d,getDestinationPosition:Ce,isTouch:i,c:De,getXmovement:tt,removeAnimation:Ke,getTransforms:vt,lazyLoad:Le,addAnimation:Qe,performHorizontalMove:Ue,landscapeScroll:Xe,silentLandscapeScroll:ht,keepSlidesPosition:Te,silentScroll:gt,styleSlides:ce,scrollHandler:fe,getEventsPage:pt,getMSPointer:ft,isReallyTouch:ye,usingExtension:bt,toggleControlArrows:Ye}}},y.destroy=function(e){x.trigger("destroy",[e]),V(!1,"internal"),K(!1),J(!1),x.addClass(Ht),clearTimeout(h),clearTimeout(p),clearTimeout(f),clearTimeout(C),clearTimeout(E),un.off("scroll",fe).off("hashchange",Re).off("resize",Ze),dn.off("keydown",qe).off("keyup",Fe).off("click touchstart",Yt+" a").off("mouseenter",Yt+" li").off("mouseleave",Yt+" li").off("click touchstart",rn).off("mouseover",v.normalScrollElements).off("mouseout",v.normalScrollElements),kt(Bt).off("click touchstart",an),bt("dragAndMove")&&y.dragAndMove.destroy(),clearTimeout(h),clearTimeout(p),e&&function(){gt(0),x.find("img[data-src], source[data-src], audio[data-src], iframe[data-src]").each(function(){Ae(kt(this),"src")}),x.find("img[data-srcset]").each(function(){Ae(kt(this),"srcset")}),kt(Yt+", "+on+", "+an).remove(),kt(Bt).css({height:"","background-color":"",padding:""}),kt(Zt).css({width:""}),x.css({height:"",position:"","-ms-touch-action":"","touch-action":""}),l.css({overflow:"",height:""}),kt("html").removeClass(It),m.removeClass(jt),kt.each(m.get(0).className.split(/\s+/),function(e,t){0===t.indexOf(Nt)&&m.removeClass(t)}),kt(Bt+", "+Zt).each(function(){v.scrollOverflowHandler&&v.scrollOverflowHandler.remove(kt(this)),kt(this).removeClass(tn+" "+Rt),kt(this).attr("style",kt(this).data("fp-styles"))}),yt(x),x.find(Xt+", "+en+", "+Kt).each(function(){kt(this).replaceWith(this.childNodes)}),l.scrollTop(0);var e=[Ft,Ut,Jt];kt.each(e,function(e,t){kt("."+t).removeClass(t)})}()},y.landscapeScroll=Xe,y.shared={afterRenderActions:de},le("continuousHorizontal"),le("scrollHorizontally"),le("resetSliders"),le("interlockedSlides"),le("responsiveSlides"),le("fadingEffect"),le("dragAndMove"),le("offsetSections"),le("scrollOverflowReset"),le("parallax"),bt("dragAndMove")&&y.dragAndMove.init(),v.css3&&(v.css3=function(){var e,t=Lt.createElement("p"),n={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var o in Lt.body.insertBefore(t,null),n)t.style[o]!==$t&&(t.style[o]="translate3d(1px,1px,1px)",e=At.getComputedStyle(t).getPropertyValue(n[o]));return Lt.body.removeChild(t),e!==$t&&0<e.length&&"none"!==e}()),v.scrollBar=v.scrollBar||v.hybrid,Y=x.find(v.sectionSelector),v.anchors.length||(v.anchors=Y.filter("[data-anchor]").map(function(){return kt(this).data("anchor").toString()}).get()),v.navigationTooltips.length||(v.navigationTooltips=Y.filter("[data-tooltip]").map(function(){return kt(this).data("tooltip").toString()}).get()),x.css({height:"100%",position:"relative"}),x.addClass(Mt),kt("html").addClass(It),w=un.height(),x.removeClass(Ht),x.find(v.sectionSelector).addClass(Ft),x.find(v.slideSelector).addClass(Ut),xt("parallax","init"),kt(Bt).each(function(e){var t,n,o,i=kt(this),r=i.find(Zt),a=r.length;i.data("fp-styles",i.attr("style")),n=i,(o=e)||0!==kt(Wt).length||n.addClass(Rt),s=kt(Wt),n.css("height",ue(n)+"px"),v.paddingTop&&n.css("padding-top",v.paddingTop),v.paddingBottom&&n.css("padding-bottom",v.paddingBottom),void 0!==v.sectionsColor[o]&&n.css("background-color",v.sectionsColor[o]),void 0!==v.anchors[o]&&n.attr("data-anchor",v.anchors[o]),t=e,void 0!==v.anchors[t]&&i.hasClass(Rt)&&Je(v.anchors[t],t),v.menu&&v.css3&&kt(v.menu).closest(Ot).length&&kt(v.menu).appendTo(m),0<a?ce(i,r,a):v.verticalCentered&&nt(i)}),v.fixedElements&&v.css3&&kt(v.fixedElements).appendTo(m),v.navigation&&function(){m.append('<div id="fp-nav"><ul></ul></div>');var e=kt(Yt);e.addClass(function(){return v.showActiveTooltip?"fp-show-active "+v.navigationPosition:v.navigationPosition});for(var t=0;t<kt(Bt).length;t++){var n="";v.anchors.length&&(n=v.anchors[t]);var o='<li><a href="#'+n+'"><span></span></a>',i=v.navigationTooltips[t];void 0!==i&&""!==i&&(o+='<div class="'+Vt+" "+v.navigationPosition+'">'+i+"</div>"),o+="</li>",e.find("ul").append(o)}kt(Yt).css("margin-top","-"+kt(Yt).height()/2+"px"),kt(Yt).find("li").eq(kt(Wt).index(Bt)).find("a").addClass(Rt)}(),x.find('iframe[src*="youtube.com/embed/"]').each(function(){var e=kt(this),t=e.attr("src");e.attr("src",t+(/\?/.test(t)?"&":"?")+"enablejsapi=1")}),v.fadingEffect&&y.fadingEffect&&y.fadingEffect.apply(),v.scrollOverflow?n=v.scrollOverflowHandler.init(v):de(),K(!0),V(v.autoScrolling,"internal"),Ge(),dt(),"complete"===Lt.readyState&&Ne(),un.on("load",Ne),un.on("scroll",fe).on("hashchange",Re).blur(function(){u=t=!1}).resize(Ze),dn.keydown(qe).keyup(Fe).on("click touchstart",Yt+" a",function(e){e.preventDefault();var t=kt(this).parent().index();Ee(kt(Bt).eq(t))}).on("click touchstart",rn,function(e){e.preventDefault();var t=kt(this).closest(Bt).find(Kt);Xe(t,t.find(Zt).eq(kt(this).closest("li").index()))}).on("click",".fp-tooltip",function(){kt(this).prev().trigger("click")}),kt(Bt).on("click touchstart",an,function(){var e=kt(this).closest(Bt);kt(this).hasClass(sn)?d.m.left&&re(e):d.m.right&&ie(e)}),v.normalScrollElements&&(dn.on("mouseenter touchstart",v.normalScrollElements,function(){K(!1)}),dn.on("mouseleave touchend",v.normalScrollElements,function(){K(!0)})),bt("dragAndMove")&&y.dragAndMove.turnOffTouch()),O=!1,I=H=D=j=0,N=At.requestAnimationFrame||At.mozRequestAnimationFrame||At.webkitRequestAnimationFrame||At.msRequestAnimationFrame,At.requestAnimationFrame=N,F=(new Date).getTime(),B=!1,_=W=0,X=w)}}),function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.AOS=t():e.AOS=t()}(this,function(){return i={},n.m=o=[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(){if(0<arguments.length&&void 0!==arguments[0]&&arguments[0]&&(v=!0),v)return g=(0,p.default)(g,m),(0,f.default)(g,m.once),g}function r(){g=(0,h.default)(),i()}var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},s=(o(n(1)),n(6)),l=o(s),c=o(n(7)),u=o(n(8)),d=o(n(9)),f=o(n(10)),p=o(n(11)),h=o(n(14)),g=[],v=!1,m={offset:120,delay:0,easing:"ease",duration:400,disable:!1,once:!1,startEvent:"DOMContentLoaded",throttleDelay:99,debounceDelay:50,disableMutationObserver:!1};e.exports={init:function(e){m=a(m,e),g=(0,h.default)();var t,n=document.all&&!window.atob;return!0===(t=m.disable)||"mobile"===t&&d.default.mobile()||"phone"===t&&d.default.phone()||"tablet"===t&&d.default.tablet()||"function"==typeof t&&!0===t()||n?void g.forEach(function(e,t){e.node.removeAttribute("data-aos"),e.node.removeAttribute("data-aos-easing"),e.node.removeAttribute("data-aos-duration"),e.node.removeAttribute("data-aos-delay")}):(m.disableMutationObserver||u.default.isSupported()||(console.info('\n      aos: MutationObserver is not supported on this browser,\n      code mutations observing has been disabled.\n      You may have to call "refreshHard()" by yourself.\n    '),m.disableMutationObserver=!0),document.querySelector("body").setAttribute("data-aos-easing",m.easing),document.querySelector("body").setAttribute("data-aos-duration",m.duration),document.querySelector("body").setAttribute("data-aos-delay",m.delay),"DOMContentLoaded"===m.startEvent&&-1<["complete","interactive"].indexOf(document.readyState)?i(!0):"load"===m.startEvent?window.addEventListener(m.startEvent,function(){i(!0)}):document.addEventListener(m.startEvent,function(){i(!0)}),window.addEventListener("resize",(0,c.default)(i,m.debounceDelay,!0)),window.addEventListener("orientationchange",(0,c.default)(i,m.debounceDelay,!0)),window.addEventListener("scroll",(0,l.default)(function(){(0,f.default)(g,m.once)},m.throttleDelay)),m.disableMutationObserver||u.default.ready("[data-aos]",r),g)},refresh:i,refreshHard:r}},function(e,t){},,,,,function(g,e){(function(e){"use strict";function r(o,i,e){function r(e){var t=c,n=u;return c=u=void 0,g=e,f=o.apply(n,t)}function a(e){var t=e-h;return void 0===h||i<=t||t<0||m&&d<=e-g}function s(){var e,t,n=T();return a(n)?l(n):void(p=setTimeout(s,(t=i-((e=n)-h),m?S(t,d-(e-g)):t)))}function l(e){return p=void 0,n&&c?r(e):(c=u=void 0,f)}function t(){var e,t=T(),n=a(t);if(c=arguments,u=this,h=t,n){if(void 0===p)return g=e=h,p=setTimeout(s,i),v?r(e):f;if(m)return p=setTimeout(s,i),r(h)}return void 0===p&&(p=setTimeout(s,i)),f}var c,u,d,f,p,h,g=0,v=!1,m=!1,n=!0;if("function"!=typeof o)throw new TypeError(x);return i=b(i)||0,y(e)&&(v=!!e.leading,m="maxWait"in e,d=m?w(b(e.maxWait)||0,i):d,n="trailing"in e?!!e.trailing:n),t.cancel=function(){void 0!==p&&clearTimeout(p),c=h=u=p=void(g=0)},t.flush=function(){return void 0===p?f:l(T())},t}function y(e){var t=void 0===e?"undefined":n(e);return e&&("object"==t||"function"==t)}function o(e){return"symbol"==(void 0===e?"undefined":n(e))||(t=e)&&"object"==(void 0===t?"undefined":n(t))&&h.call(e)==a;var t}function b(e){if("number"==typeof e)return e;if(o(e))return i;var t;if(y(e)&&(e=y(t="function"==typeof e.valueOf?e.valueOf():e)?t+"":t),"string"!=typeof e)return 0===e?e:+e;e=e.replace(s,"");var n=c.test(e);return n||u.test(e)?d(e.slice(2),n?2:8):l.test(e)?i:+e}var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},x="Expected a function",i=NaN,a="[object Symbol]",s=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,u=/^0o[0-7]+$/i,d=parseInt,t="object"==(void 0===e?"undefined":n(e))&&e&&e.Object===Object&&e,f="object"==("undefined"==typeof self?"undefined":n(self))&&self&&self.Object===Object&&self,p=t||f||Function("return this")(),h=Object.prototype.toString,w=Math.max,S=Math.min,T=function(){return p.Date.now()};g.exports=function(e,t,n){var o=!0,i=!0;if("function"!=typeof e)throw new TypeError(x);return y(n)&&(o="leading"in n?!!n.leading:o,i="trailing"in n?!!n.trailing:i),r(e,t,{leading:o,maxWait:t,trailing:i})}}).call(e,function(){return this}())},function(h,e){(function(e){"use strict";function y(e){var t=void 0===e?"undefined":n(e);return e&&("object"==t||"function"==t)}function o(e){return"symbol"==(void 0===e?"undefined":n(e))||(t=e)&&"object"==(void 0===t?"undefined":n(t))&&p.call(e)==r;var t}function b(e){if("number"==typeof e)return e;if(o(e))return i;var t;if(y(e)&&(e=y(t="function"==typeof e.valueOf?e.valueOf():e)?t+"":t),"string"!=typeof e)return 0===e?e:+e;e=e.replace(a,"");var n=l.test(e);return n||c.test(e)?u(e.slice(2),n?2:8):s.test(e)?i:+e}function x(){return f.Date.now()}var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=NaN,r="[object Symbol]",a=/^\s+|\s+$/g,s=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,c=/^0o[0-7]+$/i,u=parseInt,t="object"==(void 0===e?"undefined":n(e))&&e&&e.Object===Object&&e,d="object"==("undefined"==typeof self?"undefined":n(self))&&self&&self.Object===Object&&self,f=t||d||Function("return this")(),p=Object.prototype.toString,w=Math.max,S=Math.min;h.exports=function(o,i,e){function r(e){var t=c,n=u;return c=u=void 0,g=e,f=o.apply(n,t)}function a(e){var t=e-h;return void 0===h||i<=t||t<0||m&&d<=e-g}function s(){var e,t,n=x();return a(n)?l(n):void(p=setTimeout(s,(t=i-((e=n)-h),m?S(t,d-(e-g)):t)))}function l(e){return p=void 0,n&&c?r(e):(c=u=void 0,f)}function t(){var e,t=x(),n=a(t);if(c=arguments,u=this,h=t,n){if(void 0===p)return g=e=h,p=setTimeout(s,i),v?r(e):f;if(m)return p=setTimeout(s,i),r(h)}return void 0===p&&(p=setTimeout(s,i)),f}var c,u,d,f,p,h,g=0,v=!1,m=!1,n=!0;if("function"!=typeof o)throw new TypeError("Expected a function");return i=b(i)||0,y(e)&&(v=!!e.leading,m="maxWait"in e,d=m?w(b(e.maxWait)||0,i):d,n="trailing"in e?!!e.trailing:n),t.cancel=function(){void 0!==p&&clearTimeout(p),c=h=u=p=void(g=0)},t.flush=function(){return void 0===p?f:l(x())},t}}).call(e,function(){return this}())},function(e,t){"use strict";function i(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}function r(e){e&&e.forEach(function(e){var t=Array.prototype.slice.call(e.addedNodes),n=Array.prototype.slice.call(e.removedNodes);if(function e(t){for(var n,o=void 0,o=0;o<t.length;o+=1){if((n=t[o]).dataset&&n.dataset.aos)return!0;if(n.children&&e(n.children))return!0}return!1}(t.concat(n)))return a()})}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){};t.default={isSupported:function(){return!!i()},ready:function(e,t){var n=window.document,o=new(i())(r);a=t,o.observe(n.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}}},function(e,t){"use strict";function n(){return navigator.userAgent||navigator.vendor||window.opera||""}Object.defineProperty(t,"__esModule",{value:!0});var o=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,i=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,r=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,a=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,s=(function(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e}(l,[{key:"phone",value:function(){var e=n();return!(!o.test(e)&&!i.test(e.substr(0,4)))}},{key:"mobile",value:function(){var e=n();return!(!r.test(e)&&!a.test(e.substr(0,4)))}},{key:"tablet",value:function(){return this.mobile()&&!this.phone()}}]),l);function l(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l)}function c(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}t.default=new s},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,a){var s=window.pageYOffset,l=window.innerHeight;e.forEach(function(e,t){var n,o,i,r;o=l+s,i=a,r=(n=e).node.getAttribute("data-aos-once"),o>n.position?n.node.classList.add("aos-animate"):void 0===r||"false"!==r&&(i||"true"===r)||n.node.classList.remove("aos-animate")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,i=n(12),r=(o=i)&&o.__esModule?o:{default:o};t.default=function(e,n){return e.forEach(function(e,t){e.node.classList.add("aos-init"),e.position=(0,r.default)(e.node,n.offset)}),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,i=n(13),a=(o=i)&&o.__esModule?o:{default:o};t.default=function(e,t){var n=0,o=0,i=window.innerHeight,r={offset:e.getAttribute("data-aos-offset"),anchor:e.getAttribute("data-aos-anchor"),anchorPlacement:e.getAttribute("data-aos-anchor-placement")};switch(r.offset&&!isNaN(r.offset)&&(o=parseInt(r.offset)),r.anchor&&document.querySelectorAll(r.anchor)&&(e=document.querySelectorAll(r.anchor)[0]),n=(0,a.default)(e).top,r.anchorPlacement){case"top-bottom":break;case"center-bottom":n+=e.offsetHeight/2;break;case"bottom-bottom":n+=e.offsetHeight;break;case"top-center":n+=i/2;break;case"bottom-center":n+=i/2+e.offsetHeight;break;case"center-center":n+=i/2+e.offsetHeight/2;break;case"top-top":n+=i;break;case"bottom-top":n+=e.offsetHeight+i;break;case"center-top":n+=e.offsetHeight/2+i}return r.anchorPlacement||r.offset||isNaN(t)||(o=t),n+o}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){for(var t=0,n=0;e&&!isNaN(e.offsetLeft)&&!isNaN(e.offsetTop);)t+=e.offsetLeft-("BODY"!=e.tagName?e.scrollLeft:0),n+=e.offsetTop-("BODY"!=e.tagName?e.scrollTop:0),e=e.offsetParent;return{top:n,left:t}}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){return e=e||document.querySelectorAll("[data-aos]"),Array.prototype.map.call(e,function(e){return{node:e}})}}],n.c=i,n.p="dist/",n(0);function n(e){if(i[e])return i[e].exports;var t=i[e]={exports:{},id:e,loaded:!1};return o[e].call(t.exports,t,t.exports,n),t.loaded=!0,t.exports}var o,i});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsImpxdWVyeS5mYW5jeWJveC5qcyIsImZ1bGxwYWdlLmpzIiwianF1ZXJ5LmZ1bGxwYWdlLmV4dGVuc2lvbnMubWluLmpzIiwiYW9zLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJpc1dpbmRvdyIsIm9iaiIsImFyciIsImdldFByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImZsYXQiLCJhcnJheSIsImNhbGwiLCJjb25jYXQiLCJhcHBseSIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm5vZGVUeXBlIiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInR5cGUiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJub2RlIiwiZG9jIiwiaSIsInZhbCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidG9UeXBlIiwidmVyc2lvbiIsImpRdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZuIiwiaW5pdCIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwiZ2V0IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJvcHRpb25zIiwibmFtZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsInZhbHVlIiwiZ3VpZCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwic3BsaXQiLCJfaSIsInRvTG93ZXJDYXNlIiwiU2l6emxlIiwiZnVuZXNjYXBlIiwiZXNjYXBlIiwibm9uSGV4IiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJzZXREb2N1bWVudCIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJwb3AiLCJwdXNoTmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicnRyaW0iLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyZGVzY2VuZCIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0Iiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiYWRkQ29tYmluYXRvciIsImRpc2FibGVkIiwibm9kZU5hbWUiLCJkaXIiLCJuZXh0IiwiY2hpbGROb2RlcyIsImUiLCJlbHMiLCJzZWVkIiwibSIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsInRlc3RDb250ZXh0Iiwic2NvcGUiLCJ0b1NlbGVjdG9yIiwiam9pbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImtleSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsInRtcCIsImlucHV0IiwiaW5uZXJIVE1MIiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInNwZWNpZmllZCIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsIj4iLCIgIiwiKyIsIn4iLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJub3QiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaGFzIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsIl9tYXRjaEluZGV4ZXMiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJzdWJtaXQiLCJyZXNldCIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJieUVsZW1lbnQiLCJkaXJydW5zVW5pcXVlIiwiYnlTZXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwidG9rZW4iLCJjb21waWxlZCIsIl9uYW1lIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwibiIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwic2VsZiIsInJvb3RqUXVlcnkiLCJyZWFkeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwicHJldiIsInNpYmxpbmciLCJ0YXJnZXRzIiwibCIsImNsb3Nlc3QiLCJpbmRleCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJDYWxsYmFja3MiLCJvYmplY3QiLCJfIiwiZmxhZyIsImZpcmUiLCJsb2NrZWQiLCJvbmNlIiwiZmlyZWQiLCJmaXJpbmciLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwibWVtb3J5Iiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsImNhdGNoIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwibWlnaHRUaHJvdyIsInRoYXQiLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwidXBkYXRlRnVuYyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJyZW1haW5pbmciLCJtYXN0ZXIiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsIl9rZXkiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwic3R5bGUiLCJkaXNwbGF5IiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImJvZHkiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRyaWdnZXIiLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImNyZWF0ZSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJibHVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInN3YXAiLCJvbGQiLCJwaXhlbFBvc2l0aW9uVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJzY3JvbGxib3hTaXplVmFsIiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsImNvbnRhaW5lciIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJyYm94U3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImRpdlN0eWxlIiwiY3NzVGV4dCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsIndpZHRoIiwicG9zaXRpb24iLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zIiwidGFibGUiLCJ0ckNoaWxkIiwidHJTdHlsZSIsImhlaWdodCIsInBhcnNlSW50IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZ3JpZEFyZWEiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TdGFydCIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1N0YXJ0IiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxib3hTaXplQnVnZ3kiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsIm9wdCIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJiaW5kIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCIqIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJkb0FuaW1hdGlvbiIsIm9wdGFsbCIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJwYXJhbSIsInRyYWRpdGlvbmFsIiwidmFsdWVPckZ1bmN0aW9uIiwicyIsImVuY29kZVVSSUNvbXBvbmVudCIsImJ1aWxkUGFyYW1zIiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsInRleHQgc2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJ0cmltIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJkZWZhdWx0cyIsIiRXIiwiJEQiLCJjYWxsZWQiLCJyZXF1ZXN0QUZyYW1lIiwiY2FuY2VsQUZyYW1lIiwidHJhbnNpdGlvbkVuZCIsImZvcmNlUmVkcmF3IiwibWVyZ2VPcHRzIiwiRmFuY3lCb3giLCJidXR0b25TdHIiLCJmb2N1c1N0ciIsIiRwcmVzc2VkIiwiX3J1biIsIiR0YXJnZXQiLCJpbnN0YW5jZSIsIml0ZW1zIiwiZmFuY3lib3giLCJnZXRJbnN0YW5jZSIsIiR0cmlnZ2VyIiwiaW5mbyIsInN0dWZmIiwiY2xvc2VFeGlzdGluZyIsImxvb3AiLCJndXR0ZXIiLCJrZXlib2FyZCIsInByZXZlbnRDYXB0aW9uT3ZlcmxhcCIsImFycm93cyIsImluZm9iYXIiLCJzbWFsbEJ0biIsInRvb2xiYXIiLCJpZGxlVGltZSIsInByb3RlY3QiLCJtb2RhbCIsInByZWxvYWQiLCJpZnJhbWUiLCJ0cGwiLCJzY3JvbGxpbmciLCJ2aWRlbyIsImZvcm1hdCIsImF1dG9TdGFydCIsImRlZmF1bHRUeXBlIiwiYW5pbWF0aW9uRWZmZWN0IiwiYW5pbWF0aW9uRHVyYXRpb24iLCJ6b29tT3BhY2l0eSIsInRyYW5zaXRpb25FZmZlY3QiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJzbGlkZUNsYXNzIiwiYmFzZUNsYXNzIiwiYmFzZVRwbCIsInNwaW5uZXJUcGwiLCJlcnJvclRwbCIsImJ0blRwbCIsImRvd25sb2FkIiwiY2xvc2UiLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwicGFyZW50RWwiLCJoaWRlU2Nyb2xsYmFyIiwiYXV0b0ZvY3VzIiwiYmFja0ZvY3VzIiwidHJhcEZvY3VzIiwiZnVsbFNjcmVlbiIsInRvdWNoIiwidmVydGljYWwiLCJtb21lbnR1bSIsIm1lZGlhIiwic2xpZGVTaG93IiwidGh1bWJzIiwiaGlkZU9uQ2xvc2UiLCJheGlzIiwid2hlZWwiLCJvbkluaXQiLCJiZWZvcmVMb2FkIiwiYWZ0ZXJMb2FkIiwiYmVmb3JlU2hvdyIsImFmdGVyU2hvdyIsImJlZm9yZUNsb3NlIiwiYWZ0ZXJDbG9zZSIsIm9uQWN0aXZhdGUiLCJvbkRlYWN0aXZhdGUiLCJjbGlja0NvbnRlbnQiLCJjbGlja1NsaWRlIiwiY2xpY2tPdXRzaWRlIiwiZGJsY2xpY2tDb250ZW50IiwiZGJsY2xpY2tTbGlkZSIsImRibGNsaWNrT3V0c2lkZSIsIm1vYmlsZSIsImkxOG4iLCJlbiIsIkNMT1NFIiwiTkVYVCIsIlBSRVYiLCJFUlJPUiIsIlBMQVlfU1RBUlQiLCJQTEFZX1NUT1AiLCJGVUxMX1NDUkVFTiIsIlRIVU1CUyIsIkRPV05MT0FEIiwiU0hBUkUiLCJaT09NIiwiZGUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIiwib0NhbmNlbEFuaW1hdGlvbkZyYW1lIiwidHJhbnNpdGlvbnMiLCJ0cmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsIiRlbCIsIm9wdHMxIiwib3B0czIiLCJyZXoiLCJpc01vYmlsZSIsImN1cnJJbmRleCIsInByZXZJbmRleCIsInByZXZQb3MiLCJjdXJyUG9zIiwiZmlyc3RSdW4iLCJncm91cCIsInNsaWRlcyIsImFkZENvbnRlbnQiLCIkY29udGFpbmVyIiwiZmlyc3RJdGVtT3B0cyIsInNjcm9sbEhlaWdodCIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsImNsaWVudFdpZHRoIiwidHJhbnNsYXRlIiwiJHJlZnMiLCJmb3JFYWNoIiwiaXRlbSIsImFjdGl2YXRlIiwianVtcFRvIiwic3RyIiwiJGl0ZW0iLCJmb3VuZCIsInNyY1BhcnRzIiwiJG9yaWciLCJjaGFyQXQiLCIkdGh1bWIiLCJ0aHVtYiIsInVwZGF0ZUNvbnRyb2xzIiwiVGh1bWJzIiwiaXNBY3RpdmUiLCJhZGRFdmVudHMiLCJyZW1vdmVFdmVudHMiLCJwcmV2aW91cyIsImlzU2NhbGVkRG93biIsInJlcXVlc3RJZCIsInVwZGF0ZSIsInN0YWdlIiwia2V5Y29kZSIsImlkbGVTZWNvbmRzQ291bnRlciIsImlzSWRsZSIsInNob3dDb250cm9scyIsImlkbGVJbnRlcnZhbCIsInNldEludGVydmFsIiwiaXNEcmFnZ2luZyIsImhpZGVDb250cm9scyIsImNsZWFySW50ZXJ2YWwiLCJpc01vdmVkIiwic2xpZGVQb3MiLCJzdGFnZVBvcyIsImdyb3VwTGVuIiwiaXNDbG9zaW5nIiwiaXNBbmltYXRpbmciLCJjcmVhdGVTbGlkZSIsImZvcmNlZER1cmF0aW9uIiwiJHNsaWRlIiwibG9hZFNsaWRlIiwiZ2V0VHJhbnNsYXRlIiwic2xpZGUiLCJpc0NvbXBsZXRlIiwibGVmdFBvcyIsInNldFRyYW5zbGF0ZSIsInRyYW5zZm9ybSIsImlzTG9hZGVkIiwicmV2ZWFsQ29udGVudCIsInVwZGF0ZVNsaWRlIiwic2NhbGVUb0FjdHVhbCIsIngiLCJ5IiwiaW1nUG9zIiwicG9zWCIsInBvc1kiLCJzY2FsZVgiLCJzY2FsZVkiLCIkY29udGVudCIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwibmV3SW1nV2lkdGgiLCJuZXdJbWdIZWlnaHQiLCJoYXNFcnJvciIsInVwZGF0ZUN1cnNvciIsIlNsaWRlU2hvdyIsInNjYWxlVG9GaXQiLCJnZXRGaXRQb3MiLCJtYXhIZWlnaHQiLCJtaW5SYXRpbyIsImFzcGVjdFJhdGlvIiwibWluIiwiZmxvb3IiLCJyYXRpbyIsImFkanVzdENhcHRpb24iLCJhZGp1c3RMYXlvdXQiLCJuYXZpZ2F0aW9uIiwiY2xpZW50SGVpZ2h0IiwiY2VudGVyU2xpZGUiLCJhYnMiLCJuZXh0V2lkdGgiLCJuZXh0SGVpZ2h0IiwiY2FuUGFuIiwiaXNab29tYWJsZSIsIkd1ZXN0dXJlcyIsImZpdFBvcyIsImFqYXhMb2FkIiwiaXNMb2FkaW5nIiwic2V0SW1hZ2UiLCJzZXRJZnJhbWUiLCJzZXRDb250ZW50IiwidmlkZW9Gb3JtYXQiLCJzZXRFcnJvciIsInNob3dMb2FkaW5nIiwidGV4dFN0YXR1cyIsImdob3N0IiwiJGltZyIsIiRpbWFnZSIsImNoZWNrU3Jjc2V0IiwiJGdob3N0Iiwic2V0QmlnSW1hZ2UiLCJweFJhdGlvIiwid2luZG93V2lkdGgiLCJzcmNzZXQiLCJkZXZpY2VQaXhlbFJhdGlvIiwic3Vic3RyaW5nIiwicG9zdGZpeCIsImltZyIsInNpemVzIiwicmVzb2x2ZUltYWdlU2xpZGVTaXplIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsImhpZGVMb2FkaW5nIiwiaW1nV2lkdGgiLCJpbWdIZWlnaHQiLCIkaWZyYW1lIiwiZ2V0VGltZSIsIiRib2R5IiwiZnJhbWVXaWR0aCIsImZyYW1lSGVpZ2h0IiwiaWdub3JlIiwibWF4LXdpZHRoIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiaXNSZXZlYWxlZCIsIiRwbGFjZWhvbGRlciIsIiRzbWFsbEJ0biIsIiRzcGlubmVyIiwiJGNsb25lIiwicHJldmVudE92ZXJsYXAiLCIkY2FwdGlvbiIsImNhcHRpb25IIiwibWFyZ2luQm90dG9tIiwiaW5saW5lUGFkZGluZyIsImFjdHVhbFBhZGRpbmciLCJkaXNhYmxlTGF5b3V0Rml4IiwiZWZmZWN0IiwiZWZmZWN0Q2xhc3NOYW1lIiwiZ2V0VGh1bWJQb3MiLCJ0aHVtYlBvcyIsImJ0dyIsImJydyIsImJidyIsImJsdyIsImVsZW1DZW50ZXIiLCJlbGVtZW50RnJvbVBvaW50IiwiRG9jdW1lbnQiLCJleGl0RnVsbHNjcmVlbiIsIndlYmtpdEV4aXRGdWxsc2NyZWVuIiwiZm9jdXNhYmxlSXRlbXMiLCJmb2N1c2VkSXRlbUluZGV4IiwiZm9jdXNhYmxlU3RyIiwiaXNWaXNpYmxlIiwiZCIsImNsZWFuVXAiLCJkb21SZWN0IiwiJGZvY3VzIiwic2Nyb2xsWCIsInNjcm9sbFkiLCJoYXNIaWRkZW5Db250cm9scyIsImFuZENhcHRpb24iLCJ0b2dnbGVDb250cm9scyIsImNvbW1hbmQiLCJhbGwiLCJkZXN0cm95IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidXNlM2QiLCJkb2N1bWVudE1vZGUiLCJsZWF2ZUFuaW1hdGlvbk5hbWUiLCJmcm9tIiwicHJvcGVydHlOYW1lIiwiY2FsbENhbGxiYWNrIiwieW91dHViZSIsImF1dG9wbGF5IiwiYXV0b2hpZGUiLCJmcyIsInJlbCIsImhkIiwid21vZGUiLCJlbmFibGVqc2FwaSIsImh0bWw1IiwicGFyYW1QbGFjZSIsInZpbWVvIiwic2hvd190aXRsZSIsInNob3dfYnlsaW5lIiwic2hvd19wb3J0cmFpdCIsImZ1bGxzY3JlZW4iLCJpbnN0YWdyYW0iLCJnbWFwX3BsYWNlIiwiZ21hcF9zZWFyY2giLCJ1cmxQYXJhbXMiLCJwYXJhbU9iaiIsInByb3ZpZGVyIiwicHJvdmlkZXJOYW1lIiwicHJvdmlkZXJPcHRzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicDEiLCJvcmlnU3JjIiwiY29udGVudFNvdXJjZSIsIlZpZGVvQVBJTG9hZGVyIiwibG9hZGluZyIsImxvYWRlZCIsInZlbmRvciIsIl90aGlzIiwib25Zb3VUdWJlSWZyYW1lQVBJUmVhZHkiLCJZVCIsIlBsYXllciIsIm9uU3RhdGVDaGFuZ2UiLCJWaW1lbyIsImFmdGVyU2hvdy5mYiIsImdldFBvaW50ZXJYWSIsImRpc3RhbmNlIiwicG9pbnQyIiwicG9pbnQxIiwic3FydCIsInBvdyIsImlzQ2xpY2thYmxlIiwib25jbGljayIsImF0dHMiLCJzdWJzdHIiLCJpc1Njcm9sbGFibGUiLCJob3Jpem9udGFsIiwic2Nyb2xsV2lkdGgiLCIkYmciLCJiZyIsIiRzdGFnZSIsInRhcHBlZCIsIm9udG91Y2hzdGFydCIsImlzVG91Y2hEZXZpY2UiLCJyZWFsUG9pbnRzIiwic3RhcnRQb2ludHMiLCJzdGFydEV2ZW50IiwiY2FuVGFwIiwiaXNQYW5uaW5nIiwiaXNTd2lwaW5nIiwiaXNab29taW5nIiwiaXNTY3JvbGxpbmciLCJkaXN0YW5jZVgiLCJkaXN0YW5jZVkiLCJjb250ZW50TGFzdFBvcyIsImNvbnRlbnRTdGFydFBvcyIsInNsaWRlclN0YXJ0UG9zIiwib25zY3JvbGwiLCJjZW50ZXJQb2ludFN0YXJ0WCIsImNlbnRlclBvaW50U3RhcnRZIiwicGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRYIiwicGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRZIiwic3RhcnREaXN0YW5jZUJldHdlZW5GaW5nZXJzIiwib250b3VjaG1vdmUiLCJuZXdQb2ludHMiLCJvblN3aXBlIiwib25QYW4iLCJvblpvb20iLCJvbnRvdWNoZW5kIiwiYW5nbGUiLCJzd2lwaW5nIiwic2xpZGVyTGFzdFBvcyIsImF0YW4yIiwidHJhbnNpdGlvbi1kdXJhdGlvbiIsImxpbWl0TW92ZW1lbnQiLCJjdXJyZW50T2Zmc2V0WCIsImN1cnJlbnRPZmZzZXRZIiwiY3VycmVudFdpZHRoIiwiY3VycmVudEhlaWdodCIsIm5ld09mZnNldFgiLCJuZXdPZmZzZXRZIiwibWluVHJhbnNsYXRlWCIsIm1pblRyYW5zbGF0ZVkiLCJtYXhUcmFuc2xhdGVYIiwibWF4VHJhbnNsYXRlWSIsImxpbWl0UG9zaXRpb24iLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsInBpbmNoUmF0aW8iLCJ0cmFuc2xhdGVGcm9tWm9vbWluZ1giLCJ0cmFuc2xhdGVGcm9tWm9vbWluZ1kiLCJjZW50ZXJQb2ludEVuZFgiLCJjZW50ZXJQb2ludEVuZFkiLCJ0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdYIiwibmV3UG9zIiwicGFubmluZyIsInpvb21pbmciLCJlbmRQb2ludHMiLCJkTXMiLCJvblRhcCIsInZlbG9jaXR5WCIsInZlbG9jaXR5WSIsImVuZFBhbm5pbmciLCJlbmRab29taW5nIiwiZW5kU3dpcGluZyIsImNhbkFkdmFuY2UiLCJhY3Rpb24iLCJ0YXBYIiwidGFwWSIsIndoZXJlIiwiJGJ1dHRvbiIsIiRwcm9ncmVzcyIsImlubmVyIiwiZm9yY2UiLCJjbGVhciIsIm9uSW5pdC5mYiIsImJlZm9yZVNob3cuZmIiLCJhZnRlcktleWRvd24uZmIiLCJrZXlwcmVzcyIsImJlZm9yZUNsb3NlLmZiIG9uRGVhY3RpdmF0ZS5mYiIsIkZ1bGxTY3JlZW4iLCJmbk1hcCIsInJlcXVlc3QiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIkFMTE9XX0tFWUJPQVJEX0lOUFVUIiwiZXhpdCIsImlzRnVsbHNjcmVlbiIsIkJvb2xlYW4iLCJmdWxsc2NyZWVuRWxlbWVudCIsImZ1bGxzY3JlZW5FbmFibGVkIiwiZnVsbHNjcmVlbmNoYW5nZSIsImJlZm9yZUNsb3NlLmZiIiwiQ0xBU1NfQUNUSVZFIiwiRmFuY3lUaHVtYnMiLCIkZ3JpZCIsIiRsaXN0Iiwic2hhcmUiLCJjdXJyZW50SGFzaCIsImVudGl0eU1hcCIsIiYiLCI8IiwiXCIiLCInIiwiLyIsImAiLCI9Iiwic2hhcmVJbnN0YW5jZSIsInNoYXJlQ3VycmVudCIsInBhcnNlVXJsIiwiZ2FsbGVyeSIsInRyaWdnZXJGcm9tVXJsIiwiZ2V0R2FsbGVyeUlEIiwib3JpZ0hhc2giLCJoYXNoVGltZXIiLCJoaXN0b3J5IiwidGl0bGUiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc0NyZWF0ZWRIaXN0b3J5IiwiYmFjayIsInJlcGxhY2VTdGF0ZSIsImZiIiwicHJldlRpbWUiLCJjdXJyVGltZSIsImRlbHRhWSIsImRlbHRhWCIsIndoZWVsRGVsdGEiLCJmdWxscGFnZSIsIldSQVBQRVIiLCJXUkFQUEVSX1NFTCIsIlJFU1BPTlNJVkUiLCJOT19UUkFOU0lUSU9OIiwiREVTVFJPWUVEIiwiRU5BQkxFRCIsIlZJRVdJTkdfUFJFRklYIiwiQUNUSVZFIiwiQUNUSVZFX1NFTCIsIkNPTVBMRVRFTFkiLCJTRUNUSU9OIiwiU0VDVElPTl9TRUwiLCJTRUNUSU9OX0FDVElWRV9TRUwiLCJUQUJMRV9DRUxMIiwiVEFCTEVfQ0VMTF9TRUwiLCJTRUNUSU9OX05BVl9TRUwiLCJTTElERSIsIlNMSURFX1NFTCIsIlNMSURFX0FDVElWRV9TRUwiLCJTTElERVNfV1JBUFBFUiIsIlNMSURFU19XUkFQUEVSX1NFTCIsIlNMSURFU19DT05UQUlORVIiLCJTTElERVNfQ09OVEFJTkVSX1NFTCIsIlRBQkxFIiwiU0xJREVTX05BViIsIlNMSURFU19OQVZfU0VMIiwiU0xJREVTX05BVl9MSU5LX1NFTCIsIlNMSURFU19BUlJPV19TRUwiLCJTTElERVNfQVJST1dfUFJFVl9TRUwiLCJTTElERVNfQVJST1dfTkVYVF9TRUwiLCJzaG93RXJyb3IiLCJkZWVwRXh0ZW5kIiwib3V0IiwiY2xhc3NMaXN0IiwiZ2V0V2luZG93SGVpZ2h0IiwiZ2V0V2luZG93V2lkdGgiLCJnZXRMaXN0IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsIm5leHRFbGVtZW50U2libGluZyIsImlzQXJyYXlPckxpc3QiLCJ0b1dyYXAiLCJ3cmFwcGVyIiwiaXNXcmFwQWxsIiwibmV3UGFyZW50IiwiY3JlYXRlRWxlbWVudEZyb21IVE1MIiwid3JhcHBlckNvbnRlbnQiLCJyZWZlcmVuY2UiLCJiZWZvcmVFbGVtZW50IiwiZ2V0U2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwiY2hpbGQiLCJldmVudE5hbWUiLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImh0bWxTdHJpbmciLCJwYXJlbnRFbGVtZW50IiwidW50aWxBbGwiLCJOb2RlTGlzdCIsInRoaXNBcmciLCJmcF91dGlscyIsImZpbHRlckZuIiwiY29udGFpbmVyU2VsZWN0b3IiLCJhbmNob3JzQXR0cmlidXRlIiwiYW5jaG9ycyIsInRvb2x0aXBzQXR0cmlidXRlIiwidG9vbHRpcHMiLCJpc09LIiwibGljZW5zZUtleSIsImRvbWFpbiIsIiRodG1sQm9keSIsIiRodG1sIiwiRlAiLCJtZW51IiwibG9ja0FuY2hvcnMiLCJuYXZpZ2F0aW9uUG9zaXRpb24iLCJuYXZpZ2F0aW9uVG9vbHRpcHMiLCJzaG93QWN0aXZlVG9vbHRpcCIsInNsaWRlc05hdmlnYXRpb24iLCJzbGlkZXNOYXZQb3NpdGlvbiIsInNjcm9sbEJhciIsImh5YnJpZCIsImNzczMiLCJzY3JvbGxpbmdTcGVlZCIsImF1dG9TY3JvbGxpbmciLCJmaXRUb1NlY3Rpb24iLCJmaXRUb1NlY3Rpb25EZWxheSIsImVhc2luZ2NzczMiLCJsb29wQm90dG9tIiwibG9vcFRvcCIsImxvb3BIb3Jpem9udGFsIiwiY29udGludW91c1ZlcnRpY2FsIiwiY29udGludW91c0hvcml6b250YWwiLCJzY3JvbGxIb3Jpem9udGFsbHkiLCJpbnRlcmxvY2tlZFNsaWRlcyIsImRyYWdBbmRNb3ZlIiwib2Zmc2V0U2VjdGlvbnMiLCJyZXNldFNsaWRlcnMiLCJmYWRpbmdFZmZlY3QiLCJub3JtYWxTY3JvbGxFbGVtZW50cyIsInNjcm9sbE92ZXJmbG93Iiwic2Nyb2xsT3ZlcmZsb3dSZXNldCIsInNjcm9sbE92ZXJmbG93SGFuZGxlciIsImZwX3Njcm9sbG92ZXJmbG93IiwiaXNjcm9sbEhhbmRsZXIiLCJzY3JvbGxPdmVyZmxvd09wdGlvbnMiLCJ0b3VjaFNlbnNpdGl2aXR5IiwidG91Y2hXcmFwcGVyIiwiYmlnU2VjdGlvbnNEZXN0aW5hdGlvbiIsImtleWJvYXJkU2Nyb2xsaW5nIiwiYW5pbWF0ZUFuY2hvciIsInJlY29yZEhpc3RvcnkiLCJjb250cm9sQXJyb3dzIiwiY29udHJvbEFycm93Q29sb3IiLCJ2ZXJ0aWNhbENlbnRlcmVkIiwic2VjdGlvbnNDb2xvciIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiZml4ZWRFbGVtZW50cyIsInJlc3BvbnNpdmUiLCJyZXNwb25zaXZlV2lkdGgiLCJyZXNwb25zaXZlSGVpZ2h0IiwicmVzcG9uc2l2ZVNsaWRlcyIsInBhcmFsbGF4IiwicGFyYWxsYXhPcHRpb25zIiwicGVyY2VudGFnZSIsInByb3BlcnR5IiwiY2FyZHMiLCJjYXJkc09wdGlvbnMiLCJwZXJzcGVjdGl2ZSIsImZhZGVDb250ZW50IiwiZmFkZUJhY2tncm91bmQiLCJzZWN0aW9uU2VsZWN0b3IiLCJzbGlkZVNlbGVjdG9yIiwidjJjb21wYXRpYmxlIiwib25MZWF2ZSIsImFmdGVyUmVuZGVyIiwiYWZ0ZXJSZXNpemUiLCJhZnRlclJlQnVpbGQiLCJhZnRlclNsaWRlTG9hZCIsIm9uU2xpZGVMZWF2ZSIsImFmdGVyUmVzcG9uc2l2ZSIsImxhenlMb2FkaW5nIiwibGFzdFNjcm9sbGVkRGVzdGlueSIsImxhc3RTY3JvbGxlZFNsaWRlIiwiY29udHJvbFByZXNzZWQiLCJzdGFydGluZ1NlY3Rpb24iLCJzbGlkZU1vdmluZyIsImlzVG91Y2giLCJtc01heFRvdWNoUG9pbnRzIiwibWF4VG91Y2hQb2ludHMiLCJ3aW5kb3dzSGVpZ2h0Iiwid2luZG93c1dpZHRoIiwiaXNSZXNpemluZyIsImlzV2luZG93Rm9jdXNlZCIsImNhblNjcm9sbCIsInNjcm9sbGluZ3MiLCJpc1Njcm9sbEFsbG93ZWQiLCJ1cCIsImRvd24iLCJrIiwic2Nyb2xsQmFySGFuZGxlciIsInJlc2l6ZUlkIiwicmVzaXplSGFuZGxlcklkIiwiYWZ0ZXJTZWN0aW9uTG9hZHNJZCIsImFmdGVyU2xpZGVMb2Fkc0lkIiwic2Nyb2xsSWQiLCJzY3JvbGxJZDIiLCJrZXlkb3duSWQiLCJnX2RvdWJsZUNoZWNrSGVpZ2h0SWQiLCJNU1BvaW50ZXIiLCJQb2ludGVyRXZlbnQiLCJtb3ZlIiwidG91Y2htb3ZlIiwidG91Y2hzdGFydCIsImZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nIiwiZ19zdXBwb3J0c1Bhc3NpdmUiLCJhY3RpdmVBbmltYXRpb24iLCJnX21lZGlhTG9hZGVkSWQiLCJnX3RyYW5zaXRpb25MYXBzZUlkIiwib3JpZ2luYWxzIiwiZ19pbml0aWFsQW5jaG9yc0luRG9tIiwiZ19jYW5GaXJlTW91c2VFbnRlck5vcm1hbFNjcm9sbCIsImV4dGVuc2lvbnMiLCJkaXNwbGF5V2FybmluZ3MiLCJmcF9lYXNpbmdzIiwiZWFzZUluT3V0Q3ViaWMiLCJjIiwic2V0QXV0b1Njcm9sbGluZyIsInNldFJlY29yZEhpc3RvcnkiLCJzZXRTY3JvbGxpbmdTcGVlZCIsInNldEZpdFRvU2VjdGlvbiIsInNldExvY2tBbmNob3JzIiwic2V0TW91c2VXaGVlbFNjcm9sbGluZyIsInNldEFsbG93U2Nyb2xsaW5nIiwic2V0S2V5Ym9hcmRTY3JvbGxpbmciLCJtb3ZlU2VjdGlvblVwIiwibW92ZVNlY3Rpb25Eb3duIiwic2lsZW50TW92ZVRvIiwibW92ZVRvIiwibW92ZVNsaWRlUmlnaHQiLCJtb3ZlU2xpZGVMZWZ0IiwicmVCdWlsZCIsInNldFJlc3BvbnNpdmUiLCJnZXRGdWxscGFnZURhdGEiLCJzZXRNb3VzZUhpamFjayIsInRpbWVvdXRJZCIsInNjcm9sbEhhbmRsZXIiLCJoYXNoQ2hhbmdlSGFuZGxlciIsInJlc2l6ZUhhbmRsZXIiLCJrZXlkb3duSGFuZGxlciIsImtleVVwSGFuZGxlciIsImRlbGVnYXRlZEV2ZW50cyIsIm9uTW91c2VFbnRlck9yTGVhdmUiLCJzaWxlbnRTY3JvbGwiLCJzZXRTcmMiLCJiYWNrZ3JvdW5kLWNvbG9yIiwiLW1zLXRvdWNoLWFjdGlvbiIsInRvdWNoLWFjdGlvbiIsInJlbW92ZUFuaW1hdGlvbiIsIi13ZWJraXQtdHJhbnNpdGlvbiIsImdldEFjdGl2ZVNlY3Rpb24iLCJTZWN0aW9uIiwiZ2V0QWN0aXZlU2xpZGUiLCJudWxsT3JTbGlkZSIsInRyYW5zbGF0ZTNkIiwidHJhbnNsYXRlM2RIIiwic2hhcmVkIiwiYWZ0ZXJSZW5kZXJBY3Rpb25zIiwiaXNOb3JtYWxTY3JvbGxFbGVtZW50IiwiZnVsbHBhZ2VfYXBpIiwiaGFzM2QiLCJ0cmFuc2Zvcm1zIiwid2Via2l0VHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwiTW96VHJhbnNmb3JtIiwic2VjdGlvbiIsInNlY3Rpb25zIiwic2VjdGlvbkluZGV4IiwibnVtU2xpZGVzIiwicGFkZGluZy10b3AiLCJwYWRkaW5nLWJvdHRvbSIsImFjdGl2YXRlTWVudUFuZE5hdiIsInNsaWRlcldpZHRoIiwic2xpZGVXaWR0aCIsInNsaWRlc1dyYXBwZXIiLCJzbGlkZXNDb250YWluZXIiLCJib3JkZXItY29sb3IiLCJuYXYiLCJnZXRCdWxsZXRMaW5rTmFtZSIsIm1hcmdpbi1sZWZ0IiwiYWRkVGFibGVDbGFzcyIsInN0YXJ0aW5nU2xpZGUiLCJzaWxlbnRMYW5kc2NhcGVTY3JvbGwiLCJzdHlsZVNsaWRlcyIsImRpdlVsIiwibGkiLCJsaW5rIiwidG9vbHRpcCIsImVsZW1lbnQiLCJvcmlnaW5hbFNyYyIsInNldEJvZHlDbGFzcyIsInNjcm9sbFRvQW5jaG9yIiwiYWRqdXN0VG9OZXdWaWV3cG9ydCIsImZvck1vdXNlTGVhdmVPclRvdWNoIiwibGFzdFNjcm9sbCIsInRvdWNoU3RhcnRZIiwidG91Y2hTdGFydFgiLCJ0b3VjaEVuZFkiLCJ0b3VjaEVuZFgiLCJwcmV2aW91c0Rlc3RUb3AiLCJvbGRQYWdlWSIsInByZXZpb3VzSGVpZ2h0Iiwic2V0VmFyaWFibGVTdGF0ZSIsInNjcm9sbFNldHRpbmdzIiwib2Zmc2V0VG9wIiwiZ2V0U2Nyb2xsU2V0dGluZ3MiLCJfYWRkRXZlbnRMaXN0ZW5lciIsIm9ubW91c2V3aGVlbCIsInBhc3NpdmVFdmVudCIsInBhc3NpdmUiLCJNb3VzZVdoZWVsSGFuZGxlciIsIm1vdXNlRG93bkhhbmRsZXIiLCJtb3VzZVVwSGFuZGxlciIsImRldGFjaEV2ZW50IiwiZGlyZWN0aW9ucyIsImRpcmVjdGlvbiIsInNldElzU2Nyb2xsQWxsb3dlZCIsInByZXZlbnRCb3VuY2luZyIsInRvdWNoU3RhcnRIYW5kbGVyIiwidG91Y2hNb3ZlSGFuZGxlciIsInNjcm9sbFBhZ2UiLCJzZWN0aW9uQW5jaG9yIiwic2xpZGVBbmNob3IiLCJkZXN0aW55IiwiZ2V0U2VjdGlvbkJ5QW5jaG9yIiwic2Nyb2xsUGFnZUFuZFNsaWRlIiwibW92ZVNsaWRlIiwicmVzaXppbmciLCJzbGlkZXNXcmFwIiwiZ2V0VGFibGVIZWlnaHQiLCJsYW5kc2NhcGVTY3JvbGwiLCJjcmVhdGVTY3JvbGxCYXJGb3JBbGwiLCJpc1Jlc3BvbnNpdmVNb2RlIiwiaXNSZXNwb25zaXZlIiwiaW5kZXhCdWxsZXQiLCJhbGxvd1Njcm9sbGluZyIsImlzSW5zaWRlT25lTm9ybWFsU2Nyb2xsIiwiaXNVc2luZ1Njcm9sbE92ZXJmbG93Iiwic2V0SXNjcm9sbCIsIm5vcm1hbFNlbGVjdG9yIiwiaXNOb3JtYWxTY3JvbGxUYXJnZXQiLCJpc05vcm1hbFNjcm9sbENoaWxkRm9jdXNlZCIsIm5ld1dpbmRvd0hlaWdodCIsIm5ld1dpbmRvd1dpZHRoIiwiZGVmYXVsdE5hbWUiLCJhbmNob3IiLCJkZXN0aW5hdGlvblNlY3Rpb24iLCJsYXp5TG9hZCIsImxhenlMb2FkT3RoZXJzIiwicGxheU1lZGlhIiwiZ2V0QW5jaG9yc1VSTCIsImZpcmVDYWxsYmFjayIsImFjdGl2ZVNlY3Rpb24iLCJhbmNob3JMaW5rIiwiY3VycmVudFNlY3Rpb24iLCJjdXJyZW50U2Nyb2xsIiwic2Nyb2xsRGlyZWN0aW9uIiwidmlzaWJsZVNlY3Rpb25JbmRleCIsInNjcmVlbl9taWQiLCJpc0F0Qm90dG9tIiwic2xpZGVJbmRleCIsInNsaWRlQW5jaG9yTGluayIsImxlYXZpbmdTZWN0aW9uIiwibGVhdmluZ1NlY3Rpb25JbmRleCIsInlNb3ZlbWVudCIsImFjdGl2ZVNsaWRlIiwiY2FsbGJhY2tzUGFyYW1zIiwibW92ZW1lbnQiLCJib3R0b20iLCJnZXRZbW92ZW1lbnQiLCJzdG9wTWVkaWEiLCJzZXRTdGF0ZSIsInNjcm9sbFNlY3Rpb24iLCJzY3JvbGxhYmxlIiwiaXNTY3JvbGxlZCIsImlzUmVhbGx5VG91Y2giLCJ0b3VjaEV2ZW50cyIsImdldEV2ZW50c1BhZ2UiLCJnZXRBdmVyYWdlIiwibnVtYmVyIiwic3VtIiwibGFzdEVsZW1lbnRzIiwiY3VyVGltZSIsImlzTm9ybWFsU2Nyb2xsIiwiaG9yaXpvbnRhbERldGVjdGlvbiIsIndoZWVsRGVsdGFYIiwiaXNTY3JvbGxpbmdWZXJ0aWNhbGx5IiwiYXZlcmFnZUVuZCIsInRpbWVEaWZmIiwiY3VycmVudFNsaWRlIiwic2xpZGVTaWJsaW5ncyIsImlzVGVzdGluZyIsImtlZXBTbGlkZXNQb3NpdGlvbiIsImFjdGl2ZVNsaWRlcyIsImlzTW92ZW1lbnRVcCIsImVsZW1lbnRIZWlnaHQiLCJlbGVtZW50VG9wIiwiaXNTY3JvbGxpbmdEb3duIiwic2VjdGlvbkJvdHRvbSIsImR0b3AiLCJsb2NhbElzUmVzaXppbmciLCJ3cmFwQXJvdW5kRWxlbWVudHMiLCJiZWZvcmVMZWF2ZSIsImlzRmFzdFNwZWVkIiwidHJhbnNpdGlvbkxhcHNlIiwidHJhbnNmb3JtQ29udGFpbmVyIiwiYWZ0ZXJTZWN0aW9uTG9hZHMiLCJvYmplY3REYXRhIiwicGFyYW1zUGVyRXZlbnQiLCJldmVudERhdGEiLCJwcmV2U2xpZGUiLCJwcmV2U2xpZGVJbmRleCIsIm51bGxPclNlY3Rpb24iLCJvcmlnaW4iLCJkZXN0aW5hdGlvbiIsIlNsaWRlIiwic2Nyb2xsIiwiYXR0cmlidXRlIiwiaGFzQXV0b0hlaWdodFNlY3Rpb25zIiwiZ2V0U2xpZGVPclNlY3Rpb24iLCJlbGVtZW50VG9QbGF5Iiwib25NZWRpYUxvYWQiLCJvbmxvYWRlZGRhdGEiLCJjcmVhdGVTY3JvbGxCYXIiLCJwYW5lbCIsImhhc0F0dHJpYnV0ZSIsInBsYXkiLCJwbGF5WW91dHViZSIsImNvbnRlbnRXaW5kb3ciLCJwb3N0TWVzc2FnZSIsInBhdXNlIiwiaXNGaXJzdFNsaWRlTW92ZSIsImlzRmlyc3RTY3JvbGxNb3ZlIiwiYW5jaG9yc1BhcnRzIiwiaXNGdW5reUFuY2hvciIsImFsbEZvY3VzYWJsZXMiLCJjdXJyZW50Rm9jdXNJbmRleCIsImZvY3VzRGVzdGluYXRpb24iLCJkZXN0aW5hdGlvbkl0ZW1TbGlkZSIsImRlc3RpbmF0aW9uSXRlbVNlY3Rpb24iLCJpc1NoaWZ0UHJlc3NlZCIsImZvY3VzYWJsZUVsZW1lbnRzIiwicHJldmVudEFuZEZvY3VzRmlyc3QiLCJnZXRGb2N1c2FibGVzIiwic2hpZnRQcmVzc2VkIiwiaXNNZWRpYUZvY3VzZWQiLCJtb3VzZU1vdmVIYW5kbGVyIiwiZnJvbUluZGV4IiwidG9JbmRleCIsImRlc3RpbnlQb3MiLCJvZmZzZXRMZWZ0Iiwic2xpZGVzTmF2IiwiZ2V0QW5jaG9yIiwieE1vdmVtZW50IiwiYWRkQW5pbWF0aW9uIiwiZ2V0VHJhbnNmb3JtcyIsImFmdGVyU2xpZGVMb2FkcyIsInJlc2l6ZUFjdGlvbnMiLCJ3aWR0aExpbWl0IiwiaGVpZ2h0TGltaXQiLCJpc0JyZWFraW5nUG9pbnRXaWR0aCIsImlzQnJlYWtpbmdQb2ludEhlaWdodCIsInBhZGRpbmdzIiwic2VjdGlvbkhlaWdodCIsInNjcm9sbFNsaWRlciIsInNlY3Rpb25IYXNoIiwic2V0VXJsSGFzaCIsImJhc2VVcmwiLCJlbGVtZW50SW5kZXgiLCJjbGFzc1JlIiwibm9DYWxsYmFja3MiLCJyb3VuZGVkVG9wIiwic2V0U2Nyb2xsaW5nIiwiLXdlYmtpdC10cmFuc2Zvcm0iLCItbW96LXRyYW5zZm9ybSIsIi1tcy10cmFuc2Zvcm0iLCJ2YXJpYWJsZSIsIm1zZ1N0eWxlIiwiZXh0ZW5zaW9uIiwibmFtZUF0dHIiLCJpZEF0dHIiLCJjaGFuZ2UiLCJhbmltYXRlU2Nyb2xsIiwiSXRlbSIsImlzTGFzdCIsImlzRmlyc3QiLCJyZXF1aXJlIiwibyIsInIiLCJmIiwidSIsImgiLCJnIiwiUyIsIk0iLCJ6IiwiSSIsIkwiLCJIIiwiRSIsIkIiLCJEIiwiUCIsIkYiLCJXIiwiWCIsIlYiLCJaIiwiTiIsInEiLCJRIiwiSiIsIksiLCJHIiwiZWUiLCJuZSIsInRlIiwib2UiLCJpZSIsImFlIiwicmUiLCJsZSIsInNlIiwiY2UiLCJmZSIsInVlIiwidmUiLCJoZSIsInBlIiwiZ2UiLCJtZSIsIlNlIiwid2UiLCJiZSIsInhlIiwieWUiLCJDZSIsIlRlIiwiQWUiLCJNZSIsImtlIiwiUmUiLCJJZSIsIkxlIiwiSGUiLCJFZSIsIk9lIiwiQmUiLCJEZSIsIlBlIiwiWWUiLCJGZSIsIldlIiwiWGUiLCJWZSIsIlplIiwiU3QiLCJNdCIsIk5lIiwieHQiLCJqZSIsInFlIiwiR2UiLCJTbiIsIlhuIiwiVm4iLCJVZSIsImJ0Iiwidm4iLCJnbiIsImhuIiwiUWUiLCJKZSIsInluIiwiS2UiLCJfZSIsIiRlIiwic3QiLCJ3biIsIm5uIiwidG4iLCJydCIsImxuIiwiVW4iLCJ5dCIsInRvU2VjdGlvbnMiLCJ0b1NsaWRlcyIsImFuIiwicm4iLCJhdCIsIm10Iiwic24iLCJBbiIsIk1uIiwiUG4iLCJjbiIsImRuIiwiQXQiLCJnZXRDdXJyZW50U2Nyb2xsIiwiZ2V0RG9jdW1lbnRIZWlnaHQiLCJvdCIsIkN0IiwiT24iLCJ0dCIsImZ0IiwidW4iLCJnZXRTY3JvbGxTZWN0aW9uIiwicG4iLCJtbiIsIlR0IiwiYm4iLCJ4biIsImlzR3JhYmJpbmciLCJnZXRTZWN0aW9uUG9zaXRpb24iLCJzZXRQcmV2aW91cyIsIkNuIiwiVG4iLCJSbiIsImtuIiwiem4iLCJMbiIsIkluIiwiSG4iLCJFbiIsIkJuIiwiRG4iLCJZbiIsIlduIiwiR24iLCJ2dCIsIml0IiwiUW4iLCJKbiIsIktuIiwiZXQiLCJ3dCIsIl9uIiwiJG4iLCJudCIsImR0IiwidXQiLCJodCIsInB0Iiwia3QiLCJPdCIsIm5vcm1hbFNjcm9sbEVsZW1lbnRUb3VjaFRocmVzaG9sZCIsImRlc3Ryb3llZCIsImludGVybmFscyIsImdldERlc3RpbmF0aW9uUG9zaXRpb24iLCJnZXRYbW92ZW1lbnQiLCJwZXJmb3JtSG9yaXpvbnRhbE1vdmUiLCJnZXRNU1BvaW50ZXIiLCJ1c2luZ0V4dGVuc2lvbiIsInRvZ2dsZUNvbnRyb2xBcnJvd3MiLCJSIiwicmVzaXplIiwia2V5ZG93biIsImtleXVwIiwidHVybk9mZlRvdWNoIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJBT1MiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIk8iLCJhc3NpZ24iLCJ0aHJvdHRsZURlbGF5IiwiZGVib3VuY2VEZWxheSIsImRpc2FibGVNdXRhdGlvbk9ic2VydmVyIiwiYXRvYiIsInBob25lIiwidGFibGV0IiwiaXNTdXBwb3J0ZWQiLCJxdWVyeVNlbGVjdG9yIiwicmVmcmVzaCIsInJlZnJlc2hIYXJkIiwibGVhZGluZyIsIm1heFdhaXQiLCJ0cmFpbGluZyIsImNhbmNlbCIsImZsdXNoIiwidmFsdWVPZiIsIk5hTiIsIkZ1bmN0aW9uIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJNb3pNdXRhdGlvbk9ic2VydmVyIiwiYWRkZWROb2RlcyIsInJlbW92ZWROb2RlcyIsImRhdGFzZXQiLCJhb3MiLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsIm9wZXJhIiwiYW5jaG9yUGxhY2VtZW50IiwidGFnTmFtZSJdLCJtYXBwaW5ncyI6IkNBYUEsU0FBWUEsRUFBUUMsZ0JBSUksaUJBQVhDLFFBQWlELGlCQUFuQkEsT0FBT0MsUUFTaERELE9BQU9DLFFBQVVILEVBQU9JLFNBQ3ZCSCxFQUFTRCxHQUFRLEdBQ2pCLFNBQVVLLEdBQ1QsSUFBTUEsRUFBRUQsU0FDUCxNQUFNLElBQUlFLE1BQU8sNENBRWxCLE9BQU9MLEVBQVNJLElBR2xCSixFQUFTRCxHQXRCWCxDQTBCdUIsb0JBQVhPLE9BQXlCQSxPQUFTQyxLQUFNLFNBQVVELEVBQVFFLGdCQStDdkQsU0FBWEMsRUFBOEJDLEdBQ2hDLE9BQWMsTUFBUEEsR0FBZUEsSUFBUUEsRUFBSUosT0F4Q3BDLElBQUlLLEVBQU0sR0FFTkMsRUFBV0MsT0FBT0MsZUFFbEJDLEVBQVFKLEVBQUlJLE1BRVpDLEVBQU9MLEVBQUlLLEtBQU8sU0FBVUMsR0FDL0IsT0FBT04sRUFBSUssS0FBS0UsS0FBTUQsSUFDbkIsU0FBVUEsR0FDYixPQUFPTixFQUFJUSxPQUFPQyxNQUFPLEdBQUlILElBSTFCSSxFQUFPVixFQUFJVSxLQUVYQyxFQUFVWCxFQUFJVyxRQUVkQyxFQUFhLEdBRWJDLEVBQVdELEVBQVdDLFNBRXRCQyxFQUFTRixFQUFXRyxlQUVwQkMsRUFBYUYsRUFBT0QsU0FFcEJJLEVBQXVCRCxFQUFXVCxLQUFNTCxRQUV4Q2dCLEVBQVUsR0FFVkMsRUFBYSxTQUFxQnBCLEdBTWhDLE1BQXNCLG1CQUFSQSxHQUE4QyxpQkFBakJBLEVBQUlxQixVQVNqRDVCLEVBQVdHLEVBQU9ILFNBSWpCNkIsRUFBNEIsQ0FDL0JDLE1BQU0sRUFDTkMsS0FBSyxFQUNMQyxPQUFPLEVBQ1BDLFVBQVUsR0FHWCxTQUFTQyxFQUFTQyxFQUFNQyxFQUFNQyxHQUc3QixJQUFJQyxFQUFHQyxFQUNOQyxHQUhESCxFQUFNQSxHQUFPckMsR0FHQ3lDLGNB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LEVBQUVrNUQsWUFBWSxRQUFRbDVELEVBQUV1b0UsUUFBUXZvRSxFQUFFb3NCLFdBQVcsR0FBR3hlLEdBQUc1TixFQUFFZ3dELFdBQVcsUUFBUWh3RCxFQUFFdW9FLFFBQVF2b0UsRUFBRW1zQixVQUFVLEdBQUduc0IsRUFBRUEsRUFBRXUrQixhQUFhLE1BQU0sQ0FBQ243QixJQUFJd0ssRUFBRXNkLEtBQUtqTyxLQUFpQixTQUFTamQsRUFBRWlkLGdCQUFnQm5wQixPQUFPZ2lCLGVBQWVtSCxFQUFFLGFBQWEsQ0FBQ3ZpQixPQUFNLElBQW9JdWlCLEVBQUVxcEQsUUFBM0gsU0FBU3RtRSxHQUFHLE9BQU9BLEVBQUVBLEdBQUc1TSxTQUFTaU8saUJBQWlCLGNBQWNsSSxNQUFNckMsVUFBVWEsSUFBSXhELEtBQUs2TCxFQUFFLFNBQVNBLEdBQUcsTUFBTSxDQUFDeEssS0FBS3dLLFFBQXQ4YmlkLEVBQUVzdEMsRUFBRTM4QyxFQUFFcVAsRUFBRXFQLEVBQUUsUUFBUXJQLEVBQUUsR0FBM0wsU0FBU0EsRUFBRXMrQyxHQUFHLEdBQUczdEQsRUFBRTJ0RCxHQUFHLE9BQU8zdEQsRUFBRTJ0RCxHQUFHcG9FLFFBQVEsSUFBSXVDLEVBQUVrWSxFQUFFMnRELEdBQUcsQ0FBQ3BvRSxRQUFRLEdBQUd5TixHQUFHMjZELEVBQUVwbUIsUUFBTyxHQUFJLE9BQU9uMUMsRUFBRXU3RCxHQUFHcG5FLEtBQUt1QixFQUFFdkMsUUFBUXVDLEVBQUVBLEVBQUV2QyxRQUFROHBCLEdBQUd2bkIsRUFBRXkvQyxRQUFPLEVBQUd6L0MsRUFBRXZDLFFBQXJKLElBQVM2TSxFQUF3SjROIiwiZmlsZSI6ImxpYnMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjUuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjAtMDUtMDRUMjI6NDlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNS4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy41XG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDIwLTAzLTE0XG4gKi9cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICgge30gKS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hOYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufFwiICtcblx0XHRcImlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdXG5cdFx0Ly8gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98XFxcXFxcXFwoW15cXFxcclxcXFxuXFxcXGZdKVwiLCBcImdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggZXNjYXBlLCBub25IZXggKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGUuc2xpY2UoIDEgKSAtIDB4MTAwMDA7XG5cblx0XHRyZXR1cm4gbm9uSGV4ID9cblxuXHRcdFx0Ly8gU3RyaXAgdGhlIGJhY2tzbGFzaCBwcmVmaXggZnJvbSBhIG5vbi1oZXggZXNjYXBlIHNlcXVlbmNlXG5cdFx0XHRub25IZXggOlxuXG5cdFx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArXG5cdFx0XHRcdGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoIGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkgKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBlbHMgKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKCB0YXJnZXRbIGorKyBdID0gZWxzWyBpKysgXSApICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KCBub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhlIHRlY2huaXF1ZSBoYXMgdG8gYmUgdXNlZCBhcyB3ZWxsIHdoZW4gYSBsZWFkaW5nIGNvbWJpbmF0b3IgaXMgdXNlZFxuXHRcdFx0XHQvLyBhcyBzdWNoIHNlbGVjdG9ycyBhcmUgbm90IHJlY29nbml6ZWQgYnkgcXVlcnlTZWxlY3RvckFsbC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApIHx8IHJjb21iaW5hdG9ycy50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBXZSBjYW4gdXNlIDpzY29wZSBpbnN0ZWFkIG9mIHRoZSBJRCBoYWNrIGlmIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydHMgaXQgJiBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIGNvbnRleHQuXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9PSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuICggY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSApO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdCggXCJ8XCIgKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFyclsgaSBdIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLm5leHRTaWJsaW5nICkgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKCBuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuZ2V0KCBzcmMgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZGVzdCwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGZsYXQoIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweFwiO1xuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9IHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCApID4gMztcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIFVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3guXG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMCAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgaW4gc29tZSBjYXNlcyBJRSA5IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhpcyBpc3N1ZS5cblx0XHQhc3VwcG9ydC5yZWxpYWJsZVRyRGltZW5zaW9ucygpICYmIG5vZGVOYW1lKCBlbGVtLCBcInRyXCIgKSB8fFxuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHRcdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHZpc2libGUgJiBjb25uZWN0ZWRcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImdyaWRBcmVhXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uRW5kXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dFbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dTdGFydFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggX2ksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdFx0KVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdFx0Ly8gKHZpYSBgdGhpcy5kb2N1bWVudGApICYgZG9jdW1lbnQgKHZpYSBgdGhpc2ApLlxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0geyBndWlkOiBEYXRlLm5vdygpIH07XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0XG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiYgalF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggdHlwZW9mIHByb3BzLnRvcCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cHJvcHMudG9wICs9IFwicHhcIjtcblx0XHRcdH1cblx0XHRcdGlmICggdHlwZW9mIHByb3BzLmxlZnQgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHByb3BzLmxlZnQgKz0gXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggX2ksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gZmFuY3lCb3ggdjMuNS43XG4vL1xuLy8gTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxuLy8gb3IgZmFuY3lCb3ggQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxuLy9cbi8vIGh0dHA6Ly9mYW5jeWFwcHMuY29tL2ZhbmN5Ym94L1xuLy8gQ29weXJpZ2h0IDIwMTkgZmFuY3lBcHBzXG4vL1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbihmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCwgJCwgdW5kZWZpbmVkKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIHdpbmRvdy5jb25zb2xlID0gd2luZG93LmNvbnNvbGUgfHwge1xyXG4gICAgaW5mbzogZnVuY3Rpb24gKHN0dWZmKSB7fVxyXG4gIH07XHJcblxyXG4gIC8vIElmIHRoZXJlJ3Mgbm8galF1ZXJ5LCBmYW5jeUJveCBjYW4ndCB3b3JrXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgaWYgKCEkKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBpZiBmYW5jeUJveCBpcyBhbHJlYWR5IGluaXRpYWxpemVkXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBpZiAoJC5mbi5mYW5jeWJveCkge1xyXG4gICAgY29uc29sZS5pbmZvKFwiZmFuY3lCb3ggYWxyZWFkeSBpbml0aWFsaXplZFwiKTtcclxuXHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBQcml2YXRlIGRlZmF1bHQgc2V0dGluZ3NcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgLy8gQ2xvc2UgZXhpc3RpbmcgbW9kYWxzXHJcbiAgICAvLyBTZXQgdGhpcyB0byBmYWxzZSBpZiB5b3UgZG8gbm90IG5lZWQgdG8gc3RhY2sgbXVsdGlwbGUgaW5zdGFuY2VzXHJcbiAgICBjbG9zZUV4aXN0aW5nOiBmYWxzZSxcclxuXHJcbiAgICAvLyBFbmFibGUgaW5maW5pdGUgZ2FsbGVyeSBuYXZpZ2F0aW9uXHJcbiAgICBsb29wOiBmYWxzZSxcclxuXHJcbiAgICAvLyBIb3Jpem9udGFsIHNwYWNlIGJldHdlZW4gc2xpZGVzXHJcbiAgICBndXR0ZXI6IDUwLFxyXG5cclxuICAgIC8vIEVuYWJsZSBrZXlib2FyZCBuYXZpZ2F0aW9uXHJcbiAgICBrZXlib2FyZDogdHJ1ZSxcclxuXHJcbiAgICAvLyBTaG91bGQgYWxsb3cgY2FwdGlvbiB0byBvdmVybGFwIHRoZSBjb250ZW50XHJcbiAgICBwcmV2ZW50Q2FwdGlvbk92ZXJsYXA6IHRydWUsXHJcblxyXG4gICAgLy8gU2hvdWxkIGRpc3BsYXkgbmF2aWdhdGlvbiBhcnJvd3MgYXQgdGhlIHNjcmVlbiBlZGdlc1xyXG4gICAgYXJyb3dzOiB0cnVlLFxyXG5cclxuICAgIC8vIFNob3VsZCBkaXNwbGF5IGNvdW50ZXIgYXQgdGhlIHRvcCBsZWZ0IGNvcm5lclxyXG4gICAgaW5mb2JhcjogdHJ1ZSxcclxuXHJcbiAgICAvLyBTaG91bGQgZGlzcGxheSBjbG9zZSBidXR0b24gKHVzaW5nIGBidG5UcGwuc21hbGxCdG5gIHRlbXBsYXRlKSBvdmVyIHRoZSBjb250ZW50XHJcbiAgICAvLyBDYW4gYmUgdHJ1ZSwgZmFsc2UsIFwiYXV0b1wiXHJcbiAgICAvLyBJZiBcImF1dG9cIiAtIHdpbGwgYmUgYXV0b21hdGljYWxseSBlbmFibGVkIGZvciBcImh0bWxcIiwgXCJpbmxpbmVcIiBvciBcImFqYXhcIiBpdGVtc1xyXG4gICAgc21hbGxCdG46IFwiYXV0b1wiLFxyXG5cclxuICAgIC8vIFNob3VsZCBkaXNwbGF5IHRvb2xiYXIgKGJ1dHRvbnMgYXQgdGhlIHRvcClcclxuICAgIC8vIENhbiBiZSB0cnVlLCBmYWxzZSwgXCJhdXRvXCJcclxuICAgIC8vIElmIFwiYXV0b1wiIC0gd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGhpZGRlbiBpZiBcInNtYWxsQnRuXCIgaXMgZW5hYmxlZFxyXG4gICAgdG9vbGJhcjogXCJhdXRvXCIsXHJcblxyXG4gICAgLy8gV2hhdCBidXR0b25zIHNob3VsZCBhcHBlYXIgaW4gdGhlIHRvcCByaWdodCBjb3JuZXIuXHJcbiAgICAvLyBCdXR0b25zIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0ZW1wbGF0ZXMgZnJvbSBgYnRuVHBsYCBvcHRpb25cclxuICAgIC8vIGFuZCB0aGV5IHdpbGwgYmUgcGxhY2VkIGludG8gdG9vbGJhciAoY2xhc3M9XCJmYW5jeWJveC10b29sYmFyXCJgIGVsZW1lbnQpXHJcbiAgICBidXR0b25zOiBbXHJcbiAgICAgIFwiem9vbVwiLFxyXG4gICAgICAvL1wic2hhcmVcIixcclxuICAgICAgXCJzbGlkZVNob3dcIixcclxuICAgICAgLy9cImZ1bGxTY3JlZW5cIixcclxuICAgICAgLy9cImRvd25sb2FkXCIsXHJcbiAgICAgIFwidGh1bWJzXCIsXHJcbiAgICAgIFwiY2xvc2VcIlxyXG4gICAgXSxcclxuXHJcbiAgICAvLyBEZXRlY3QgXCJpZGxlXCIgdGltZSBpbiBzZWNvbmRzXHJcbiAgICBpZGxlVGltZTogMyxcclxuXHJcbiAgICAvLyBEaXNhYmxlIHJpZ2h0LWNsaWNrIGFuZCB1c2Ugc2ltcGxlIGltYWdlIHByb3RlY3Rpb24gZm9yIGltYWdlc1xyXG4gICAgcHJvdGVjdDogZmFsc2UsXHJcblxyXG4gICAgLy8gU2hvcnRjdXQgdG8gbWFrZSBjb250ZW50IFwibW9kYWxcIiAtIGRpc2FibGUga2V5Ym9hcmQgbmF2aWd0aW9uLCBoaWRlIGJ1dHRvbnMsIGV0Y1xyXG4gICAgbW9kYWw6IGZhbHNlLFxyXG5cclxuICAgIGltYWdlOiB7XHJcbiAgICAgIC8vIFdhaXQgZm9yIGltYWdlcyB0byBsb2FkIGJlZm9yZSBkaXNwbGF5aW5nXHJcbiAgICAgIC8vICAgdHJ1ZSAgLSB3YWl0IGZvciBpbWFnZSB0byBsb2FkIGFuZCB0aGVuIGRpc3BsYXk7XHJcbiAgICAgIC8vICAgZmFsc2UgLSBkaXNwbGF5IHRodW1ibmFpbCBhbmQgbG9hZCB0aGUgZnVsbC1zaXplZCBpbWFnZSBvdmVyIHRvcCxcclxuICAgICAgLy8gICAgICAgICAgIHJlcXVpcmVzIHByZWRlZmluZWQgaW1hZ2UgZGltZW5zaW9ucyAoYGRhdGEtd2lkdGhgIGFuZCBgZGF0YS1oZWlnaHRgIGF0dHJpYnV0ZXMpXHJcbiAgICAgIHByZWxvYWQ6IGZhbHNlXHJcbiAgICB9LFxyXG5cclxuICAgIGFqYXg6IHtcclxuICAgICAgLy8gT2JqZWN0IGNvbnRhaW5pbmcgc2V0dGluZ3MgZm9yIGFqYXggcmVxdWVzdFxyXG4gICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgIC8vIFRoaXMgaGVscHMgdG8gaW5kaWNhdGUgdGhhdCByZXF1ZXN0IGNvbWVzIGZyb20gdGhlIG1vZGFsXHJcbiAgICAgICAgLy8gRmVlbCBmcmVlIHRvIGNoYW5nZSBuYW1pbmdcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICBmYW5jeWJveDogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBpZnJhbWU6IHtcclxuICAgICAgLy8gSWZyYW1lIHRlbXBsYXRlXHJcbiAgICAgIHRwbDogJzxpZnJhbWUgaWQ9XCJmYW5jeWJveC1mcmFtZXtybmR9XCIgbmFtZT1cImZhbmN5Ym94LWZyYW1le3JuZH1cIiBjbGFzcz1cImZhbmN5Ym94LWlmcmFtZVwiIGFsbG93ZnVsbHNjcmVlbj1cImFsbG93ZnVsbHNjcmVlblwiIGFsbG93PVwiYXV0b3BsYXk7IGZ1bGxzY3JlZW5cIiBzcmM9XCJcIj48L2lmcmFtZT4nLFxyXG5cclxuICAgICAgLy8gUHJlbG9hZCBpZnJhbWUgYmVmb3JlIGRpc3BsYXlpbmcgaXRcclxuICAgICAgLy8gVGhpcyBhbGxvd3MgdG8gY2FsY3VsYXRlIGlmcmFtZSBjb250ZW50IHdpZHRoIGFuZCBoZWlnaHRcclxuICAgICAgLy8gKG5vdGU6IER1ZSB0byBcIlNhbWUgT3JpZ2luIFBvbGljeVwiLCB5b3UgY2FuJ3QgZ2V0IGNyb3NzIGRvbWFpbiBkYXRhKS5cclxuICAgICAgcHJlbG9hZDogdHJ1ZSxcclxuXHJcbiAgICAgIC8vIEN1c3RvbSBDU1Mgc3R5bGluZyBmb3IgaWZyYW1lIHdyYXBwaW5nIGVsZW1lbnRcclxuICAgICAgLy8gWW91IGNhbiB1c2UgdGhpcyB0byBzZXQgY3VzdG9tIGlmcmFtZSBkaW1lbnNpb25zXHJcbiAgICAgIGNzczoge30sXHJcblxyXG4gICAgICAvLyBJZnJhbWUgdGFnIGF0dHJpYnV0ZXNcclxuICAgICAgYXR0cjoge1xyXG4gICAgICAgIHNjcm9sbGluZzogXCJhdXRvXCJcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBGb3IgSFRNTDUgdmlkZW8gb25seVxyXG4gICAgdmlkZW86IHtcclxuICAgICAgdHBsOiAnPHZpZGVvIGNsYXNzPVwiZmFuY3lib3gtdmlkZW9cIiBjb250cm9scyBjb250cm9sc0xpc3Q9XCJub2Rvd25sb2FkXCIgcG9zdGVyPVwie3twb3N0ZXJ9fVwiPicgK1xyXG4gICAgICAgICc8c291cmNlIHNyYz1cInt7c3JjfX1cIiB0eXBlPVwie3tmb3JtYXR9fVwiIC8+JyArXHJcbiAgICAgICAgJ1NvcnJ5LCB5b3VyIGJyb3dzZXIgZG9lc25cXCd0IHN1cHBvcnQgZW1iZWRkZWQgdmlkZW9zLCA8YSBocmVmPVwie3tzcmN9fVwiPmRvd25sb2FkPC9hPiBhbmQgd2F0Y2ggd2l0aCB5b3VyIGZhdm9yaXRlIHZpZGVvIHBsYXllciEnICtcclxuICAgICAgICBcIjwvdmlkZW8+XCIsXHJcbiAgICAgIGZvcm1hdDogXCJcIiwgLy8gY3VzdG9tIHZpZGVvIGZvcm1hdFxyXG4gICAgICBhdXRvU3RhcnQ6IHRydWVcclxuICAgIH0sXHJcblxyXG4gICAgLy8gRGVmYXVsdCBjb250ZW50IHR5cGUgaWYgY2Fubm90IGJlIGRldGVjdGVkIGF1dG9tYXRpY2FsbHlcclxuICAgIGRlZmF1bHRUeXBlOiBcImltYWdlXCIsXHJcblxyXG4gICAgLy8gT3Blbi9jbG9zZSBhbmltYXRpb24gdHlwZVxyXG4gICAgLy8gUG9zc2libGUgdmFsdWVzOlxyXG4gICAgLy8gICBmYWxzZSAgICAgICAgICAgIC0gZGlzYWJsZVxyXG4gICAgLy8gICBcInpvb21cIiAgICAgICAgICAgLSB6b29tIGltYWdlcyBmcm9tL3RvIHRodW1ibmFpbFxyXG4gICAgLy8gICBcImZhZGVcIlxyXG4gICAgLy8gICBcInpvb20taW4tb3V0XCJcclxuICAgIC8vXHJcbiAgICBhbmltYXRpb25FZmZlY3Q6IFwiem9vbVwiLFxyXG5cclxuICAgIC8vIER1cmF0aW9uIGluIG1zIGZvciBvcGVuL2Nsb3NlIGFuaW1hdGlvblxyXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IDM2NixcclxuXHJcbiAgICAvLyBTaG91bGQgaW1hZ2UgY2hhbmdlIG9wYWNpdHkgd2hpbGUgem9vbWluZ1xyXG4gICAgLy8gSWYgb3BhY2l0eSBpcyBcImF1dG9cIiwgdGhlbiBvcGFjaXR5IHdpbGwgYmUgY2hhbmdlZCBpZiBpbWFnZSBhbmQgdGh1bWJuYWlsIGhhdmUgZGlmZmVyZW50IGFzcGVjdCByYXRpb3NcclxuICAgIHpvb21PcGFjaXR5OiBcImF1dG9cIixcclxuXHJcbiAgICAvLyBUcmFuc2l0aW9uIGVmZmVjdCBiZXR3ZWVuIHNsaWRlc1xyXG4gICAgLy9cclxuICAgIC8vIFBvc3NpYmxlIHZhbHVlczpcclxuICAgIC8vICAgZmFsc2UgICAgICAgICAgICAtIGRpc2FibGVcclxuICAgIC8vICAgXCJmYWRlJ1xyXG4gICAgLy8gICBcInNsaWRlJ1xyXG4gICAgLy8gICBcImNpcmN1bGFyJ1xyXG4gICAgLy8gICBcInR1YmUnXHJcbiAgICAvLyAgIFwiem9vbS1pbi1vdXQnXHJcbiAgICAvLyAgIFwicm90YXRlJ1xyXG4gICAgLy9cclxuICAgIHRyYW5zaXRpb25FZmZlY3Q6IFwiZmFkZVwiLFxyXG5cclxuICAgIC8vIER1cmF0aW9uIGluIG1zIGZvciB0cmFuc2l0aW9uIGFuaW1hdGlvblxyXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiAzNjYsXHJcblxyXG4gICAgLy8gQ3VzdG9tIENTUyBjbGFzcyBmb3Igc2xpZGUgZWxlbWVudFxyXG4gICAgc2xpZGVDbGFzczogXCJcIixcclxuXHJcbiAgICAvLyBDdXN0b20gQ1NTIGNsYXNzIGZvciBsYXlvdXRcclxuICAgIGJhc2VDbGFzczogXCJcIixcclxuXHJcbiAgICAvLyBCYXNlIHRlbXBsYXRlIGZvciBsYXlvdXRcclxuICAgIGJhc2VUcGw6ICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtY29udGFpbmVyXCIgcm9sZT1cImRpYWxvZ1wiIHRhYmluZGV4PVwiLTFcIj4nICtcclxuICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1iZ1wiPjwvZGl2PicgK1xyXG4gICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWlubmVyXCI+JyArXHJcbiAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtaW5mb2JhclwiPjxzcGFuIGRhdGEtZmFuY3lib3gtaW5kZXg+PC9zcGFuPiZuYnNwOy8mbmJzcDs8c3BhbiBkYXRhLWZhbmN5Ym94LWNvdW50Pjwvc3Bhbj48L2Rpdj4nICtcclxuICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC10b29sYmFyXCI+e3tidXR0b25zfX08L2Rpdj4nICtcclxuICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1uYXZpZ2F0aW9uXCI+e3thcnJvd3N9fTwvZGl2PicgK1xyXG4gICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXN0YWdlXCI+PC9kaXY+JyArXHJcbiAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtY2FwdGlvblwiPjxkaXYgY2xhc3M9XCJmYW5jeWJveC1jYXB0aW9uX19ib2R5XCI+PC9kaXY+PC9kaXY+JyArXHJcbiAgICAgIFwiPC9kaXY+XCIgK1xyXG4gICAgICBcIjwvZGl2PlwiLFxyXG5cclxuICAgIC8vIExvYWRpbmcgaW5kaWNhdG9yIHRlbXBsYXRlXHJcbiAgICBzcGlubmVyVHBsOiAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWxvYWRpbmdcIj48L2Rpdj4nLFxyXG5cclxuICAgIC8vIEVycm9yIG1lc3NhZ2UgdGVtcGxhdGVcclxuICAgIGVycm9yVHBsOiAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWVycm9yXCI+PHA+e3tFUlJPUn19PC9wPjwvZGl2PicsXHJcblxyXG4gICAgYnRuVHBsOiB7XHJcbiAgICAgIGRvd25sb2FkOiAnPGEgZG93bmxvYWQgZGF0YS1mYW5jeWJveC1kb3dubG9hZCBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWRvd25sb2FkXCIgdGl0bGU9XCJ7e0RPV05MT0FEfX1cIiBocmVmPVwiamF2YXNjcmlwdDo7XCI+JyArXHJcbiAgICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTE4LjYyIDE3LjA5VjE5SDUuMzh2LTEuOTF6bS0yLjk3LTYuOTZMMTcgMTEuNDVsLTUgNC44Ny01LTQuODcgMS4zNi0xLjMyIDIuNjggMi42NFY1aDEuOTJ2Ny43N3pcIi8+PC9zdmc+JyArXHJcbiAgICAgICAgXCI8L2E+XCIsXHJcblxyXG4gICAgICB6b29tOiAnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXpvb20gY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS16b29tXCIgdGl0bGU9XCJ7e1pPT019fVwiPicgK1xyXG4gICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xOC43IDE3LjNsLTMtM2E1LjkgNS45IDAgMCAwLS42LTcuNiA1LjkgNS45IDAgMCAwLTguNCAwIDUuOSA1LjkgMCAwIDAgMCA4LjQgNS45IDUuOSAwIDAgMCA3LjcuN2wzIDNhMSAxIDAgMCAwIDEuMyAwYy40LS41LjQtMSAwLTEuNXpNOC4xIDEzLjhhNCA0IDAgMCAxIDAtNS43IDQgNCAwIDAgMSA1LjcgMCA0IDQgMCAwIDEgMCA1LjcgNCA0IDAgMCAxLTUuNyAwelwiLz48L3N2Zz4nICtcclxuICAgICAgICBcIjwvYnV0dG9uPlwiLFxyXG5cclxuICAgICAgY2xvc2U6ICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtY2xvc2UgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1jbG9zZVwiIHRpdGxlPVwie3tDTE9TRX19XCI+JyArXHJcbiAgICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTEyIDEwLjZMNi42IDUuMiA1LjIgNi42bDUuNCA1LjQtNS40IDUuNCAxLjQgMS40IDUuNC01LjQgNS40IDUuNCAxLjQtMS40LTUuNC01LjQgNS40LTUuNC0xLjQtMS40LTUuNCA1LjR6XCIvPjwvc3ZnPicgK1xyXG4gICAgICAgIFwiPC9idXR0b24+XCIsXHJcblxyXG4gICAgICAvLyBBcnJvd3NcclxuICAgICAgYXJyb3dMZWZ0OiAnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXByZXYgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1hcnJvd19sZWZ0XCIgdGl0bGU9XCJ7e1BSRVZ9fVwiPicgK1xyXG4gICAgICAgICc8ZGl2PjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTExLjI4IDE1LjdsLTEuMzQgMS4zN0w1IDEybDQuOTQtNS4wNyAxLjM0IDEuMzgtMi42OCAyLjcySDE5djEuOTRIOC42elwiLz48L3N2Zz48L2Rpdj4nICtcclxuICAgICAgICBcIjwvYnV0dG9uPlwiLFxyXG5cclxuICAgICAgYXJyb3dSaWdodDogJzxidXR0b24gZGF0YS1mYW5jeWJveC1uZXh0IGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tYXJyb3dfcmlnaHRcIiB0aXRsZT1cInt7TkVYVH19XCI+JyArXHJcbiAgICAgICAgJzxkaXY+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTUuNCAxMi45N2wtMi42OCAyLjcyIDEuMzQgMS4zOEwxOSAxMmwtNC45NC01LjA3LTEuMzQgMS4zOCAyLjY4IDIuNzJINXYxLjk0elwiLz48L3N2Zz48L2Rpdj4nICtcclxuICAgICAgICBcIjwvYnV0dG9uPlwiLFxyXG5cclxuICAgICAgLy8gVGhpcyBzbWFsbCBjbG9zZSBidXR0b24gd2lsbCBiZSBhcHBlbmRlZCB0byB5b3VyIGh0bWwvaW5saW5lL2FqYXggY29udGVudCBieSBkZWZhdWx0LFxyXG4gICAgICAvLyBpZiBcInNtYWxsQnRuXCIgb3B0aW9uIGlzIG5vdCBzZXQgdG8gZmFsc2VcclxuICAgICAgc21hbGxCdG46ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWZhbmN5Ym94LWNsb3NlIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWNsb3NlLXNtYWxsXCIgdGl0bGU9XCJ7e0NMT1NFfX1cIj4nICtcclxuICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmVyc2lvbj1cIjFcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xMyAxMmw1LTUtMS0xLTUgNS01LTUtMSAxIDUgNS01IDUgMSAxIDUtNSA1IDUgMS0xelwiLz48L3N2Zz4nICtcclxuICAgICAgICBcIjwvYnV0dG9uPlwiXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENvbnRhaW5lciBpcyBpbmplY3RlZCBpbnRvIHRoaXMgZWxlbWVudFxyXG4gICAgcGFyZW50RWw6IFwiYm9keVwiLFxyXG5cclxuICAgIC8vIEhpZGUgYnJvd3NlciB2ZXJ0aWNhbCBzY3JvbGxiYXJzOyB1c2UgYXQgeW91ciBvd24gcmlza1xyXG4gICAgaGlkZVNjcm9sbGJhcjogdHJ1ZSxcclxuXHJcbiAgICAvLyBGb2N1cyBoYW5kbGluZ1xyXG4gICAgLy8gPT09PT09PT09PT09PT1cclxuXHJcbiAgICAvLyBUcnkgdG8gZm9jdXMgb24gdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50IGFmdGVyIG9wZW5pbmdcclxuICAgIGF1dG9Gb2N1czogdHJ1ZSxcclxuXHJcbiAgICAvLyBQdXQgZm9jdXMgYmFjayB0byBhY3RpdmUgZWxlbWVudCBhZnRlciBjbG9zaW5nXHJcbiAgICBiYWNrRm9jdXM6IHRydWUsXHJcblxyXG4gICAgLy8gRG8gbm90IGxldCB1c2VyIHRvIGZvY3VzIG9uIGVsZW1lbnQgb3V0c2lkZSBtb2RhbCBjb250ZW50XHJcbiAgICB0cmFwRm9jdXM6IHRydWUsXHJcblxyXG4gICAgLy8gTW9kdWxlIHNwZWNpZmljIG9wdGlvbnNcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgZnVsbFNjcmVlbjoge1xyXG4gICAgICBhdXRvU3RhcnQ6IGZhbHNlXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFNldCBgdG91Y2g6IGZhbHNlYCB0byBkaXNhYmxlIHBhbm5pbmcvc3dpcGluZ1xyXG4gICAgdG91Y2g6IHtcclxuICAgICAgdmVydGljYWw6IHRydWUsIC8vIEFsbG93IHRvIGRyYWcgY29udGVudCB2ZXJ0aWNhbGx5XHJcbiAgICAgIG1vbWVudHVtOiB0cnVlIC8vIENvbnRpbnVlIG1vdmVtZW50IGFmdGVyIHJlbGVhc2luZyBtb3VzZS90b3VjaCB3aGVuIHBhbm5pbmdcclxuICAgIH0sXHJcblxyXG4gICAgLy8gSGFzaCB2YWx1ZSB3aGVuIGluaXRpYWxpemluZyBtYW51YWxseSxcclxuICAgIC8vIHNldCBgZmFsc2VgIHRvIGRpc2FibGUgaGFzaCBjaGFuZ2VcclxuICAgIGhhc2g6IG51bGwsXHJcblxyXG4gICAgLy8gQ3VzdG9taXplIG9yIGFkZCBuZXcgbWVkaWEgdHlwZXNcclxuICAgIC8vIEV4YW1wbGU6XHJcbiAgICAvKlxyXG4gICAgICBtZWRpYSA6IHtcclxuICAgICAgICB5b3V0dWJlIDoge1xyXG4gICAgICAgICAgcGFyYW1zIDoge1xyXG4gICAgICAgICAgICBhdXRvcGxheSA6IDBcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICovXHJcbiAgICBtZWRpYToge30sXHJcblxyXG4gICAgc2xpZGVTaG93OiB7XHJcbiAgICAgIGF1dG9TdGFydDogZmFsc2UsXHJcbiAgICAgIHNwZWVkOiAzMDAwXHJcbiAgICB9LFxyXG5cclxuICAgIHRodW1iczoge1xyXG4gICAgICBhdXRvU3RhcnQ6IGZhbHNlLCAvLyBEaXNwbGF5IHRodW1ibmFpbHMgb24gb3BlbmluZ1xyXG4gICAgICBoaWRlT25DbG9zZTogdHJ1ZSwgLy8gSGlkZSB0aHVtYm5haWwgZ3JpZCB3aGVuIGNsb3NpbmcgYW5pbWF0aW9uIHN0YXJ0c1xyXG4gICAgICBwYXJlbnRFbDogXCIuZmFuY3lib3gtY29udGFpbmVyXCIsIC8vIENvbnRhaW5lciBpcyBpbmplY3RlZCBpbnRvIHRoaXMgZWxlbWVudFxyXG4gICAgICBheGlzOiBcInlcIiAvLyBWZXJ0aWNhbCAoeSkgb3IgaG9yaXpvbnRhbCAoeCkgc2Nyb2xsaW5nXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFVzZSBtb3VzZXdoZWVsIHRvIG5hdmlnYXRlIGdhbGxlcnlcclxuICAgIC8vIElmICdhdXRvJyAtIGVuYWJsZWQgZm9yIGltYWdlcyBvbmx5XHJcbiAgICB3aGVlbDogXCJhdXRvXCIsXHJcblxyXG4gICAgLy8gQ2FsbGJhY2tzXHJcbiAgICAvLz09PT09PT09PT1cclxuXHJcbiAgICAvLyBTZWUgRG9jdW1lbnRhdGlvbi9BUEkvRXZlbnRzIGZvciBtb3JlIGluZm9ybWF0aW9uXHJcbiAgICAvLyBFeGFtcGxlOlxyXG4gICAgLypcclxuICAgICAgYWZ0ZXJTaG93OiBmdW5jdGlvbiggaW5zdGFuY2UsIGN1cnJlbnQgKSB7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKCAnQ2xpY2tlZCBlbGVtZW50OicgKTtcclxuICAgICAgICBjb25zb2xlLmluZm8oIGN1cnJlbnQub3B0cy4kb3JpZyApO1xyXG4gICAgICB9XHJcbiAgICAqL1xyXG5cclxuICAgIG9uSW5pdDogJC5ub29wLCAvLyBXaGVuIGluc3RhbmNlIGhhcyBiZWVuIGluaXRpYWxpemVkXHJcblxyXG4gICAgYmVmb3JlTG9hZDogJC5ub29wLCAvLyBCZWZvcmUgdGhlIGNvbnRlbnQgb2YgYSBzbGlkZSBpcyBiZWluZyBsb2FkZWRcclxuICAgIGFmdGVyTG9hZDogJC5ub29wLCAvLyBXaGVuIHRoZSBjb250ZW50IG9mIGEgc2xpZGUgaXMgZG9uZSBsb2FkaW5nXHJcblxyXG4gICAgYmVmb3JlU2hvdzogJC5ub29wLCAvLyBCZWZvcmUgb3BlbiBhbmltYXRpb24gc3RhcnRzXHJcbiAgICBhZnRlclNob3c6ICQubm9vcCwgLy8gV2hlbiBjb250ZW50IGlzIGRvbmUgbG9hZGluZyBhbmQgYW5pbWF0aW5nXHJcblxyXG4gICAgYmVmb3JlQ2xvc2U6ICQubm9vcCwgLy8gQmVmb3JlIHRoZSBpbnN0YW5jZSBhdHRlbXB0cyB0byBjbG9zZS4gUmV0dXJuIGZhbHNlIHRvIGNhbmNlbCB0aGUgY2xvc2UuXHJcbiAgICBhZnRlckNsb3NlOiAkLm5vb3AsIC8vIEFmdGVyIGluc3RhbmNlIGhhcyBiZWVuIGNsb3NlZFxyXG5cclxuICAgIG9uQWN0aXZhdGU6ICQubm9vcCwgLy8gV2hlbiBpbnN0YW5jZSBpcyBicm91Z2h0IHRvIGZyb250XHJcbiAgICBvbkRlYWN0aXZhdGU6ICQubm9vcCwgLy8gV2hlbiBvdGhlciBpbnN0YW5jZSBoYXMgYmVlbiBhY3RpdmF0ZWRcclxuXHJcbiAgICAvLyBJbnRlcmFjdGlvblxyXG4gICAgLy8gPT09PT09PT09PT1cclxuXHJcbiAgICAvLyBVc2Ugb3B0aW9ucyBiZWxvdyB0byBjdXN0b21pemUgdGFrZW4gYWN0aW9uIHdoZW4gdXNlciBjbGlja3Mgb3IgZG91YmxlIGNsaWNrcyBvbiB0aGUgZmFuY3lCb3ggYXJlYSxcclxuICAgIC8vIGVhY2ggb3B0aW9uIGNhbiBiZSBzdHJpbmcgb3IgbWV0aG9kIHRoYXQgcmV0dXJucyB2YWx1ZS5cclxuICAgIC8vXHJcbiAgICAvLyBQb3NzaWJsZSB2YWx1ZXM6XHJcbiAgICAvLyAgIFwiY2xvc2VcIiAgICAgICAgICAgLSBjbG9zZSBpbnN0YW5jZVxyXG4gICAgLy8gICBcIm5leHRcIiAgICAgICAgICAgIC0gbW92ZSB0byBuZXh0IGdhbGxlcnkgaXRlbVxyXG4gICAgLy8gICBcIm5leHRPckNsb3NlXCIgICAgIC0gbW92ZSB0byBuZXh0IGdhbGxlcnkgaXRlbSBvciBjbG9zZSBpZiBnYWxsZXJ5IGhhcyBvbmx5IG9uZSBpdGVtXHJcbiAgICAvLyAgIFwidG9nZ2xlQ29udHJvbHNcIiAgLSBzaG93L2hpZGUgY29udHJvbHNcclxuICAgIC8vICAgXCJ6b29tXCIgICAgICAgICAgICAtIHpvb20gaW1hZ2UgKGlmIGxvYWRlZClcclxuICAgIC8vICAgZmFsc2UgICAgICAgICAgICAgLSBkbyBub3RoaW5nXHJcblxyXG4gICAgLy8gQ2xpY2tlZCBvbiB0aGUgY29udGVudFxyXG4gICAgY2xpY2tDb250ZW50OiBmdW5jdGlvbiAoY3VycmVudCwgZXZlbnQpIHtcclxuICAgICAgcmV0dXJuIGN1cnJlbnQudHlwZSA9PT0gXCJpbWFnZVwiID8gXCJ6b29tXCIgOiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2xpY2tlZCBvbiB0aGUgc2xpZGVcclxuICAgIGNsaWNrU2xpZGU6IFwiY2xvc2VcIixcclxuXHJcbiAgICAvLyBDbGlja2VkIG9uIHRoZSBiYWNrZ3JvdW5kIChiYWNrZHJvcCkgZWxlbWVudDtcclxuICAgIC8vIGlmIHlvdSBoYXZlIG5vdCBjaGFuZ2VkIHRoZSBsYXlvdXQsIHRoZW4gbW9zdCBsaWtlbHkgeW91IG5lZWQgdG8gdXNlIGBjbGlja1NsaWRlYCBvcHRpb25cclxuICAgIGNsaWNrT3V0c2lkZTogXCJjbG9zZVwiLFxyXG5cclxuICAgIC8vIFNhbWUgYXMgcHJldmlvdXMgdHdvLCBidXQgZm9yIGRvdWJsZSBjbGlja1xyXG4gICAgZGJsY2xpY2tDb250ZW50OiBmYWxzZSxcclxuICAgIGRibGNsaWNrU2xpZGU6IGZhbHNlLFxyXG4gICAgZGJsY2xpY2tPdXRzaWRlOiBmYWxzZSxcclxuXHJcbiAgICAvLyBDdXN0b20gb3B0aW9ucyB3aGVuIG1vYmlsZSBkZXZpY2UgaXMgZGV0ZWN0ZWRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIG1vYmlsZToge1xyXG4gICAgICBwcmV2ZW50Q2FwdGlvbk92ZXJsYXA6IGZhbHNlLFxyXG4gICAgICBpZGxlVGltZTogZmFsc2UsXHJcbiAgICAgIGNsaWNrQ29udGVudDogZnVuY3Rpb24gKGN1cnJlbnQsIGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQudHlwZSA9PT0gXCJpbWFnZVwiID8gXCJ0b2dnbGVDb250cm9sc1wiIDogZmFsc2U7XHJcbiAgICAgIH0sXHJcbiAgICAgIGNsaWNrU2xpZGU6IGZ1bmN0aW9uIChjdXJyZW50LCBldmVudCkge1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiA/IFwidG9nZ2xlQ29udHJvbHNcIiA6IFwiY2xvc2VcIjtcclxuICAgICAgfSxcclxuICAgICAgZGJsY2xpY2tDb250ZW50OiBmdW5jdGlvbiAoY3VycmVudCwgZXZlbnQpIHtcclxuICAgICAgICByZXR1cm4gY3VycmVudC50eXBlID09PSBcImltYWdlXCIgPyBcInpvb21cIiA6IGZhbHNlO1xyXG4gICAgICB9LFxyXG4gICAgICBkYmxjbGlja1NsaWRlOiBmdW5jdGlvbiAoY3VycmVudCwgZXZlbnQpIHtcclxuICAgICAgICByZXR1cm4gY3VycmVudC50eXBlID09PSBcImltYWdlXCIgPyBcInpvb21cIiA6IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEludGVybmF0aW9uYWxpemF0aW9uXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGxhbmc6IFwiZW5cIixcclxuICAgIGkxOG46IHtcclxuICAgICAgZW46IHtcclxuICAgICAgICBDTE9TRTogXCJDbG9zZVwiLFxyXG4gICAgICAgIE5FWFQ6IFwiTmV4dFwiLFxyXG4gICAgICAgIFBSRVY6IFwiUHJldmlvdXNcIixcclxuICAgICAgICBFUlJPUjogXCJUaGUgcmVxdWVzdGVkIGNvbnRlbnQgY2Fubm90IGJlIGxvYWRlZC4gPGJyLz4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIixcclxuICAgICAgICBQTEFZX1NUQVJUOiBcIlN0YXJ0IHNsaWRlc2hvd1wiLFxyXG4gICAgICAgIFBMQVlfU1RPUDogXCJQYXVzZSBzbGlkZXNob3dcIixcclxuICAgICAgICBGVUxMX1NDUkVFTjogXCJGdWxsIHNjcmVlblwiLFxyXG4gICAgICAgIFRIVU1CUzogXCJUaHVtYm5haWxzXCIsXHJcbiAgICAgICAgRE9XTkxPQUQ6IFwiRG93bmxvYWRcIixcclxuICAgICAgICBTSEFSRTogXCJTaGFyZVwiLFxyXG4gICAgICAgIFpPT006IFwiWm9vbVwiXHJcbiAgICAgIH0sXHJcbiAgICAgIGRlOiB7XHJcbiAgICAgICAgQ0xPU0U6IFwiU2NobGllJnN6bGlnO2VuXCIsXHJcbiAgICAgICAgTkVYVDogXCJXZWl0ZXJcIixcclxuICAgICAgICBQUkVWOiBcIlp1ciZ1dW1sO2NrXCIsXHJcbiAgICAgICAgRVJST1I6IFwiRGllIGFuZ2Vmb3JkZXJ0ZW4gRGF0ZW4ga29ubnRlbiBuaWNodCBnZWxhZGVuIHdlcmRlbi4gPGJyLz4gQml0dGUgdmVyc3VjaGVuIFNpZSBlcyBzcCZhdW1sO3RlciBub2NobWFsLlwiLFxyXG4gICAgICAgIFBMQVlfU1RBUlQ6IFwiRGlhc2NoYXUgc3RhcnRlblwiLFxyXG4gICAgICAgIFBMQVlfU1RPUDogXCJEaWFzY2hhdSBiZWVuZGVuXCIsXHJcbiAgICAgICAgRlVMTF9TQ1JFRU46IFwiVm9sbGJpbGRcIixcclxuICAgICAgICBUSFVNQlM6IFwiVm9yc2NoYXViaWxkZXJcIixcclxuICAgICAgICBET1dOTE9BRDogXCJIZXJ1bnRlcmxhZGVuXCIsXHJcbiAgICAgICAgU0hBUkU6IFwiVGVpbGVuXCIsXHJcbiAgICAgICAgWk9PTTogXCJWZXJnciZvdW1sOyZzemxpZztlcm5cIlxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gRmV3IHVzZWZ1bCB2YXJpYWJsZXMgYW5kIG1ldGhvZHNcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICB2YXIgJFcgPSAkKHdpbmRvdyk7XHJcbiAgdmFyICREID0gJChkb2N1bWVudCk7XHJcblxyXG4gIHZhciBjYWxsZWQgPSAwO1xyXG5cclxuICAvLyBDaGVjayBpZiBhbiBvYmplY3QgaXMgYSBqUXVlcnkgb2JqZWN0IGFuZCBub3QgYSBuYXRpdmUgSmF2YVNjcmlwdCBvYmplY3RcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICB2YXIgaXNRdWVyeSA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHJldHVybiBvYmogJiYgb2JqLmhhc093blByb3BlcnR5ICYmIG9iaiBpbnN0YW5jZW9mICQ7XHJcbiAgfTtcclxuXHJcbiAgLy8gSGFuZGxlIG11bHRpcGxlIGJyb3dzZXJzIGZvciBcInJlcXVlc3RBbmltYXRpb25GcmFtZVwiIGFuZCBcImNhbmNlbEFuaW1hdGlvbkZyYW1lXCJcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgdmFyIHJlcXVlc3RBRnJhbWUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgLy8gaWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBzZXRUaW1lb3V0XHJcbiAgICAgIGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9KSgpO1xyXG5cclxuICB2YXIgY2FuY2VsQUZyYW1lID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHdpbmRvdy5vQ2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChpZCk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfSkoKTtcclxuXHJcbiAgLy8gRGV0ZWN0IHRoZSBzdXBwb3J0ZWQgdHJhbnNpdGlvbi1lbmQgZXZlbnQgcHJvcGVydHkgbmFtZVxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICB2YXIgdHJhbnNpdGlvbkVuZCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmFrZWVsZW1lbnRcIiksXHJcbiAgICAgIHQ7XHJcblxyXG4gICAgdmFyIHRyYW5zaXRpb25zID0ge1xyXG4gICAgICB0cmFuc2l0aW9uOiBcInRyYW5zaXRpb25lbmRcIixcclxuICAgICAgT1RyYW5zaXRpb246IFwib1RyYW5zaXRpb25FbmRcIixcclxuICAgICAgTW96VHJhbnNpdGlvbjogXCJ0cmFuc2l0aW9uZW5kXCIsXHJcbiAgICAgIFdlYmtpdFRyYW5zaXRpb246IFwid2Via2l0VHJhbnNpdGlvbkVuZFwiXHJcbiAgICB9O1xyXG5cclxuICAgIGZvciAodCBpbiB0cmFuc2l0aW9ucykge1xyXG4gICAgICBpZiAoZWwuc3R5bGVbdF0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiB0cmFuc2l0aW9uc1t0XTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBcInRyYW5zaXRpb25lbmRcIjtcclxuICB9KSgpO1xyXG5cclxuICAvLyBGb3JjZSByZWRyYXcgb24gYW4gZWxlbWVudC5cclxuICAvLyBUaGlzIGhlbHBzIGluIGNhc2VzIHdoZXJlIHRoZSBicm93c2VyIGRvZXNuJ3QgcmVkcmF3IGFuIHVwZGF0ZWQgZWxlbWVudCBwcm9wZXJseVxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgdmFyIGZvcmNlUmVkcmF3ID0gZnVuY3Rpb24gKCRlbCkge1xyXG4gICAgcmV0dXJuICRlbCAmJiAkZWwubGVuZ3RoICYmICRlbFswXS5vZmZzZXRIZWlnaHQ7XHJcbiAgfTtcclxuXHJcbiAgLy8gRXhjbHVkZSBhcnJheSAoYGJ1dHRvbnNgKSBvcHRpb25zIGZyb20gZGVlcCBtZXJnaW5nXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgdmFyIG1lcmdlT3B0cyA9IGZ1bmN0aW9uIChvcHRzMSwgb3B0czIpIHtcclxuICAgIHZhciByZXogPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0czEsIG9wdHMyKTtcclxuXHJcbiAgICAkLmVhY2gob3B0czIsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgIGlmICgkLmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV6W2tleV0gPSB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlejtcclxuICB9O1xyXG5cclxuICAvLyBIb3cgbXVjaCBvZiBhbiBlbGVtZW50IGlzIHZpc2libGUgaW4gdmlld3BvcnRcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgdmFyIGluVmlld3BvcnQgPSBmdW5jdGlvbiAoZWxlbSkge1xyXG4gICAgdmFyIGVsZW1DZW50ZXIsIHJlejtcclxuXHJcbiAgICBpZiAoIWVsZW0gfHwgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgJChcIi5mYW5jeWJveC1jb250YWluZXJcIikuY3NzKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xyXG5cclxuICAgIGVsZW1DZW50ZXIgPSB7XHJcbiAgICAgIHg6IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCArIGVsZW0ub2Zmc2V0V2lkdGggLyAyLFxyXG4gICAgICB5OiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArIGVsZW0ub2Zmc2V0SGVpZ2h0IC8gMlxyXG4gICAgfTtcclxuXHJcbiAgICByZXogPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KGVsZW1DZW50ZXIueCwgZWxlbUNlbnRlci55KSA9PT0gZWxlbTtcclxuXHJcbiAgICAkKFwiLmZhbmN5Ym94LWNvbnRhaW5lclwiKS5jc3MoXCJwb2ludGVyLWV2ZW50c1wiLCBcIlwiKTtcclxuXHJcbiAgICByZXR1cm4gcmV6O1xyXG4gIH07XHJcblxyXG4gIC8vIENsYXNzIGRlZmluaXRpb25cclxuICAvLyA9PT09PT09PT09PT09PT09XHJcblxyXG4gIHZhciBGYW5jeUJveCA9IGZ1bmN0aW9uIChjb250ZW50LCBvcHRzLCBpbmRleCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHNlbGYub3B0cyA9IG1lcmdlT3B0cyh7XHJcbiAgICAgIGluZGV4OiBpbmRleFxyXG4gICAgfSwgJC5mYW5jeWJveC5kZWZhdWx0cyk7XHJcblxyXG4gICAgaWYgKCQuaXNQbGFpbk9iamVjdChvcHRzKSkge1xyXG4gICAgICBzZWxmLm9wdHMgPSBtZXJnZU9wdHMoc2VsZi5vcHRzLCBvcHRzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoJC5mYW5jeWJveC5pc01vYmlsZSkge1xyXG4gICAgICBzZWxmLm9wdHMgPSBtZXJnZU9wdHMoc2VsZi5vcHRzLCBzZWxmLm9wdHMubW9iaWxlKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLmlkID0gc2VsZi5vcHRzLmlkIHx8ICsrY2FsbGVkO1xyXG5cclxuICAgIHNlbGYuY3VyckluZGV4ID0gcGFyc2VJbnQoc2VsZi5vcHRzLmluZGV4LCAxMCkgfHwgMDtcclxuICAgIHNlbGYucHJldkluZGV4ID0gbnVsbDtcclxuXHJcbiAgICBzZWxmLnByZXZQb3MgPSBudWxsO1xyXG4gICAgc2VsZi5jdXJyUG9zID0gMDtcclxuXHJcbiAgICBzZWxmLmZpcnN0UnVuID0gdHJ1ZTtcclxuXHJcbiAgICAvLyBBbGwgZ3JvdXAgaXRlbXNcclxuICAgIHNlbGYuZ3JvdXAgPSBbXTtcclxuXHJcbiAgICAvLyBFeGlzdGluZyBzbGlkZXMgKGZvciBjdXJyZW50LCBuZXh0IGFuZCBwcmV2aW91cyBnYWxsZXJ5IGl0ZW1zKVxyXG4gICAgc2VsZi5zbGlkZXMgPSB7fTtcclxuXHJcbiAgICAvLyBDcmVhdGUgZ3JvdXAgZWxlbWVudHNcclxuICAgIHNlbGYuYWRkQ29udGVudChjb250ZW50KTtcclxuXHJcbiAgICBpZiAoIXNlbGYuZ3JvdXAubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLmluaXQoKTtcclxuICB9O1xyXG5cclxuICAkLmV4dGVuZChGYW5jeUJveC5wcm90b3R5cGUsIHtcclxuICAgIC8vIENyZWF0ZSBET00gc3RydWN0dXJlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGZpcnN0SXRlbSA9IHNlbGYuZ3JvdXBbc2VsZi5jdXJySW5kZXhdLFxyXG4gICAgICAgIGZpcnN0SXRlbU9wdHMgPSBmaXJzdEl0ZW0ub3B0cyxcclxuICAgICAgICAkY29udGFpbmVyLFxyXG4gICAgICAgIGJ1dHRvblN0cjtcclxuXHJcbiAgICAgIGlmIChmaXJzdEl0ZW1PcHRzLmNsb3NlRXhpc3RpbmcpIHtcclxuICAgICAgICAkLmZhbmN5Ym94LmNsb3NlKHRydWUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBIaWRlIHNjcm9sbGJhcnNcclxuICAgICAgLy8gPT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcImZhbmN5Ym94LWFjdGl2ZVwiKTtcclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICAhJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpICYmXHJcbiAgICAgICAgZmlyc3RJdGVtT3B0cy5oaWRlU2Nyb2xsYmFyICE9PSBmYWxzZSAmJlxyXG4gICAgICAgICEkLmZhbmN5Ym94LmlzTW9iaWxlICYmXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQgPiB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgICAgKSB7XHJcbiAgICAgICAgJChcImhlYWRcIikuYXBwZW5kKFxyXG4gICAgICAgICAgJzxzdHlsZSBpZD1cImZhbmN5Ym94LXN0eWxlLW5vc2Nyb2xsXCIgdHlwZT1cInRleHQvY3NzXCI+LmNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhcnttYXJnaW4tcmlnaHQ6JyArXHJcbiAgICAgICAgICAod2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpICtcclxuICAgICAgICAgIFwicHg7fTwvc3R5bGU+XCJcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcImNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhclwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQnVpbGQgaHRtbCBtYXJrdXAgYW5kIHNldCByZWZlcmVuY2VzXHJcbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgLy8gQnVpbGQgaHRtbCBjb2RlIGZvciBidXR0b25zIGFuZCBpbnNlcnQgaW50byBtYWluIHRlbXBsYXRlXHJcbiAgICAgIGJ1dHRvblN0ciA9IFwiXCI7XHJcblxyXG4gICAgICAkLmVhY2goZmlyc3RJdGVtT3B0cy5idXR0b25zLCBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XHJcbiAgICAgICAgYnV0dG9uU3RyICs9IGZpcnN0SXRlbU9wdHMuYnRuVHBsW3ZhbHVlXSB8fCBcIlwiO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIENyZWF0ZSBtYXJrdXAgZnJvbSBiYXNlIHRlbXBsYXRlLCBpdCB3aWxsIGJlIGluaXRpYWxseSBoaWRkZW4gdG9cclxuICAgICAgLy8gYXZvaWQgdW5uZWNlc3Nhcnkgd29yayBsaWtlIHBhaW50aW5nIHdoaWxlIGluaXRpYWxpemluZyBpcyBub3QgY29tcGxldGVcclxuICAgICAgJGNvbnRhaW5lciA9ICQoXHJcbiAgICAgICAgICBzZWxmLnRyYW5zbGF0ZShcclxuICAgICAgICAgICAgc2VsZixcclxuICAgICAgICAgICAgZmlyc3RJdGVtT3B0cy5iYXNlVHBsXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKFwie3tidXR0b25zfX1cIiwgYnV0dG9uU3RyKVxyXG4gICAgICAgICAgICAucmVwbGFjZShcInt7YXJyb3dzfX1cIiwgZmlyc3RJdGVtT3B0cy5idG5UcGwuYXJyb3dMZWZ0ICsgZmlyc3RJdGVtT3B0cy5idG5UcGwuYXJyb3dSaWdodClcclxuICAgICAgICAgIClcclxuICAgICAgICApXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImZhbmN5Ym94LWNvbnRhaW5lci1cIiArIHNlbGYuaWQpXHJcbiAgICAgICAgLmFkZENsYXNzKGZpcnN0SXRlbU9wdHMuYmFzZUNsYXNzKVxyXG4gICAgICAgIC5kYXRhKFwiRmFuY3lCb3hcIiwgc2VsZilcclxuICAgICAgICAuYXBwZW5kVG8oZmlyc3RJdGVtT3B0cy5wYXJlbnRFbCk7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgb2JqZWN0IGhvbGRpbmcgcmVmZXJlbmNlcyB0byBqUXVlcnkgd3JhcHBlZCBub2Rlc1xyXG4gICAgICBzZWxmLiRyZWZzID0ge1xyXG4gICAgICAgIGNvbnRhaW5lcjogJGNvbnRhaW5lclxyXG4gICAgICB9O1xyXG5cclxuICAgICAgW1wiYmdcIiwgXCJpbm5lclwiLCBcImluZm9iYXJcIiwgXCJ0b29sYmFyXCIsIFwic3RhZ2VcIiwgXCJjYXB0aW9uXCIsIFwibmF2aWdhdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgc2VsZi4kcmVmc1tpdGVtXSA9ICRjb250YWluZXIuZmluZChcIi5mYW5jeWJveC1cIiArIGl0ZW0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNlbGYudHJpZ2dlcihcIm9uSW5pdFwiKTtcclxuXHJcbiAgICAgIC8vIEVuYWJsZSBldmVudHMsIGRlYWN0aXZlIHByZXZpb3VzIGluc3RhbmNlc1xyXG4gICAgICBzZWxmLmFjdGl2YXRlKCk7XHJcblxyXG4gICAgICAvLyBCdWlsZCBzbGlkZXMsIGxvYWQgYW5kIHJldmVhbCBjb250ZW50XHJcbiAgICAgIHNlbGYuanVtcFRvKHNlbGYuY3VyckluZGV4KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gU2ltcGxlIGkxOG4gc3VwcG9ydCAtIHJlcGxhY2VzIG9iamVjdCBrZXlzIGZvdW5kIGluIHRlbXBsYXRlXHJcbiAgICAvLyB3aXRoIGNvcnJlc3BvbmRpbmcgdmFsdWVzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIChvYmosIHN0cikge1xyXG4gICAgICB2YXIgYXJyID0gb2JqLm9wdHMuaTE4bltvYmoub3B0cy5sYW5nXSB8fCBvYmoub3B0cy5pMThuLmVuO1xyXG5cclxuICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHtcXHsoXFx3KylcXH1cXH0vZywgZnVuY3Rpb24gKG1hdGNoLCBuKSB7XHJcbiAgICAgICAgcmV0dXJuIGFycltuXSA9PT0gdW5kZWZpbmVkID8gbWF0Y2ggOiBhcnJbbl07XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBQb3B1bGF0ZSBjdXJyZW50IGdyb3VwIHdpdGggZnJlc2ggY29udGVudFxyXG4gICAgLy8gQ2hlY2sgaWYgZWFjaCBvYmplY3QgaGFzIHZhbGlkIHR5cGUgYW5kIGNvbnRlbnRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgYWRkQ29udGVudDogZnVuY3Rpb24gKGNvbnRlbnQpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGl0ZW1zID0gJC5tYWtlQXJyYXkoY29udGVudCksXHJcbiAgICAgICAgdGh1bWJzO1xyXG5cclxuICAgICAgJC5lYWNoKGl0ZW1zLCBmdW5jdGlvbiAoaSwgaXRlbSkge1xyXG4gICAgICAgIHZhciBvYmogPSB7fSxcclxuICAgICAgICAgIG9wdHMgPSB7fSxcclxuICAgICAgICAgICRpdGVtLFxyXG4gICAgICAgICAgdHlwZSxcclxuICAgICAgICAgIGZvdW5kLFxyXG4gICAgICAgICAgc3JjLFxyXG4gICAgICAgICAgc3JjUGFydHM7XHJcblxyXG4gICAgICAgIC8vIFN0ZXAgMSAtIE1ha2Ugc3VyZSB3ZSBoYXZlIGFuIG9iamVjdFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KGl0ZW0pKSB7XHJcbiAgICAgICAgICAvLyBXZSBwcm9iYWJseSBoYXZlIG1hbnVhbCB1c2FnZSBoZXJlLCBzb21ldGhpbmcgbGlrZVxyXG4gICAgICAgICAgLy8gJC5mYW5jeWJveC5vcGVuKCBbIHsgc3JjIDogXCJpbWFnZS5qcGdcIiwgdHlwZSA6IFwiaW1hZ2VcIiB9IF0gKVxyXG5cclxuICAgICAgICAgIG9iaiA9IGl0ZW07XHJcbiAgICAgICAgICBvcHRzID0gaXRlbS5vcHRzIHx8IGl0ZW07XHJcbiAgICAgICAgfSBlbHNlIGlmICgkLnR5cGUoaXRlbSkgPT09IFwib2JqZWN0XCIgJiYgJChpdGVtKS5sZW5ndGgpIHtcclxuICAgICAgICAgIC8vIEhlcmUgd2UgcHJvYmFibHkgaGF2ZSBqUXVlcnkgY29sbGVjdGlvbiByZXR1cm5lZCBieSBzb21lIHNlbGVjdG9yXHJcbiAgICAgICAgICAkaXRlbSA9ICQoaXRlbSk7XHJcblxyXG4gICAgICAgICAgLy8gU3VwcG9ydCBhdHRyaWJ1dGVzIGxpa2UgYGRhdGEtb3B0aW9ucz0ne1widG91Y2hcIiA6IGZhbHNlfSdgIGFuZCBgZGF0YS10b3VjaD0nZmFsc2UnYFxyXG4gICAgICAgICAgb3B0cyA9ICRpdGVtLmRhdGEoKSB8fCB7fTtcclxuICAgICAgICAgIG9wdHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0cywgb3B0cy5vcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAvLyBIZXJlIHdlIHN0b3JlIGNsaWNrZWQgZWxlbWVudFxyXG4gICAgICAgICAgb3B0cy4kb3JpZyA9ICRpdGVtO1xyXG5cclxuICAgICAgICAgIG9iai5zcmMgPSBzZWxmLm9wdHMuc3JjIHx8IG9wdHMuc3JjIHx8ICRpdGVtLmF0dHIoXCJocmVmXCIpO1xyXG5cclxuICAgICAgICAgIC8vIEFzc3VtZSB0aGF0IHNpbXBsZSBzeW50YXggaXMgdXNlZCwgZm9yIGV4YW1wbGU6XHJcbiAgICAgICAgICAvLyAgIGAkLmZhbmN5Ym94Lm9wZW4oICQoXCIjdGVzdFwiKSwge30gKTtgXHJcbiAgICAgICAgICBpZiAoIW9iai50eXBlICYmICFvYmouc3JjKSB7XHJcbiAgICAgICAgICAgIG9iai50eXBlID0gXCJpbmxpbmVcIjtcclxuICAgICAgICAgICAgb2JqLnNyYyA9IGl0ZW07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIEFzc3VtZSB3ZSBoYXZlIGEgc2ltcGxlIGh0bWwgY29kZSwgZm9yIGV4YW1wbGU6XHJcbiAgICAgICAgICAvLyAgICQuZmFuY3lib3gub3BlbiggJzxkaXY+PGgxPkhpITwvaDE+PC9kaXY+JyApO1xyXG4gICAgICAgICAgb2JqID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBcImh0bWxcIixcclxuICAgICAgICAgICAgc3JjOiBpdGVtICsgXCJcIlxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEVhY2ggZ2FsbGVyeSBvYmplY3QgaGFzIGZ1bGwgY29sbGVjdGlvbiBvZiBvcHRpb25zXHJcbiAgICAgICAgb2JqLm9wdHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgc2VsZi5vcHRzLCBvcHRzKTtcclxuXHJcbiAgICAgICAgLy8gRG8gbm90IG1lcmdlIGJ1dHRvbnMgYXJyYXlcclxuICAgICAgICBpZiAoJC5pc0FycmF5KG9wdHMuYnV0dG9ucykpIHtcclxuICAgICAgICAgIG9iai5vcHRzLmJ1dHRvbnMgPSBvcHRzLmJ1dHRvbnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJC5mYW5jeWJveC5pc01vYmlsZSAmJiBvYmoub3B0cy5tb2JpbGUpIHtcclxuICAgICAgICAgIG9iai5vcHRzID0gbWVyZ2VPcHRzKG9iai5vcHRzLCBvYmoub3B0cy5tb2JpbGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU3RlcCAyIC0gTWFrZSBzdXJlIHdlIGhhdmUgY29udGVudCB0eXBlLCBpZiBub3QgLSB0cnkgdG8gZ3Vlc3NcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICB0eXBlID0gb2JqLnR5cGUgfHwgb2JqLm9wdHMudHlwZTtcclxuICAgICAgICBzcmMgPSBvYmouc3JjIHx8IFwiXCI7XHJcblxyXG4gICAgICAgIGlmICghdHlwZSAmJiBzcmMpIHtcclxuICAgICAgICAgIGlmICgoZm91bmQgPSBzcmMubWF0Y2goL1xcLihtcDR8bW92fG9ndnx3ZWJtKSgoXFw/fCMpLiopPyQvaSkpKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBcInZpZGVvXCI7XHJcblxyXG4gICAgICAgICAgICBpZiAoIW9iai5vcHRzLnZpZGVvLmZvcm1hdCkge1xyXG4gICAgICAgICAgICAgIG9iai5vcHRzLnZpZGVvLmZvcm1hdCA9IFwidmlkZW8vXCIgKyAoZm91bmRbMV0gPT09IFwib2d2XCIgPyBcIm9nZ1wiIDogZm91bmRbMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHNyYy5tYXRjaCgvKF5kYXRhOmltYWdlXFwvW2EtejAtOStcXC89XSosKXwoXFwuKGpwKGV8Z3xlZyl8Z2lmfHBuZ3xibXB8d2VicHxzdmd8aWNvKSgoXFw/fCMpLiopPyQpL2kpKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBcImltYWdlXCI7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHNyYy5tYXRjaCgvXFwuKHBkZikoKFxcP3wjKS4qKT8kL2kpKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBcImlmcmFtZVwiO1xyXG4gICAgICAgICAgICBvYmogPSAkLmV4dGVuZCh0cnVlLCBvYmosIHtcclxuICAgICAgICAgICAgICBjb250ZW50VHlwZTogXCJwZGZcIixcclxuICAgICAgICAgICAgICBvcHRzOiB7XHJcbiAgICAgICAgICAgICAgICBpZnJhbWU6IHtcclxuICAgICAgICAgICAgICAgICAgcHJlbG9hZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChzcmMuY2hhckF0KDApID09PSBcIiNcIikge1xyXG4gICAgICAgICAgICB0eXBlID0gXCJpbmxpbmVcIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlKSB7XHJcbiAgICAgICAgICBvYmoudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNlbGYudHJpZ2dlcihcIm9iamVjdE5lZWRzVHlwZVwiLCBvYmopO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFvYmouY29udGVudFR5cGUpIHtcclxuICAgICAgICAgIG9iai5jb250ZW50VHlwZSA9ICQuaW5BcnJheShvYmoudHlwZSwgW1wiaHRtbFwiLCBcImlubGluZVwiLCBcImFqYXhcIl0pID4gLTEgPyBcImh0bWxcIiA6IG9iai50eXBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU3RlcCAzIC0gU29tZSBhZGp1c3RtZW50c1xyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgb2JqLmluZGV4ID0gc2VsZi5ncm91cC5sZW5ndGg7XHJcblxyXG4gICAgICAgIGlmIChvYmoub3B0cy5zbWFsbEJ0biA9PSBcImF1dG9cIikge1xyXG4gICAgICAgICAgb2JqLm9wdHMuc21hbGxCdG4gPSAkLmluQXJyYXkob2JqLnR5cGUsIFtcImh0bWxcIiwgXCJpbmxpbmVcIiwgXCJhamF4XCJdKSA+IC0xO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9iai5vcHRzLnRvb2xiYXIgPT09IFwiYXV0b1wiKSB7XHJcbiAgICAgICAgICBvYmoub3B0cy50b29sYmFyID0gIW9iai5vcHRzLnNtYWxsQnRuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRmluZCB0aHVtYm5haWwgaW1hZ2UsIGNoZWNrIGlmIGV4aXN0cyBhbmQgaWYgaXMgaW4gdGhlIHZpZXdwb3J0XHJcbiAgICAgICAgb2JqLiR0aHVtYiA9IG9iai5vcHRzLiR0aHVtYiB8fCBudWxsO1xyXG5cclxuICAgICAgICBpZiAob2JqLm9wdHMuJHRyaWdnZXIgJiYgb2JqLmluZGV4ID09PSBzZWxmLm9wdHMuaW5kZXgpIHtcclxuICAgICAgICAgIG9iai4kdGh1bWIgPSBvYmoub3B0cy4kdHJpZ2dlci5maW5kKFwiaW1nOmZpcnN0XCIpO1xyXG5cclxuICAgICAgICAgIGlmIChvYmouJHRodW1iLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBvYmoub3B0cy4kb3JpZyA9IG9iai5vcHRzLiR0cmlnZ2VyO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCEob2JqLiR0aHVtYiAmJiBvYmouJHRodW1iLmxlbmd0aCkgJiYgb2JqLm9wdHMuJG9yaWcpIHtcclxuICAgICAgICAgIG9iai4kdGh1bWIgPSBvYmoub3B0cy4kb3JpZy5maW5kKFwiaW1nOmZpcnN0XCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9iai4kdGh1bWIgJiYgIW9iai4kdGh1bWIubGVuZ3RoKSB7XHJcbiAgICAgICAgICBvYmouJHRodW1iID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9iai50aHVtYiA9IG9iai5vcHRzLnRodW1iIHx8IChvYmouJHRodW1iID8gb2JqLiR0aHVtYlswXS5zcmMgOiBudWxsKTtcclxuXHJcbiAgICAgICAgLy8gXCJjYXB0aW9uXCIgaXMgYSBcInNwZWNpYWxcIiBvcHRpb24sIGl0IGNhbiBiZSB1c2VkIHRvIGN1c3RvbWl6ZSBjYXB0aW9uIHBlciBnYWxsZXJ5IGl0ZW1cclxuICAgICAgICBpZiAoJC50eXBlKG9iai5vcHRzLmNhcHRpb24pID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgIG9iai5vcHRzLmNhcHRpb24gPSBvYmoub3B0cy5jYXB0aW9uLmFwcGx5KGl0ZW0sIFtzZWxmLCBvYmpdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgkLnR5cGUoc2VsZi5vcHRzLmNhcHRpb24pID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgIG9iai5vcHRzLmNhcHRpb24gPSBzZWxmLm9wdHMuY2FwdGlvbi5hcHBseShpdGVtLCBbc2VsZiwgb2JqXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgaGF2ZSBjYXB0aW9uIGFzIGEgc3RyaW5nIG9yIGpRdWVyeSBvYmplY3RcclxuICAgICAgICBpZiAoIShvYmoub3B0cy5jYXB0aW9uIGluc3RhbmNlb2YgJCkpIHtcclxuICAgICAgICAgIG9iai5vcHRzLmNhcHRpb24gPSBvYmoub3B0cy5jYXB0aW9uID09PSB1bmRlZmluZWQgPyBcIlwiIDogb2JqLm9wdHMuY2FwdGlvbiArIFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiB1cmwgY29udGFpbnMgXCJmaWx0ZXJcIiB1c2VkIHRvIGZpbHRlciB0aGUgY29udGVudFxyXG4gICAgICAgIC8vIEV4YW1wbGU6IFwiYWpheC5odG1sICNzb21ldGhpbmdcIlxyXG4gICAgICAgIGlmIChvYmoudHlwZSA9PT0gXCJhamF4XCIpIHtcclxuICAgICAgICAgIHNyY1BhcnRzID0gc3JjLnNwbGl0KC9cXHMrLywgMik7XHJcblxyXG4gICAgICAgICAgaWYgKHNyY1BhcnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgb2JqLnNyYyA9IHNyY1BhcnRzLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICBvYmoub3B0cy5maWx0ZXIgPSBzcmNQYXJ0cy5zaGlmdCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSGlkZSBhbGwgYnV0dG9ucyBhbmQgZGlzYWJsZSBpbnRlcmFjdGl2aXR5IGZvciBtb2RhbCBpdGVtc1xyXG4gICAgICAgIGlmIChvYmoub3B0cy5tb2RhbCkge1xyXG4gICAgICAgICAgb2JqLm9wdHMgPSAkLmV4dGVuZCh0cnVlLCBvYmoub3B0cywge1xyXG4gICAgICAgICAgICB0cmFwRm9jdXM6IHRydWUsXHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBidXR0b25zXHJcbiAgICAgICAgICAgIGluZm9iYXI6IDAsXHJcbiAgICAgICAgICAgIHRvb2xiYXI6IDAsXHJcblxyXG4gICAgICAgICAgICBzbWFsbEJ0bjogMCxcclxuXHJcbiAgICAgICAgICAgIC8vIERpc2FibGUga2V5Ym9hcmQgbmF2aWdhdGlvblxyXG4gICAgICAgICAgICBrZXlib2FyZDogMCxcclxuXHJcbiAgICAgICAgICAgIC8vIERpc2FibGUgc29tZSBtb2R1bGVzXHJcbiAgICAgICAgICAgIHNsaWRlU2hvdzogMCxcclxuICAgICAgICAgICAgZnVsbFNjcmVlbjogMCxcclxuICAgICAgICAgICAgdGh1bWJzOiAwLFxyXG4gICAgICAgICAgICB0b3VjaDogMCxcclxuXHJcbiAgICAgICAgICAgIC8vIERpc2FibGUgY2xpY2sgZXZlbnQgaGFuZGxlcnNcclxuICAgICAgICAgICAgY2xpY2tDb250ZW50OiBmYWxzZSxcclxuICAgICAgICAgICAgY2xpY2tTbGlkZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNsaWNrT3V0c2lkZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGRibGNsaWNrQ29udGVudDogZmFsc2UsXHJcbiAgICAgICAgICAgIGRibGNsaWNrU2xpZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBkYmxjbGlja091dHNpZGU6IGZhbHNlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFN0ZXAgNCAtIEFkZCBwcm9jZXNzZWQgb2JqZWN0IHRvIGdyb3VwXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgc2VsZi5ncm91cC5wdXNoKG9iaik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIGNvbnRyb2xzIGlmIGdhbGxlcnkgaXMgYWxyZWFkeSBvcGVuZWRcclxuICAgICAgaWYgKE9iamVjdC5rZXlzKHNlbGYuc2xpZGVzKS5sZW5ndGgpIHtcclxuICAgICAgICBzZWxmLnVwZGF0ZUNvbnRyb2xzKCk7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSB0aHVtYm5haWxzLCBpZiBuZWVkZWRcclxuICAgICAgICB0aHVtYnMgPSBzZWxmLlRodW1icztcclxuXHJcbiAgICAgICAgaWYgKHRodW1icyAmJiB0aHVtYnMuaXNBY3RpdmUpIHtcclxuICAgICAgICAgIHRodW1icy5jcmVhdGUoKTtcclxuXHJcbiAgICAgICAgICB0aHVtYnMuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gQXR0YWNoIGFuIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb25zIGZvcjpcclxuICAgIC8vICAgLSBuYXZpZ2F0aW9uIGJ1dHRvbnNcclxuICAgIC8vICAgLSBicm93c2VyIHNjcm9sbGluZywgcmVzaXppbmc7XHJcbiAgICAvLyAgIC0gZm9jdXNpbmdcclxuICAgIC8vICAgLSBrZXlib2FyZFxyXG4gICAgLy8gICAtIGRldGVjdGluZyBpbmFjdGl2aXR5XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGFkZEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICBzZWxmLnJlbW92ZUV2ZW50cygpO1xyXG5cclxuICAgICAgLy8gTWFrZSBuYXZpZ2F0aW9uIGVsZW1lbnRzIGNsaWNrYWJsZVxyXG4gICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lclxyXG4gICAgICAgIC5vbihcImNsaWNrLmZiLWNsb3NlXCIsIFwiW2RhdGEtZmFuY3lib3gtY2xvc2VdXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgIHNlbGYuY2xvc2UoZSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmZiLXByZXYgY2xpY2suZmItcHJldlwiLCBcIltkYXRhLWZhbmN5Ym94LXByZXZdXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgIHNlbGYucHJldmlvdXMoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuZmItbmV4dCBjbGljay5mYi1uZXh0XCIsIFwiW2RhdGEtZmFuY3lib3gtbmV4dF1cIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgc2VsZi5uZXh0KCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oXCJjbGljay5mYlwiLCBcIltkYXRhLWZhbmN5Ym94LXpvb21dXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAvLyBDbGljayBoYW5kbGVyIGZvciB6b29tIGJ1dHRvblxyXG4gICAgICAgICAgc2VsZltzZWxmLmlzU2NhbGVkRG93bigpID8gXCJzY2FsZVRvQWN0dWFsXCIgOiBcInNjYWxlVG9GaXRcIl0oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIC8vIEhhbmRsZSBwYWdlIHNjcm9sbGluZyBhbmQgYnJvd3NlciByZXNpemluZ1xyXG4gICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICRXLm9uKFwib3JpZW50YXRpb25jaGFuZ2UuZmIgcmVzaXplLmZiXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKGUgJiYgZS5vcmlnaW5hbEV2ZW50ICYmIGUub3JpZ2luYWxFdmVudC50eXBlID09PSBcInJlc2l6ZVwiKSB7XHJcbiAgICAgICAgICBpZiAoc2VsZi5yZXF1ZXN0SWQpIHtcclxuICAgICAgICAgICAgY2FuY2VsQUZyYW1lKHNlbGYucmVxdWVzdElkKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBzZWxmLnJlcXVlc3RJZCA9IHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZShlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoc2VsZi5jdXJyZW50ICYmIHNlbGYuY3VycmVudC50eXBlID09PSBcImlmcmFtZVwiKSB7XHJcbiAgICAgICAgICAgIHNlbGYuJHJlZnMuc3RhZ2UuaGlkZSgpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHNldFRpbWVvdXQoXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICBzZWxmLiRyZWZzLnN0YWdlLnNob3coKTtcclxuXHJcbiAgICAgICAgICAgICAgc2VsZi51cGRhdGUoZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICQuZmFuY3lib3guaXNNb2JpbGUgPyA2MDAgOiAyNTBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgICRELm9uKFwia2V5ZG93bi5mYlwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9ICQuZmFuY3lib3ggPyAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCkgOiBudWxsLFxyXG4gICAgICAgICAgY3VycmVudCA9IGluc3RhbmNlLmN1cnJlbnQsXHJcbiAgICAgICAgICBrZXljb2RlID0gZS5rZXlDb2RlIHx8IGUud2hpY2g7XHJcblxyXG4gICAgICAgIC8vIFRyYXAga2V5Ym9hcmQgZm9jdXMgaW5zaWRlIG9mIHRoZSBtb2RhbFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBpZiAoa2V5Y29kZSA9PSA5KSB7XHJcbiAgICAgICAgICBpZiAoY3VycmVudC5vcHRzLnRyYXBGb2N1cykge1xyXG4gICAgICAgICAgICBzZWxmLmZvY3VzKGUpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEVuYWJsZSBrZXlib2FyZCBuYXZpZ2F0aW9uXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgaWYgKCFjdXJyZW50Lm9wdHMua2V5Ym9hcmQgfHwgZS5jdHJsS2V5IHx8IGUuYWx0S2V5IHx8IGUuc2hpZnRLZXkgfHwgJChlLnRhcmdldCkuaXMoXCJpbnB1dCx0ZXh0YXJlYSx2aWRlbyxhdWRpbyxzZWxlY3RcIikpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEJhY2tzcGFjZSBhbmQgRXNjIGtleXNcclxuICAgICAgICBpZiAoa2V5Y29kZSA9PT0gOCB8fCBrZXljb2RlID09PSAyNykge1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgIHNlbGYuY2xvc2UoZSk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTGVmdCBhcnJvdyBhbmQgVXAgYXJyb3dcclxuICAgICAgICBpZiAoa2V5Y29kZSA9PT0gMzcgfHwga2V5Y29kZSA9PT0gMzgpIHtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICBzZWxmLnByZXZpb3VzKCk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmlnaCBhcnJvdyBhbmQgRG93biBhcnJvd1xyXG4gICAgICAgIGlmIChrZXljb2RlID09PSAzOSB8fCBrZXljb2RlID09PSA0MCkge1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgIHNlbGYubmV4dCgpO1xyXG5cclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYudHJpZ2dlcihcImFmdGVyS2V5ZG93blwiLCBlLCBrZXljb2RlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBIaWRlIGNvbnRyb2xzIGFmdGVyIHNvbWUgaW5hY3Rpdml0eSBwZXJpb2RcclxuICAgICAgaWYgKHNlbGYuZ3JvdXBbc2VsZi5jdXJySW5kZXhdLm9wdHMuaWRsZVRpbWUpIHtcclxuICAgICAgICBzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA9IDA7XHJcblxyXG4gICAgICAgICRELm9uKFxyXG4gICAgICAgICAgXCJtb3VzZW1vdmUuZmItaWRsZSBtb3VzZWxlYXZlLmZiLWlkbGUgbW91c2Vkb3duLmZiLWlkbGUgdG91Y2hzdGFydC5mYi1pZGxlIHRvdWNobW92ZS5mYi1pZGxlIHNjcm9sbC5mYi1pZGxlIGtleWRvd24uZmItaWRsZVwiLFxyXG4gICAgICAgICAgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlbGYuaXNJZGxlKSB7XHJcbiAgICAgICAgICAgICAgc2VsZi5zaG93Q29udHJvbHMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi5pc0lkbGUgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBzZWxmLmlkbGVJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBzZWxmLmlkbGVTZWNvbmRzQ291bnRlcisrO1xyXG5cclxuICAgICAgICAgIGlmIChzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA+PSBzZWxmLmdyb3VwW3NlbGYuY3VyckluZGV4XS5vcHRzLmlkbGVUaW1lICYmICFzZWxmLmlzRHJhZ2dpbmcpIHtcclxuICAgICAgICAgICAgc2VsZi5pc0lkbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA9IDA7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmhpZGVDb250cm9scygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFJlbW92ZSBldmVudHMgYWRkZWQgYnkgdGhlIGNvcmVcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICByZW1vdmVFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgJFcub2ZmKFwib3JpZW50YXRpb25jaGFuZ2UuZmIgcmVzaXplLmZiXCIpO1xyXG4gICAgICAkRC5vZmYoXCJrZXlkb3duLmZiIC5mYi1pZGxlXCIpO1xyXG5cclxuICAgICAgdGhpcy4kcmVmcy5jb250YWluZXIub2ZmKFwiLmZiLWNsb3NlIC5mYi1wcmV2IC5mYi1uZXh0XCIpO1xyXG5cclxuICAgICAgaWYgKHNlbGYuaWRsZUludGVydmFsKSB7XHJcbiAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoc2VsZi5pZGxlSW50ZXJ2YWwpO1xyXG5cclxuICAgICAgICBzZWxmLmlkbGVJbnRlcnZhbCA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2hhbmdlIHRvIHByZXZpb3VzIGdhbGxlcnkgaXRlbVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHByZXZpb3VzOiBmdW5jdGlvbiAoZHVyYXRpb24pIHtcclxuICAgICAgcmV0dXJuIHRoaXMuanVtcFRvKHRoaXMuY3VyclBvcyAtIDEsIGR1cmF0aW9uKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2hhbmdlIHRvIG5leHQgZ2FsbGVyeSBpdGVtXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBuZXh0OiBmdW5jdGlvbiAoZHVyYXRpb24pIHtcclxuICAgICAgcmV0dXJuIHRoaXMuanVtcFRvKHRoaXMuY3VyclBvcyArIDEsIGR1cmF0aW9uKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gU3dpdGNoIHRvIHNlbGVjdGVkIGdhbGxlcnkgaXRlbVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGp1bXBUbzogZnVuY3Rpb24gKHBvcywgZHVyYXRpb24pIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGdyb3VwTGVuID0gc2VsZi5ncm91cC5sZW5ndGgsXHJcbiAgICAgICAgZmlyc3RSdW4sXHJcbiAgICAgICAgaXNNb3ZlZCxcclxuICAgICAgICBsb29wLFxyXG4gICAgICAgIGN1cnJlbnQsXHJcbiAgICAgICAgcHJldmlvdXMsXHJcbiAgICAgICAgc2xpZGVQb3MsXHJcbiAgICAgICAgc3RhZ2VQb3MsXHJcbiAgICAgICAgcHJvcCxcclxuICAgICAgICBkaWZmO1xyXG5cclxuICAgICAgaWYgKHNlbGYuaXNEcmFnZ2luZyB8fCBzZWxmLmlzQ2xvc2luZyB8fCAoc2VsZi5pc0FuaW1hdGluZyAmJiBzZWxmLmZpcnN0UnVuKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gU2hvdWxkIGxvb3A/XHJcbiAgICAgIHBvcyA9IHBhcnNlSW50KHBvcywgMTApO1xyXG4gICAgICBsb29wID0gc2VsZi5jdXJyZW50ID8gc2VsZi5jdXJyZW50Lm9wdHMubG9vcCA6IHNlbGYub3B0cy5sb29wO1xyXG5cclxuICAgICAgaWYgKCFsb29wICYmIChwb3MgPCAwIHx8IHBvcyA+PSBncm91cExlbikpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIG9wZW5pbmcgZm9yIHRoZSBmaXJzdCB0aW1lOyB0aGlzIGhlbHBzIHRvIHNwZWVkIHRoaW5ncyB1cFxyXG4gICAgICBmaXJzdFJ1biA9IHNlbGYuZmlyc3RSdW4gPSAhT2JqZWN0LmtleXMoc2VsZi5zbGlkZXMpLmxlbmd0aDtcclxuXHJcbiAgICAgIC8vIENyZWF0ZSBzbGlkZXNcclxuICAgICAgcHJldmlvdXMgPSBzZWxmLmN1cnJlbnQ7XHJcblxyXG4gICAgICBzZWxmLnByZXZJbmRleCA9IHNlbGYuY3VyckluZGV4O1xyXG4gICAgICBzZWxmLnByZXZQb3MgPSBzZWxmLmN1cnJQb3M7XHJcblxyXG4gICAgICBjdXJyZW50ID0gc2VsZi5jcmVhdGVTbGlkZShwb3MpO1xyXG5cclxuICAgICAgaWYgKGdyb3VwTGVuID4gMSkge1xyXG4gICAgICAgIGlmIChsb29wIHx8IGN1cnJlbnQuaW5kZXggPCBncm91cExlbiAtIDEpIHtcclxuICAgICAgICAgIHNlbGYuY3JlYXRlU2xpZGUocG9zICsgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobG9vcCB8fCBjdXJyZW50LmluZGV4ID4gMCkge1xyXG4gICAgICAgICAgc2VsZi5jcmVhdGVTbGlkZShwb3MgLSAxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYuY3VycmVudCA9IGN1cnJlbnQ7XHJcbiAgICAgIHNlbGYuY3VyckluZGV4ID0gY3VycmVudC5pbmRleDtcclxuICAgICAgc2VsZi5jdXJyUG9zID0gY3VycmVudC5wb3M7XHJcblxyXG4gICAgICBzZWxmLnRyaWdnZXIoXCJiZWZvcmVTaG93XCIsIGZpcnN0UnVuKTtcclxuXHJcbiAgICAgIHNlbGYudXBkYXRlQ29udHJvbHMoKTtcclxuXHJcbiAgICAgIC8vIFZhbGlkYXRlIGR1cmF0aW9uIGxlbmd0aFxyXG4gICAgICBjdXJyZW50LmZvcmNlZER1cmF0aW9uID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgaWYgKCQuaXNOdW1lcmljKGR1cmF0aW9uKSkge1xyXG4gICAgICAgIGN1cnJlbnQuZm9yY2VkRHVyYXRpb24gPSBkdXJhdGlvbjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkdXJhdGlvbiA9IGN1cnJlbnQub3B0c1tmaXJzdFJ1biA/IFwiYW5pbWF0aW9uRHVyYXRpb25cIiA6IFwidHJhbnNpdGlvbkR1cmF0aW9uXCJdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkdXJhdGlvbiA9IHBhcnNlSW50KGR1cmF0aW9uLCAxMCk7XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiB1c2VyIGhhcyBzd2lwZWQgdGhlIHNsaWRlcyBvciBpZiBzdGlsbCBhbmltYXRpbmdcclxuICAgICAgaXNNb3ZlZCA9IHNlbGYuaXNNb3ZlZChjdXJyZW50KTtcclxuXHJcbiAgICAgIC8vIE1ha2Ugc3VyZSBjdXJyZW50IHNsaWRlIGlzIHZpc2libGVcclxuICAgICAgY3VycmVudC4kc2xpZGUuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tY3VycmVudFwiKTtcclxuXHJcbiAgICAgIC8vIEZyZXNoIHN0YXJ0IC0gcmV2ZWFsIGNvbnRhaW5lciwgY3VycmVudCBzbGlkZSBhbmQgc3RhcnQgbG9hZGluZyBjb250ZW50XHJcbiAgICAgIGlmIChmaXJzdFJ1bikge1xyXG4gICAgICAgIGlmIChjdXJyZW50Lm9wdHMuYW5pbWF0aW9uRWZmZWN0ICYmIGR1cmF0aW9uKSB7XHJcbiAgICAgICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lci5jc3MoXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIsIGR1cmF0aW9uICsgXCJtc1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLmFkZENsYXNzKFwiZmFuY3lib3gtaXMtb3BlblwiKS50cmlnZ2VyKFwiZm9jdXNcIik7XHJcblxyXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gbG9hZCBjb250ZW50IGludG8gc2xpZGVcclxuICAgICAgICAvLyBUaGlzIHdpbGwgbGF0ZXIgY2FsbCBgYWZ0ZXJMb2FkYCAtPiBgcmV2ZWFsQ29udGVudGBcclxuICAgICAgICBzZWxmLmxvYWRTbGlkZShjdXJyZW50KTtcclxuXHJcbiAgICAgICAgc2VsZi5wcmVsb2FkKFwiaW1hZ2VcIik7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gR2V0IGFjdHVhbCBzbGlkZS9zdGFnZSBwb3NpdGlvbnMgKGJlZm9yZSBjbGVhbmluZyB1cClcclxuICAgICAgc2xpZGVQb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShwcmV2aW91cy4kc2xpZGUpO1xyXG4gICAgICBzdGFnZVBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKHNlbGYuJHJlZnMuc3RhZ2UpO1xyXG5cclxuICAgICAgLy8gQ2xlYW4gdXAgYWxsIHNsaWRlc1xyXG4gICAgICAkLmVhY2goc2VsZi5zbGlkZXMsIGZ1bmN0aW9uIChpbmRleCwgc2xpZGUpIHtcclxuICAgICAgICAkLmZhbmN5Ym94LnN0b3Aoc2xpZGUuJHNsaWRlLCB0cnVlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAocHJldmlvdXMucG9zICE9PSBjdXJyZW50LnBvcykge1xyXG4gICAgICAgIHByZXZpb3VzLmlzQ29tcGxldGUgPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcHJldmlvdXMuJHNsaWRlLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWNvbXBsZXRlIGZhbmN5Ym94LXNsaWRlLS1jdXJyZW50XCIpO1xyXG5cclxuICAgICAgLy8gSWYgc2xpZGVzIGFyZSBvdXQgb2YgcGxhY2UsIHRoZW4gYW5pbWF0ZSB0aGVtIHRvIGNvcnJlY3QgcG9zaXRpb25cclxuICAgICAgaWYgKGlzTW92ZWQpIHtcclxuICAgICAgICAvLyBDYWxjdWxhdGUgaG9yaXpvbnRhbCBzd2lwZSBkaXN0YW5jZVxyXG4gICAgICAgIGRpZmYgPSBzbGlkZVBvcy5sZWZ0IC0gKHByZXZpb3VzLnBvcyAqIHNsaWRlUG9zLndpZHRoICsgcHJldmlvdXMucG9zICogcHJldmlvdXMub3B0cy5ndXR0ZXIpO1xyXG5cclxuICAgICAgICAkLmVhY2goc2VsZi5zbGlkZXMsIGZ1bmN0aW9uIChpbmRleCwgc2xpZGUpIHtcclxuICAgICAgICAgIHNsaWRlLiRzbGlkZS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWFuaW1hdGVkXCIpLnJlbW92ZUNsYXNzKGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoY2xhc3NOYW1lLm1hdGNoKC8oXnxcXHMpZmFuY3lib3gtZngtXFxTKy9nKSB8fCBbXSkuam9pbihcIiBcIik7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCBlYWNoIHNsaWRlIGlzIGluIGVxdWFsIGRpc3RhbmNlXHJcbiAgICAgICAgICAvLyBUaGlzIGlzIG1vc3RseSBuZWVkZWQgZm9yIGZyZXNobHkgYWRkZWQgc2xpZGVzLCBiZWNhdXNlIHRoZXkgYXJlIG5vdCB5ZXQgcG9zaXRpb25lZFxyXG4gICAgICAgICAgdmFyIGxlZnRQb3MgPSBzbGlkZS5wb3MgKiBzbGlkZVBvcy53aWR0aCArIHNsaWRlLnBvcyAqIHNsaWRlLm9wdHMuZ3V0dGVyO1xyXG5cclxuICAgICAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKHNsaWRlLiRzbGlkZSwge1xyXG4gICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgIGxlZnQ6IGxlZnRQb3MgLSBzdGFnZVBvcy5sZWZ0ICsgZGlmZlxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaWYgKHNsaWRlLnBvcyAhPT0gY3VycmVudC5wb3MpIHtcclxuICAgICAgICAgICAgc2xpZGUuJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLVwiICsgKHNsaWRlLnBvcyA+IGN1cnJlbnQucG9zID8gXCJuZXh0XCIgOiBcInByZXZpb3VzXCIpKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBSZWRyYXcgdG8gbWFrZSBzdXJlIHRoYXQgdHJhbnNpdGlvbiB3aWxsIHN0YXJ0XHJcbiAgICAgICAgICBmb3JjZVJlZHJhdyhzbGlkZS4kc2xpZGUpO1xyXG5cclxuICAgICAgICAgIC8vIEFuaW1hdGUgdGhlIHNsaWRlXHJcbiAgICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoXHJcbiAgICAgICAgICAgIHNsaWRlLiRzbGlkZSwge1xyXG4gICAgICAgICAgICAgIHRvcDogMCxcclxuICAgICAgICAgICAgICBsZWZ0OiAoc2xpZGUucG9zIC0gY3VycmVudC5wb3MpICogc2xpZGVQb3Mud2lkdGggKyAoc2xpZGUucG9zIC0gY3VycmVudC5wb3MpICogc2xpZGUub3B0cy5ndXR0ZXJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZHVyYXRpb24sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICBzbGlkZS4kc2xpZGVcclxuICAgICAgICAgICAgICAgIC5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IFwiXCJcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tbmV4dCBmYW5jeWJveC1zbGlkZS0tcHJldmlvdXNcIik7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcykge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIGlmIChkdXJhdGlvbiAmJiBjdXJyZW50Lm9wdHMudHJhbnNpdGlvbkVmZmVjdCkge1xyXG4gICAgICAgIC8vIFNldCB0cmFuc2l0aW9uIGVmZmVjdCBmb3IgcHJldmlvdXNseSBhY3RpdmUgc2xpZGVcclxuICAgICAgICBwcm9wID0gXCJmYW5jeWJveC1hbmltYXRlZCBmYW5jeWJveC1meC1cIiArIGN1cnJlbnQub3B0cy50cmFuc2l0aW9uRWZmZWN0O1xyXG5cclxuICAgICAgICBwcmV2aW91cy4kc2xpZGUuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tXCIgKyAocHJldmlvdXMucG9zID4gY3VycmVudC5wb3MgPyBcIm5leHRcIiA6IFwicHJldmlvdXNcIikpO1xyXG5cclxuICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoXHJcbiAgICAgICAgICBwcmV2aW91cy4kc2xpZGUsXHJcbiAgICAgICAgICBwcm9wLFxyXG4gICAgICAgICAgZHVyYXRpb24sXHJcbiAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHByZXZpb3VzLiRzbGlkZS5yZW1vdmVDbGFzcyhwcm9wKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91c1wiKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChjdXJyZW50LmlzTG9hZGVkKSB7XHJcbiAgICAgICAgc2VsZi5yZXZlYWxDb250ZW50KGN1cnJlbnQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYubG9hZFNsaWRlKGN1cnJlbnQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLnByZWxvYWQoXCJpbWFnZVwiKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ3JlYXRlIG5ldyBcInNsaWRlXCIgZWxlbWVudFxyXG4gICAgLy8gVGhlc2UgYXJlIGdhbGxlcnkgaXRlbXMgIHRoYXQgYXJlIGFjdHVhbGx5IGFkZGVkIHRvIERPTVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGNyZWF0ZVNsaWRlOiBmdW5jdGlvbiAocG9zKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAkc2xpZGUsXHJcbiAgICAgICAgaW5kZXg7XHJcblxyXG4gICAgICBpbmRleCA9IHBvcyAlIHNlbGYuZ3JvdXAubGVuZ3RoO1xyXG4gICAgICBpbmRleCA9IGluZGV4IDwgMCA/IHNlbGYuZ3JvdXAubGVuZ3RoICsgaW5kZXggOiBpbmRleDtcclxuXHJcbiAgICAgIGlmICghc2VsZi5zbGlkZXNbcG9zXSAmJiBzZWxmLmdyb3VwW2luZGV4XSkge1xyXG4gICAgICAgICRzbGlkZSA9ICQoJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1zbGlkZVwiPjwvZGl2PicpLmFwcGVuZFRvKHNlbGYuJHJlZnMuc3RhZ2UpO1xyXG5cclxuICAgICAgICBzZWxmLnNsaWRlc1twb3NdID0gJC5leHRlbmQodHJ1ZSwge30sIHNlbGYuZ3JvdXBbaW5kZXhdLCB7XHJcbiAgICAgICAgICBwb3M6IHBvcyxcclxuICAgICAgICAgICRzbGlkZTogJHNsaWRlLFxyXG4gICAgICAgICAgaXNMb2FkZWQ6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlU2xpZGUoc2VsZi5zbGlkZXNbcG9zXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBzZWxmLnNsaWRlc1twb3NdO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBTY2FsZSBpbWFnZSB0byB0aGUgYWN0dWFsIHNpemUgb2YgdGhlIGltYWdlO1xyXG4gICAgLy8geCBhbmQgeSB2YWx1ZXMgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBzbGlkZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHNjYWxlVG9BY3R1YWw6IGZ1bmN0aW9uICh4LCB5LCBkdXJhdGlvbikge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICAkY29udGVudCA9IGN1cnJlbnQuJGNvbnRlbnQsXHJcbiAgICAgICAgY2FudmFzV2lkdGggPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShjdXJyZW50LiRzbGlkZSkud2lkdGgsXHJcbiAgICAgICAgY2FudmFzSGVpZ2h0ID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoY3VycmVudC4kc2xpZGUpLmhlaWdodCxcclxuICAgICAgICBuZXdJbWdXaWR0aCA9IGN1cnJlbnQud2lkdGgsXHJcbiAgICAgICAgbmV3SW1nSGVpZ2h0ID0gY3VycmVudC5oZWlnaHQsXHJcbiAgICAgICAgaW1nUG9zLFxyXG4gICAgICAgIHBvc1gsXHJcbiAgICAgICAgcG9zWSxcclxuICAgICAgICBzY2FsZVgsXHJcbiAgICAgICAgc2NhbGVZO1xyXG5cclxuICAgICAgaWYgKHNlbGYuaXNBbmltYXRpbmcgfHwgc2VsZi5pc01vdmVkKCkgfHwgISRjb250ZW50IHx8ICEoY3VycmVudC50eXBlID09IFwiaW1hZ2VcIiAmJiBjdXJyZW50LmlzTG9hZGVkICYmICFjdXJyZW50Lmhhc0Vycm9yKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IHRydWU7XHJcblxyXG4gICAgICAkLmZhbmN5Ym94LnN0b3AoJGNvbnRlbnQpO1xyXG5cclxuICAgICAgeCA9IHggPT09IHVuZGVmaW5lZCA/IGNhbnZhc1dpZHRoICogMC41IDogeDtcclxuICAgICAgeSA9IHkgPT09IHVuZGVmaW5lZCA/IGNhbnZhc0hlaWdodCAqIDAuNSA6IHk7XHJcblxyXG4gICAgICBpbWdQb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZSgkY29udGVudCk7XHJcblxyXG4gICAgICBpbWdQb3MudG9wIC09ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKGN1cnJlbnQuJHNsaWRlKS50b3A7XHJcbiAgICAgIGltZ1Bvcy5sZWZ0IC09ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKGN1cnJlbnQuJHNsaWRlKS5sZWZ0O1xyXG5cclxuICAgICAgc2NhbGVYID0gbmV3SW1nV2lkdGggLyBpbWdQb3Mud2lkdGg7XHJcbiAgICAgIHNjYWxlWSA9IG5ld0ltZ0hlaWdodCAvIGltZ1Bvcy5oZWlnaHQ7XHJcblxyXG4gICAgICAvLyBHZXQgY2VudGVyIHBvc2l0aW9uIGZvciBvcmlnaW5hbCBpbWFnZVxyXG4gICAgICBwb3NYID0gY2FudmFzV2lkdGggKiAwLjUgLSBuZXdJbWdXaWR0aCAqIDAuNTtcclxuICAgICAgcG9zWSA9IGNhbnZhc0hlaWdodCAqIDAuNSAtIG5ld0ltZ0hlaWdodCAqIDAuNTtcclxuXHJcbiAgICAgIC8vIE1ha2Ugc3VyZSBpbWFnZSBkb2VzIG5vdCBtb3ZlIGF3YXkgZnJvbSBlZGdlc1xyXG4gICAgICBpZiAobmV3SW1nV2lkdGggPiBjYW52YXNXaWR0aCkge1xyXG4gICAgICAgIHBvc1ggPSBpbWdQb3MubGVmdCAqIHNjYWxlWCAtICh4ICogc2NhbGVYIC0geCk7XHJcblxyXG4gICAgICAgIGlmIChwb3NYID4gMCkge1xyXG4gICAgICAgICAgcG9zWCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocG9zWCA8IGNhbnZhc1dpZHRoIC0gbmV3SW1nV2lkdGgpIHtcclxuICAgICAgICAgIHBvc1ggPSBjYW52YXNXaWR0aCAtIG5ld0ltZ1dpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG5ld0ltZ0hlaWdodCA+IGNhbnZhc0hlaWdodCkge1xyXG4gICAgICAgIHBvc1kgPSBpbWdQb3MudG9wICogc2NhbGVZIC0gKHkgKiBzY2FsZVkgLSB5KTtcclxuXHJcbiAgICAgICAgaWYgKHBvc1kgPiAwKSB7XHJcbiAgICAgICAgICBwb3NZID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwb3NZIDwgY2FudmFzSGVpZ2h0IC0gbmV3SW1nSGVpZ2h0KSB7XHJcbiAgICAgICAgICBwb3NZID0gY2FudmFzSGVpZ2h0IC0gbmV3SW1nSGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi51cGRhdGVDdXJzb3IobmV3SW1nV2lkdGgsIG5ld0ltZ0hlaWdodCk7XHJcblxyXG4gICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoXHJcbiAgICAgICAgJGNvbnRlbnQsIHtcclxuICAgICAgICAgIHRvcDogcG9zWSxcclxuICAgICAgICAgIGxlZnQ6IHBvc1gsXHJcbiAgICAgICAgICBzY2FsZVg6IHNjYWxlWCxcclxuICAgICAgICAgIHNjYWxlWTogc2NhbGVZXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkdXJhdGlvbiB8fCAzNjYsXHJcbiAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIFN0b3Agc2xpZGVzaG93XHJcbiAgICAgIGlmIChzZWxmLlNsaWRlU2hvdyAmJiBzZWxmLlNsaWRlU2hvdy5pc0FjdGl2ZSkge1xyXG4gICAgICAgIHNlbGYuU2xpZGVTaG93LnN0b3AoKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBTY2FsZSBpbWFnZSB0byBmaXQgaW5zaWRlIHBhcmVudCBlbGVtZW50XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgc2NhbGVUb0ZpdDogZnVuY3Rpb24gKGR1cmF0aW9uKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBjdXJyZW50ID0gc2VsZi5jdXJyZW50LFxyXG4gICAgICAgICRjb250ZW50ID0gY3VycmVudC4kY29udGVudCxcclxuICAgICAgICBlbmQ7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc0FuaW1hdGluZyB8fCBzZWxmLmlzTW92ZWQoKSB8fCAhJGNvbnRlbnQgfHwgIShjdXJyZW50LnR5cGUgPT0gXCJpbWFnZVwiICYmIGN1cnJlbnQuaXNMb2FkZWQgJiYgIWN1cnJlbnQuaGFzRXJyb3IpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLmlzQW5pbWF0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICQuZmFuY3lib3guc3RvcCgkY29udGVudCk7XHJcblxyXG4gICAgICBlbmQgPSBzZWxmLmdldEZpdFBvcyhjdXJyZW50KTtcclxuXHJcbiAgICAgIHNlbGYudXBkYXRlQ3Vyc29yKGVuZC53aWR0aCwgZW5kLmhlaWdodCk7XHJcblxyXG4gICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoXHJcbiAgICAgICAgJGNvbnRlbnQsIHtcclxuICAgICAgICAgIHRvcDogZW5kLnRvcCxcclxuICAgICAgICAgIGxlZnQ6IGVuZC5sZWZ0LFxyXG4gICAgICAgICAgc2NhbGVYOiBlbmQud2lkdGggLyAkY29udGVudC53aWR0aCgpLFxyXG4gICAgICAgICAgc2NhbGVZOiBlbmQuaGVpZ2h0IC8gJGNvbnRlbnQuaGVpZ2h0KClcclxuICAgICAgICB9LFxyXG4gICAgICAgIGR1cmF0aW9uIHx8IDM2NixcclxuICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgaW1hZ2Ugc2l6ZSB0byBmaXQgaW5zaWRlIHZpZXdwb3J0XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgZ2V0Rml0UG9zOiBmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICRjb250ZW50ID0gc2xpZGUuJGNvbnRlbnQsXHJcbiAgICAgICAgJHNsaWRlID0gc2xpZGUuJHNsaWRlLFxyXG4gICAgICAgIHdpZHRoID0gc2xpZGUud2lkdGggfHwgc2xpZGUub3B0cy53aWR0aCxcclxuICAgICAgICBoZWlnaHQgPSBzbGlkZS5oZWlnaHQgfHwgc2xpZGUub3B0cy5oZWlnaHQsXHJcbiAgICAgICAgbWF4V2lkdGgsXHJcbiAgICAgICAgbWF4SGVpZ2h0LFxyXG4gICAgICAgIG1pblJhdGlvLFxyXG4gICAgICAgIGFzcGVjdFJhdGlvLFxyXG4gICAgICAgIHJleiA9IHt9O1xyXG5cclxuICAgICAgaWYgKCFzbGlkZS5pc0xvYWRlZCB8fCAhJGNvbnRlbnQgfHwgISRjb250ZW50Lmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbWF4V2lkdGggPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShzZWxmLiRyZWZzLnN0YWdlKS53aWR0aDtcclxuICAgICAgbWF4SGVpZ2h0ID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoc2VsZi4kcmVmcy5zdGFnZSkuaGVpZ2h0O1xyXG5cclxuICAgICAgbWF4V2lkdGggLT1cclxuICAgICAgICBwYXJzZUZsb2F0KCRzbGlkZS5jc3MoXCJwYWRkaW5nTGVmdFwiKSkgK1xyXG4gICAgICAgIHBhcnNlRmxvYXQoJHNsaWRlLmNzcyhcInBhZGRpbmdSaWdodFwiKSkgK1xyXG4gICAgICAgIHBhcnNlRmxvYXQoJGNvbnRlbnQuY3NzKFwibWFyZ2luTGVmdFwiKSkgK1xyXG4gICAgICAgIHBhcnNlRmxvYXQoJGNvbnRlbnQuY3NzKFwibWFyZ2luUmlnaHRcIikpO1xyXG5cclxuICAgICAgbWF4SGVpZ2h0IC09XHJcbiAgICAgICAgcGFyc2VGbG9hdCgkc2xpZGUuY3NzKFwicGFkZGluZ1RvcFwiKSkgK1xyXG4gICAgICAgIHBhcnNlRmxvYXQoJHNsaWRlLmNzcyhcInBhZGRpbmdCb3R0b21cIikpICtcclxuICAgICAgICBwYXJzZUZsb2F0KCRjb250ZW50LmNzcyhcIm1hcmdpblRvcFwiKSkgK1xyXG4gICAgICAgIHBhcnNlRmxvYXQoJGNvbnRlbnQuY3NzKFwibWFyZ2luQm90dG9tXCIpKTtcclxuXHJcbiAgICAgIGlmICghd2lkdGggfHwgIWhlaWdodCkge1xyXG4gICAgICAgIHdpZHRoID0gbWF4V2lkdGg7XHJcbiAgICAgICAgaGVpZ2h0ID0gbWF4SGVpZ2h0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBtaW5SYXRpbyA9IE1hdGgubWluKDEsIG1heFdpZHRoIC8gd2lkdGgsIG1heEhlaWdodCAvIGhlaWdodCk7XHJcblxyXG4gICAgICB3aWR0aCA9IG1pblJhdGlvICogd2lkdGg7XHJcbiAgICAgIGhlaWdodCA9IG1pblJhdGlvICogaGVpZ2h0O1xyXG5cclxuICAgICAgLy8gQWRqdXN0IHdpZHRoL2hlaWdodCB0byBwcmVjaXNlbHkgZml0IGludG8gY29udGFpbmVyXHJcbiAgICAgIGlmICh3aWR0aCA+IG1heFdpZHRoIC0gMC41KSB7XHJcbiAgICAgICAgd2lkdGggPSBtYXhXaWR0aDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGhlaWdodCA+IG1heEhlaWdodCAtIDAuNSkge1xyXG4gICAgICAgIGhlaWdodCA9IG1heEhlaWdodDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHNsaWRlLnR5cGUgPT09IFwiaW1hZ2VcIikge1xyXG4gICAgICAgIHJlei50b3AgPSBNYXRoLmZsb29yKChtYXhIZWlnaHQgLSBoZWlnaHQpICogMC41KSArIHBhcnNlRmxvYXQoJHNsaWRlLmNzcyhcInBhZGRpbmdUb3BcIikpO1xyXG4gICAgICAgIHJlei5sZWZ0ID0gTWF0aC5mbG9vcigobWF4V2lkdGggLSB3aWR0aCkgKiAwLjUpICsgcGFyc2VGbG9hdCgkc2xpZGUuY3NzKFwicGFkZGluZ0xlZnRcIikpO1xyXG4gICAgICB9IGVsc2UgaWYgKHNsaWRlLmNvbnRlbnRUeXBlID09PSBcInZpZGVvXCIpIHtcclxuICAgICAgICAvLyBGb3JjZSBhc3BlY3QgcmF0aW8gZm9yIHRoZSB2aWRlb1xyXG4gICAgICAgIC8vIFwiSSBzYXkgdGhlIHdob2xlIHdvcmxkIG11c3QgbGVhcm4gb2Ygb3VyIHBlYWNlZnVsIHdheXPigKYgYnkgZm9yY2UhXCJcclxuICAgICAgICBhc3BlY3RSYXRpbyA9IHNsaWRlLm9wdHMud2lkdGggJiYgc2xpZGUub3B0cy5oZWlnaHQgPyB3aWR0aCAvIGhlaWdodCA6IHNsaWRlLm9wdHMucmF0aW8gfHwgMTYgLyA5O1xyXG5cclxuICAgICAgICBpZiAoaGVpZ2h0ID4gd2lkdGggLyBhc3BlY3RSYXRpbykge1xyXG4gICAgICAgICAgaGVpZ2h0ID0gd2lkdGggLyBhc3BlY3RSYXRpbztcclxuICAgICAgICB9IGVsc2UgaWYgKHdpZHRoID4gaGVpZ2h0ICogYXNwZWN0UmF0aW8pIHtcclxuICAgICAgICAgIHdpZHRoID0gaGVpZ2h0ICogYXNwZWN0UmF0aW87XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXoud2lkdGggPSB3aWR0aDtcclxuICAgICAgcmV6LmhlaWdodCA9IGhlaWdodDtcclxuXHJcbiAgICAgIHJldHVybiByZXo7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFVwZGF0ZSBjb250ZW50IHNpemUgYW5kIHBvc2l0aW9uIGZvciBhbGwgc2xpZGVzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAkLmVhY2goc2VsZi5zbGlkZXMsIGZ1bmN0aW9uIChrZXksIHNsaWRlKSB7XHJcbiAgICAgICAgc2VsZi51cGRhdGVTbGlkZShzbGlkZSwgZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBVcGRhdGUgc2xpZGUgY29udGVudCBwb3NpdGlvbiBhbmQgc2l6ZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB1cGRhdGVTbGlkZTogZnVuY3Rpb24gKHNsaWRlLCBlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAkY29udGVudCA9IHNsaWRlICYmIHNsaWRlLiRjb250ZW50LFxyXG4gICAgICAgIHdpZHRoID0gc2xpZGUud2lkdGggfHwgc2xpZGUub3B0cy53aWR0aCxcclxuICAgICAgICBoZWlnaHQgPSBzbGlkZS5oZWlnaHQgfHwgc2xpZGUub3B0cy5oZWlnaHQsXHJcbiAgICAgICAgJHNsaWRlID0gc2xpZGUuJHNsaWRlO1xyXG5cclxuICAgICAgLy8gRmlyc3QsIHByZXZlbnQgY2FwdGlvbiBvdmVybGFwLCBpZiBuZWVkZWRcclxuICAgICAgc2VsZi5hZGp1c3RDYXB0aW9uKHNsaWRlKTtcclxuXHJcbiAgICAgIC8vIFRoZW4gcmVzaXplIGNvbnRlbnQgdG8gZml0IGluc2lkZSB0aGUgc2xpZGVcclxuICAgICAgaWYgKCRjb250ZW50ICYmICh3aWR0aCB8fCBoZWlnaHQgfHwgc2xpZGUuY29udGVudFR5cGUgPT09IFwidmlkZW9cIikgJiYgIXNsaWRlLmhhc0Vycm9yKSB7XHJcbiAgICAgICAgJC5mYW5jeWJveC5zdG9wKCRjb250ZW50KTtcclxuXHJcbiAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoJGNvbnRlbnQsIHNlbGYuZ2V0Rml0UG9zKHNsaWRlKSk7XHJcblxyXG4gICAgICAgIGlmIChzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcykge1xyXG4gICAgICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgIHNlbGYudXBkYXRlQ3Vyc29yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBUaGVuIHNvbWUgYWRqdXN0bWVudHNcclxuICAgICAgc2VsZi5hZGp1c3RMYXlvdXQoc2xpZGUpO1xyXG5cclxuICAgICAgaWYgKCRzbGlkZS5sZW5ndGgpIHtcclxuICAgICAgICAkc2xpZGUudHJpZ2dlcihcInJlZnJlc2hcIik7XHJcblxyXG4gICAgICAgIGlmIChzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcykge1xyXG4gICAgICAgICAgc2VsZi4kcmVmcy50b29sYmFyXHJcbiAgICAgICAgICAgIC5hZGQoc2VsZi4kcmVmcy5uYXZpZ2F0aW9uLmZpbmQoXCIuZmFuY3lib3gtYnV0dG9uLS1hcnJvd19yaWdodFwiKSlcclxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKFwiY29tcGVuc2F0ZS1mb3Itc2Nyb2xsYmFyXCIsICRzbGlkZS5nZXQoMCkuc2Nyb2xsSGVpZ2h0ID4gJHNsaWRlLmdldCgwKS5jbGllbnRIZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKFwib25VcGRhdGVcIiwgc2xpZGUsIGUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBIb3Jpem9udGFsbHkgY2VudGVyIHNsaWRlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgY2VudGVyU2xpZGU6IGZ1bmN0aW9uIChkdXJhdGlvbikge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICAkc2xpZGUgPSBjdXJyZW50LiRzbGlkZTtcclxuXHJcbiAgICAgIGlmIChzZWxmLmlzQ2xvc2luZyB8fCAhY3VycmVudCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgJHNsaWRlLnNpYmxpbmdzKCkuY3NzKHtcclxuICAgICAgICB0cmFuc2Zvcm06IFwiXCIsXHJcbiAgICAgICAgb3BhY2l0eTogXCJcIlxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgICRzbGlkZVxyXG4gICAgICAgIC5wYXJlbnQoKVxyXG4gICAgICAgIC5jaGlsZHJlbigpXHJcbiAgICAgICAgLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzIGZhbmN5Ym94LXNsaWRlLS1uZXh0XCIpO1xyXG5cclxuICAgICAgJC5mYW5jeWJveC5hbmltYXRlKFxyXG4gICAgICAgICRzbGlkZSwge1xyXG4gICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgbGVmdDogMCxcclxuICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICB9LFxyXG4gICAgICAgIGR1cmF0aW9uID09PSB1bmRlZmluZWQgPyAwIDogZHVyYXRpb24sXHJcbiAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgLy8gQ2xlYW4gdXBcclxuICAgICAgICAgICRzbGlkZS5jc3Moe1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IFwiXCIsXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IFwiXCJcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGlmICghY3VycmVudC5pc0NvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgIHNlbGYuY29tcGxldGUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGZhbHNlXHJcbiAgICAgICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENoZWNrIGlmIGN1cnJlbnQgc2xpZGUgaXMgbW92ZWQgKHN3aXBlZClcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBpc01vdmVkOiBmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgdmFyIGN1cnJlbnQgPSBzbGlkZSB8fCB0aGlzLmN1cnJlbnQsXHJcbiAgICAgICAgc2xpZGVQb3MsXHJcbiAgICAgICAgc3RhZ2VQb3M7XHJcblxyXG4gICAgICBpZiAoIWN1cnJlbnQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN0YWdlUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUodGhpcy4kcmVmcy5zdGFnZSk7XHJcbiAgICAgIHNsaWRlUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoY3VycmVudC4kc2xpZGUpO1xyXG5cclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICAhY3VycmVudC4kc2xpZGUuaGFzQ2xhc3MoXCJmYW5jeWJveC1hbmltYXRlZFwiKSAmJlxyXG4gICAgICAgIChNYXRoLmFicyhzbGlkZVBvcy50b3AgLSBzdGFnZVBvcy50b3ApID4gMC41IHx8IE1hdGguYWJzKHNsaWRlUG9zLmxlZnQgLSBzdGFnZVBvcy5sZWZ0KSA+IDAuNSlcclxuICAgICAgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gVXBkYXRlIGN1cnNvciBzdHlsZSBkZXBlbmRpbmcgaWYgY29udGVudCBjYW4gYmUgem9vbWVkXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB1cGRhdGVDdXJzb3I6IGZ1bmN0aW9uIChuZXh0V2lkdGgsIG5leHRIZWlnaHQpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgJGNvbnRhaW5lciA9IHNlbGYuJHJlZnMuY29udGFpbmVyLFxyXG4gICAgICAgIGNhblBhbixcclxuICAgICAgICBpc1pvb21hYmxlO1xyXG5cclxuICAgICAgaWYgKCFjdXJyZW50IHx8IHNlbGYuaXNDbG9zaW5nIHx8ICFzZWxmLkd1ZXN0dXJlcykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgJGNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLXpvb21hYmxlIGZhbmN5Ym94LWNhbi16b29tSW4gZmFuY3lib3gtY2FuLXpvb21PdXQgZmFuY3lib3gtY2FuLXN3aXBlIGZhbmN5Ym94LWNhbi1wYW5cIik7XHJcblxyXG4gICAgICBjYW5QYW4gPSBzZWxmLmNhblBhbihuZXh0V2lkdGgsIG5leHRIZWlnaHQpO1xyXG5cclxuICAgICAgaXNab29tYWJsZSA9IGNhblBhbiA/IHRydWUgOiBzZWxmLmlzWm9vbWFibGUoKTtcclxuXHJcbiAgICAgICRjb250YWluZXIudG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1pcy16b29tYWJsZVwiLCBpc1pvb21hYmxlKTtcclxuXHJcbiAgICAgICQoXCJbZGF0YS1mYW5jeWJveC16b29tXVwiKS5wcm9wKFwiZGlzYWJsZWRcIiwgIWlzWm9vbWFibGUpO1xyXG5cclxuICAgICAgaWYgKGNhblBhbikge1xyXG4gICAgICAgICRjb250YWluZXIuYWRkQ2xhc3MoXCJmYW5jeWJveC1jYW4tcGFuXCIpO1xyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIGlzWm9vbWFibGUgJiZcclxuICAgICAgICAoY3VycmVudC5vcHRzLmNsaWNrQ29udGVudCA9PT0gXCJ6b29tXCIgfHwgKCQuaXNGdW5jdGlvbihjdXJyZW50Lm9wdHMuY2xpY2tDb250ZW50KSAmJiBjdXJyZW50Lm9wdHMuY2xpY2tDb250ZW50KGN1cnJlbnQpID09IFwiem9vbVwiKSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyhcImZhbmN5Ym94LWNhbi16b29tSW5cIik7XHJcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudC5vcHRzLnRvdWNoICYmIChjdXJyZW50Lm9wdHMudG91Y2gudmVydGljYWwgfHwgc2VsZi5ncm91cC5sZW5ndGggPiAxKSAmJiBjdXJyZW50LmNvbnRlbnRUeXBlICE9PSBcInZpZGVvXCIpIHtcclxuICAgICAgICAkY29udGFpbmVyLmFkZENsYXNzKFwiZmFuY3lib3gtY2FuLXN3aXBlXCIpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENoZWNrIGlmIGN1cnJlbnQgc2xpZGUgaXMgem9vbWFibGVcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBpc1pvb21hYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBjdXJyZW50ID0gc2VsZi5jdXJyZW50LFxyXG4gICAgICAgIGZpdFBvcztcclxuXHJcbiAgICAgIC8vIEFzc3VtZSB0aGF0IHNsaWRlIGlzIHpvb21hYmxlIGlmOlxyXG4gICAgICAvLyAgIC0gaW1hZ2UgaXMgc3RpbGwgbG9hZGluZ1xyXG4gICAgICAvLyAgIC0gYWN0dWFsIHNpemUgb2YgdGhlIGltYWdlIGlzIHNtYWxsZXIgdGhhbiBhdmFpbGFibGUgYXJlYVxyXG4gICAgICBpZiAoY3VycmVudCAmJiAhc2VsZi5pc0Nsb3NpbmcgJiYgY3VycmVudC50eXBlID09PSBcImltYWdlXCIgJiYgIWN1cnJlbnQuaGFzRXJyb3IpIHtcclxuICAgICAgICBpZiAoIWN1cnJlbnQuaXNMb2FkZWQpIHtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZml0UG9zID0gc2VsZi5nZXRGaXRQb3MoY3VycmVudCk7XHJcblxyXG4gICAgICAgIGlmIChmaXRQb3MgJiYgKGN1cnJlbnQud2lkdGggPiBmaXRQb3Mud2lkdGggfHwgY3VycmVudC5oZWlnaHQgPiBmaXRQb3MuaGVpZ2h0KSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENoZWNrIGlmIGN1cnJlbnQgaW1hZ2UgZGltZW5zaW9ucyBhcmUgc21hbGxlciB0aGFuIGFjdHVhbFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgaXNTY2FsZWREb3duOiBmdW5jdGlvbiAobmV4dFdpZHRoLCBuZXh0SGVpZ2h0KSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICByZXogPSBmYWxzZSxcclxuICAgICAgICBjdXJyZW50ID0gc2VsZi5jdXJyZW50LFxyXG4gICAgICAgICRjb250ZW50ID0gY3VycmVudC4kY29udGVudDtcclxuXHJcbiAgICAgIGlmIChuZXh0V2lkdGggIT09IHVuZGVmaW5lZCAmJiBuZXh0SGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXogPSBuZXh0V2lkdGggPCBjdXJyZW50LndpZHRoICYmIG5leHRIZWlnaHQgPCBjdXJyZW50LmhlaWdodDtcclxuICAgICAgfSBlbHNlIGlmICgkY29udGVudCkge1xyXG4gICAgICAgIHJleiA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKCRjb250ZW50KTtcclxuICAgICAgICByZXogPSByZXoud2lkdGggPCBjdXJyZW50LndpZHRoICYmIHJlei5oZWlnaHQgPCBjdXJyZW50LmhlaWdodDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlejtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgaW1hZ2UgZGltZW5zaW9ucyBleGNlZWQgcGFyZW50IGVsZW1lbnRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgY2FuUGFuOiBmdW5jdGlvbiAobmV4dFdpZHRoLCBuZXh0SGVpZ2h0KSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBjdXJyZW50ID0gc2VsZi5jdXJyZW50LFxyXG4gICAgICAgIHBvcyA9IG51bGwsXHJcbiAgICAgICAgcmV6ID0gZmFsc2U7XHJcblxyXG4gICAgICBpZiAoY3VycmVudC50eXBlID09PSBcImltYWdlXCIgJiYgKGN1cnJlbnQuaXNDb21wbGV0ZSB8fCAobmV4dFdpZHRoICYmIG5leHRIZWlnaHQpKSAmJiAhY3VycmVudC5oYXNFcnJvcikge1xyXG4gICAgICAgIHJleiA9IHNlbGYuZ2V0Rml0UG9zKGN1cnJlbnQpO1xyXG5cclxuICAgICAgICBpZiAobmV4dFdpZHRoICE9PSB1bmRlZmluZWQgJiYgbmV4dEhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBwb3MgPSB7XHJcbiAgICAgICAgICAgIHdpZHRoOiBuZXh0V2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogbmV4dEhlaWdodFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnQuaXNDb21wbGV0ZSkge1xyXG4gICAgICAgICAgcG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoY3VycmVudC4kY29udGVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocG9zICYmIHJleikge1xyXG4gICAgICAgICAgcmV6ID0gTWF0aC5hYnMocG9zLndpZHRoIC0gcmV6LndpZHRoKSA+IDEuNSB8fCBNYXRoLmFicyhwb3MuaGVpZ2h0IC0gcmV6LmhlaWdodCkgPiAxLjU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmV6O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBMb2FkIGNvbnRlbnQgaW50byB0aGUgc2xpZGVcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGxvYWRTbGlkZTogZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgICRzbGlkZSxcclxuICAgICAgICBhamF4TG9hZDtcclxuXHJcbiAgICAgIGlmIChzbGlkZS5pc0xvYWRpbmcgfHwgc2xpZGUuaXNMb2FkZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNsaWRlLmlzTG9hZGluZyA9IHRydWU7XHJcblxyXG4gICAgICBpZiAoc2VsZi50cmlnZ2VyKFwiYmVmb3JlTG9hZFwiLCBzbGlkZSkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgc2xpZGUuaXNMb2FkaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdHlwZSA9IHNsaWRlLnR5cGU7XHJcbiAgICAgICRzbGlkZSA9IHNsaWRlLiRzbGlkZTtcclxuXHJcbiAgICAgICRzbGlkZVxyXG4gICAgICAgIC5vZmYoXCJyZWZyZXNoXCIpXHJcbiAgICAgICAgLnRyaWdnZXIoXCJvblJlc2V0XCIpXHJcbiAgICAgICAgLmFkZENsYXNzKHNsaWRlLm9wdHMuc2xpZGVDbGFzcyk7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgY29udGVudCBkZXBlbmRpbmcgb24gdGhlIHR5cGVcclxuICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSBcImltYWdlXCI6XHJcbiAgICAgICAgICBzZWxmLnNldEltYWdlKHNsaWRlKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBcImlmcmFtZVwiOlxyXG4gICAgICAgICAgc2VsZi5zZXRJZnJhbWUoc2xpZGUpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFwiaHRtbFwiOlxyXG4gICAgICAgICAgc2VsZi5zZXRDb250ZW50KHNsaWRlLCBzbGlkZS5zcmMgfHwgc2xpZGUuY29udGVudCk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgXCJ2aWRlb1wiOlxyXG4gICAgICAgICAgc2VsZi5zZXRDb250ZW50KFxyXG4gICAgICAgICAgICBzbGlkZSxcclxuICAgICAgICAgICAgc2xpZGUub3B0cy52aWRlby50cGxcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1xce1xce3NyY1xcfVxcfS9naSwgc2xpZGUuc3JjKVxyXG4gICAgICAgICAgICAucmVwbGFjZShcInt7Zm9ybWF0fX1cIiwgc2xpZGUub3B0cy52aWRlb0Zvcm1hdCB8fCBzbGlkZS5vcHRzLnZpZGVvLmZvcm1hdCB8fCBcIlwiKVxyXG4gICAgICAgICAgICAucmVwbGFjZShcInt7cG9zdGVyfX1cIiwgc2xpZGUudGh1bWIgfHwgXCJcIilcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgXCJpbmxpbmVcIjpcclxuICAgICAgICAgIGlmICgkKHNsaWRlLnNyYykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0Q29udGVudChzbGlkZSwgJChzbGlkZS5zcmMpKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0RXJyb3Ioc2xpZGUpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFwiYWpheFwiOlxyXG4gICAgICAgICAgc2VsZi5zaG93TG9hZGluZyhzbGlkZSk7XHJcblxyXG4gICAgICAgICAgYWpheExvYWQgPSAkLmFqYXgoXHJcbiAgICAgICAgICAgICQuZXh0ZW5kKHt9LCBzbGlkZS5vcHRzLmFqYXguc2V0dGluZ3MsIHtcclxuICAgICAgICAgICAgICB1cmw6IHNsaWRlLnNyYyxcclxuICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSwgdGV4dFN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRleHRTdGF0dXMgPT09IFwic3VjY2Vzc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgIHNlbGYuc2V0Q29udGVudChzbGlkZSwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGpxWEhSLCB0ZXh0U3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoanFYSFIgJiYgdGV4dFN0YXR1cyAhPT0gXCJhYm9ydFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgIHNlbGYuc2V0RXJyb3Ioc2xpZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgJHNsaWRlLm9uZShcIm9uUmVzZXRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBhamF4TG9hZC5hYm9ydCgpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICBzZWxmLnNldEVycm9yKHNsaWRlKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFVzZSB0aHVtYm5haWwgaW1hZ2UsIGlmIHBvc3NpYmxlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHNldEltYWdlOiBmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGdob3N0O1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgbmVlZCB0byBzaG93IGxvYWRpbmcgaWNvblxyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgJGltZyA9IHNsaWRlLiRpbWFnZTtcclxuXHJcbiAgICAgICAgaWYgKCFzZWxmLmlzQ2xvc2luZyAmJiBzbGlkZS5pc0xvYWRpbmcgJiYgKCEkaW1nIHx8ICEkaW1nLmxlbmd0aCB8fCAhJGltZ1swXS5jb21wbGV0ZSkgJiYgIXNsaWRlLmhhc0Vycm9yKSB7XHJcbiAgICAgICAgICBzZWxmLnNob3dMb2FkaW5nKHNsaWRlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIDUwKTtcclxuXHJcbiAgICAgIC8vQ2hlY2sgaWYgaW1hZ2UgaGFzIHNyY3NldFxyXG4gICAgICBzZWxmLmNoZWNrU3Jjc2V0KHNsaWRlKTtcclxuXHJcbiAgICAgIC8vIFRoaXMgd2lsbCBiZSB3cmFwcGVyIGNvbnRhaW5pbmcgYm90aCBnaG9zdCBhbmQgYWN0dWFsIGltYWdlXHJcbiAgICAgIHNsaWRlLiRjb250ZW50ID0gJCgnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWNvbnRlbnRcIj48L2Rpdj4nKVxyXG4gICAgICAgIC5hZGRDbGFzcyhcImZhbmN5Ym94LWlzLWhpZGRlblwiKVxyXG4gICAgICAgIC5hcHBlbmRUbyhzbGlkZS4kc2xpZGUuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0taW1hZ2VcIikpO1xyXG5cclxuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHRodW1ibmFpbCwgd2UgY2FuIGRpc3BsYXkgaXQgd2hpbGUgYWN0dWFsIGltYWdlIGlzIGxvYWRpbmdcclxuICAgICAgLy8gVXNlcnMgd2lsbCBub3Qgc3RhcmUgYXQgYmxhY2sgc2NyZWVuIGFuZCBhY3R1YWwgaW1hZ2Ugd2lsbCBhcHBlYXIgZ3JhZHVhbGx5XHJcbiAgICAgIGlmIChzbGlkZS5vcHRzLnByZWxvYWQgIT09IGZhbHNlICYmIHNsaWRlLm9wdHMud2lkdGggJiYgc2xpZGUub3B0cy5oZWlnaHQgJiYgc2xpZGUudGh1bWIpIHtcclxuICAgICAgICBzbGlkZS53aWR0aCA9IHNsaWRlLm9wdHMud2lkdGg7XHJcbiAgICAgICAgc2xpZGUuaGVpZ2h0ID0gc2xpZGUub3B0cy5oZWlnaHQ7XHJcblxyXG4gICAgICAgIGdob3N0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuXHJcbiAgICAgICAgZ2hvc3Qub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgc2xpZGUuJGdob3N0ID0gbnVsbDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBnaG9zdC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBzZWxmLmFmdGVyTG9hZChzbGlkZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2xpZGUuJGdob3N0ID0gJChnaG9zdClcclxuICAgICAgICAgIC5hZGRDbGFzcyhcImZhbmN5Ym94LWltYWdlXCIpXHJcbiAgICAgICAgICAuYXBwZW5kVG8oc2xpZGUuJGNvbnRlbnQpXHJcbiAgICAgICAgICAuYXR0cihcInNyY1wiLCBzbGlkZS50aHVtYik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFN0YXJ0IGxvYWRpbmcgYWN0dWFsIGltYWdlXHJcbiAgICAgIHNlbGYuc2V0QmlnSW1hZ2Uoc2xpZGUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDaGVjayBpZiBpbWFnZSBoYXMgc3Jjc2V0IGFuZCBnZXQgdGhlIHNvdXJjZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIGNoZWNrU3Jjc2V0OiBmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgdmFyIHNyY3NldCA9IHNsaWRlLm9wdHMuc3Jjc2V0IHx8IHNsaWRlLm9wdHMuaW1hZ2Uuc3Jjc2V0LFxyXG4gICAgICAgIGZvdW5kLFxyXG4gICAgICAgIHRlbXAsXHJcbiAgICAgICAgcHhSYXRpbyxcclxuICAgICAgICB3aW5kb3dXaWR0aDtcclxuXHJcbiAgICAgIC8vIElmIHdlIGhhdmUgXCJzcmNzZXRcIiwgdGhlbiB3ZSBuZWVkIHRvIGZpbmQgZmlyc3QgbWF0Y2hpbmcgXCJzcmNcIiB2YWx1ZS5cclxuICAgICAgLy8gVGhpcyBpcyBuZWNlc3NhcnksIGJlY2F1c2Ugd2hlbiB5b3Ugc2V0IGFuIHNyYyBhdHRyaWJ1dGUsIHRoZSBicm93c2VyIHdpbGwgcHJlbG9hZCB0aGUgaW1hZ2VcclxuICAgICAgLy8gYmVmb3JlIGFueSBqYXZhc2NyaXB0IG9yIGV2ZW4gQ1NTIGlzIGFwcGxpZWQuXHJcbiAgICAgIGlmIChzcmNzZXQpIHtcclxuICAgICAgICBweFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcclxuICAgICAgICB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoICogcHhSYXRpbztcclxuXHJcbiAgICAgICAgdGVtcCA9IHNyY3NldC5zcGxpdChcIixcIikubWFwKGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgdmFyIHJldCA9IHt9O1xyXG5cclxuICAgICAgICAgIGVsLnRyaW0oKVxyXG4gICAgICAgICAgICAuc3BsaXQoL1xccysvKVxyXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGkpIHtcclxuICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUludChlbC5zdWJzdHJpbmcoMCwgZWwubGVuZ3RoIC0gMSksIDEwKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAocmV0LnVybCA9IGVsKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0LnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICByZXQucG9zdGZpeCA9IGVsW2VsLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gU29ydCBieSB2YWx1ZVxyXG4gICAgICAgIHRlbXAuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgcmV0dXJuIGEudmFsdWUgLSBiLnZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBPaywgbm93IHdlIGhhdmUgYW4gYXJyYXkgb2YgYWxsIHNyY3NldCB2YWx1ZXNcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRlbXAubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgIHZhciBlbCA9IHRlbXBbal07XHJcblxyXG4gICAgICAgICAgaWYgKChlbC5wb3N0Zml4ID09PSBcIndcIiAmJiBlbC52YWx1ZSA+PSB3aW5kb3dXaWR0aCkgfHwgKGVsLnBvc3RmaXggPT09IFwieFwiICYmIGVsLnZhbHVlID49IHB4UmF0aW8pKSB7XHJcbiAgICAgICAgICAgIGZvdW5kID0gZWw7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgbm90IGZvdW5kLCB0YWtlIHRoZSBsYXN0IG9uZVxyXG4gICAgICAgIGlmICghZm91bmQgJiYgdGVtcC5sZW5ndGgpIHtcclxuICAgICAgICAgIGZvdW5kID0gdGVtcFt0ZW1wLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGZvdW5kKSB7XHJcbiAgICAgICAgICBzbGlkZS5zcmMgPSBmb3VuZC51cmw7XHJcblxyXG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBkZWZhdWx0IHdpZHRoL2hlaWdodCB2YWx1ZXMsIHdlIGNhbiBjYWxjdWxhdGUgaGVpZ2h0IGZvciBtYXRjaGluZyBzb3VyY2VcclxuICAgICAgICAgIGlmIChzbGlkZS53aWR0aCAmJiBzbGlkZS5oZWlnaHQgJiYgZm91bmQucG9zdGZpeCA9PSBcIndcIikge1xyXG4gICAgICAgICAgICBzbGlkZS5oZWlnaHQgPSAoc2xpZGUud2lkdGggLyBzbGlkZS5oZWlnaHQpICogZm91bmQudmFsdWU7XHJcbiAgICAgICAgICAgIHNsaWRlLndpZHRoID0gZm91bmQudmFsdWU7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc2xpZGUub3B0cy5zcmNzZXQgPSBzcmNzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENyZWF0ZSBmdWxsLXNpemUgaW1hZ2VcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBzZXRCaWdJbWFnZTogZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpLFxyXG4gICAgICAgICRpbWcgPSAkKGltZyk7XHJcblxyXG4gICAgICBzbGlkZS4kaW1hZ2UgPSAkaW1nXHJcbiAgICAgICAgLm9uZShcImVycm9yXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHNlbGYuc2V0RXJyb3Ioc2xpZGUpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uZShcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdmFyIHNpemVzO1xyXG5cclxuICAgICAgICAgIGlmICghc2xpZGUuJGdob3N0KSB7XHJcbiAgICAgICAgICAgIHNlbGYucmVzb2x2ZUltYWdlU2xpZGVTaXplKHNsaWRlLCB0aGlzLm5hdHVyYWxXaWR0aCwgdGhpcy5uYXR1cmFsSGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuYWZ0ZXJMb2FkKHNsaWRlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoc2VsZi5pc0Nsb3NpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChzbGlkZS5vcHRzLnNyY3NldCkge1xyXG4gICAgICAgICAgICBzaXplcyA9IHNsaWRlLm9wdHMuc2l6ZXM7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXNpemVzIHx8IHNpemVzID09PSBcImF1dG9cIikge1xyXG4gICAgICAgICAgICAgIHNpemVzID1cclxuICAgICAgICAgICAgICAgIChzbGlkZS53aWR0aCAvIHNsaWRlLmhlaWdodCA+IDEgJiYgJFcud2lkdGgoKSAvICRXLmhlaWdodCgpID4gMSA/IFwiMTAwXCIgOiBNYXRoLnJvdW5kKChzbGlkZS53aWR0aCAvIHNsaWRlLmhlaWdodCkgKiAxMDApKSArXHJcbiAgICAgICAgICAgICAgICBcInZ3XCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRpbWcuYXR0cihcInNpemVzXCIsIHNpemVzKS5hdHRyKFwic3Jjc2V0XCIsIHNsaWRlLm9wdHMuc3Jjc2V0KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBIaWRlIHRlbXBvcmFyeSBpbWFnZSBhZnRlciBzb21lIGRlbGF5XHJcbiAgICAgICAgICBpZiAoc2xpZGUuJGdob3N0KSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIGlmIChzbGlkZS4kZ2hvc3QgJiYgIXNlbGYuaXNDbG9zaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZS4kZ2hvc3QuaGlkZSgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgTWF0aC5taW4oMzAwLCBNYXRoLm1heCgxMDAwLCBzbGlkZS5oZWlnaHQgLyAxNjAwKSkpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHNlbGYuaGlkZUxvYWRpbmcoc2xpZGUpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmFkZENsYXNzKFwiZmFuY3lib3gtaW1hZ2VcIilcclxuICAgICAgICAuYXR0cihcInNyY1wiLCBzbGlkZS5zcmMpXHJcbiAgICAgICAgLmFwcGVuZFRvKHNsaWRlLiRjb250ZW50KTtcclxuXHJcbiAgICAgIGlmICgoaW1nLmNvbXBsZXRlIHx8IGltZy5yZWFkeVN0YXRlID09IFwiY29tcGxldGVcIikgJiYgJGltZy5uYXR1cmFsV2lkdGggJiYgJGltZy5uYXR1cmFsSGVpZ2h0KSB7XHJcbiAgICAgICAgJGltZy50cmlnZ2VyKFwibG9hZFwiKTtcclxuICAgICAgfSBlbHNlIGlmIChpbWcuZXJyb3IpIHtcclxuICAgICAgICAkaW1nLnRyaWdnZXIoXCJlcnJvclwiKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDb21wdXRlcyB0aGUgc2xpZGUgc2l6ZSBmcm9tIGltYWdlIHNpemUgYW5kIG1heFdpZHRoL21heEhlaWdodFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICByZXNvbHZlSW1hZ2VTbGlkZVNpemU6IGZ1bmN0aW9uIChzbGlkZSwgaW1nV2lkdGgsIGltZ0hlaWdodCkge1xyXG4gICAgICB2YXIgbWF4V2lkdGggPSBwYXJzZUludChzbGlkZS5vcHRzLndpZHRoLCAxMCksXHJcbiAgICAgICAgbWF4SGVpZ2h0ID0gcGFyc2VJbnQoc2xpZGUub3B0cy5oZWlnaHQsIDEwKTtcclxuXHJcbiAgICAgIC8vIFNldHMgdGhlIGRlZmF1bHQgdmFsdWVzIGZyb20gdGhlIGltYWdlXHJcbiAgICAgIHNsaWRlLndpZHRoID0gaW1nV2lkdGg7XHJcbiAgICAgIHNsaWRlLmhlaWdodCA9IGltZ0hlaWdodDtcclxuXHJcbiAgICAgIGlmIChtYXhXaWR0aCA+IDApIHtcclxuICAgICAgICBzbGlkZS53aWR0aCA9IG1heFdpZHRoO1xyXG4gICAgICAgIHNsaWRlLmhlaWdodCA9IE1hdGguZmxvb3IoKG1heFdpZHRoICogaW1nSGVpZ2h0KSAvIGltZ1dpZHRoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG1heEhlaWdodCA+IDApIHtcclxuICAgICAgICBzbGlkZS53aWR0aCA9IE1hdGguZmxvb3IoKG1heEhlaWdodCAqIGltZ1dpZHRoKSAvIGltZ0hlaWdodCk7XHJcbiAgICAgICAgc2xpZGUuaGVpZ2h0ID0gbWF4SGVpZ2h0O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENyZWF0ZSBpZnJhbWUgd3JhcHBlciwgaWZyYW1lIGFuZCBiaW5kaW5nc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgc2V0SWZyYW1lOiBmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIG9wdHMgPSBzbGlkZS5vcHRzLmlmcmFtZSxcclxuICAgICAgICAkc2xpZGUgPSBzbGlkZS4kc2xpZGUsXHJcbiAgICAgICAgJGlmcmFtZTtcclxuXHJcbiAgICAgIHNsaWRlLiRjb250ZW50ID0gJCgnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWNvbnRlbnQnICsgKG9wdHMucHJlbG9hZCA/IFwiIGZhbmN5Ym94LWlzLWhpZGRlblwiIDogXCJcIikgKyAnXCI+PC9kaXY+JylcclxuICAgICAgICAuY3NzKG9wdHMuY3NzKVxyXG4gICAgICAgIC5hcHBlbmRUbygkc2xpZGUpO1xyXG5cclxuICAgICAgJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLVwiICsgc2xpZGUuY29udGVudFR5cGUpO1xyXG5cclxuICAgICAgc2xpZGUuJGlmcmFtZSA9ICRpZnJhbWUgPSAkKG9wdHMudHBsLnJlcGxhY2UoL1xce3JuZFxcfS9nLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSkpXHJcbiAgICAgICAgLmF0dHIob3B0cy5hdHRyKVxyXG4gICAgICAgIC5hcHBlbmRUbyhzbGlkZS4kY29udGVudCk7XHJcblxyXG4gICAgICBpZiAob3B0cy5wcmVsb2FkKSB7XHJcbiAgICAgICAgc2VsZi5zaG93TG9hZGluZyhzbGlkZSk7XHJcblxyXG4gICAgICAgIC8vIFVuZm9ydHVuYXRlbHksIGl0IGlzIG5vdCBhbHdheXMgcG9zc2libGUgdG8gZGV0ZXJtaW5lIGlmIGlmcmFtZSBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkXHJcbiAgICAgICAgLy8gKGR1ZSB0byBicm93c2VyIHNlY3VyaXR5IHBvbGljeSlcclxuXHJcbiAgICAgICAgJGlmcmFtZS5vbihcImxvYWQuZmIgZXJyb3IuZmJcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgIHRoaXMuaXNSZWFkeSA9IDE7XHJcblxyXG4gICAgICAgICAgc2xpZGUuJHNsaWRlLnRyaWdnZXIoXCJyZWZyZXNoXCIpO1xyXG5cclxuICAgICAgICAgIHNlbGYuYWZ0ZXJMb2FkKHNsaWRlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUmVjYWxjdWxhdGUgaWZyYW1lIGNvbnRlbnQgc2l6ZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgJHNsaWRlLm9uKFwicmVmcmVzaC5mYlwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB2YXIgJGNvbnRlbnQgPSBzbGlkZS4kY29udGVudCxcclxuICAgICAgICAgICAgZnJhbWVXaWR0aCA9IG9wdHMuY3NzLndpZHRoLFxyXG4gICAgICAgICAgICBmcmFtZUhlaWdodCA9IG9wdHMuY3NzLmhlaWdodCxcclxuICAgICAgICAgICAgJGNvbnRlbnRzLFxyXG4gICAgICAgICAgICAkYm9keTtcclxuXHJcbiAgICAgICAgICBpZiAoJGlmcmFtZVswXS5pc1JlYWR5ICE9PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAkY29udGVudHMgPSAkaWZyYW1lLmNvbnRlbnRzKCk7XHJcbiAgICAgICAgICAgICRib2R5ID0gJGNvbnRlbnRzLmZpbmQoXCJib2R5XCIpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxyXG5cclxuICAgICAgICAgIC8vIENhbGN1bGF0ZSBjb250ZW50IGRpbWVuc2lvbnMsIGlmIGl0IGlzIGFjY2Vzc2libGVcclxuICAgICAgICAgIGlmICgkYm9keSAmJiAkYm9keS5sZW5ndGggJiYgJGJvZHkuY2hpbGRyZW4oKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gQXZvaWQgc2Nyb2xsaW5nIHRvIHRvcCAoaWYgbXVsdGlwbGUgaW5zdGFuY2VzKVxyXG4gICAgICAgICAgICAkc2xpZGUuY3NzKFwib3ZlcmZsb3dcIiwgXCJ2aXNpYmxlXCIpO1xyXG5cclxuICAgICAgICAgICAgJGNvbnRlbnQuY3NzKHtcclxuICAgICAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXHJcbiAgICAgICAgICAgICAgXCJtYXgtd2lkdGhcIjogXCIxMDAlXCIsXHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiBcIjk5OTlweFwiXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZyYW1lV2lkdGggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgIGZyYW1lV2lkdGggPSBNYXRoLmNlaWwoTWF0aC5tYXgoJGJvZHlbMF0uY2xpZW50V2lkdGgsICRib2R5Lm91dGVyV2lkdGgodHJ1ZSkpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJGNvbnRlbnQuY3NzKFwid2lkdGhcIiwgZnJhbWVXaWR0aCA/IGZyYW1lV2lkdGggOiBcIlwiKS5jc3MoXCJtYXgtd2lkdGhcIiwgXCJcIik7XHJcblxyXG4gICAgICAgICAgICBpZiAoZnJhbWVIZWlnaHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgIGZyYW1lSGVpZ2h0ID0gTWF0aC5jZWlsKE1hdGgubWF4KCRib2R5WzBdLmNsaWVudEhlaWdodCwgJGJvZHkub3V0ZXJIZWlnaHQodHJ1ZSkpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJGNvbnRlbnQuY3NzKFwiaGVpZ2h0XCIsIGZyYW1lSGVpZ2h0ID8gZnJhbWVIZWlnaHQgOiBcIlwiKTtcclxuXHJcbiAgICAgICAgICAgICRzbGlkZS5jc3MoXCJvdmVyZmxvd1wiLCBcImF1dG9cIik7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgJGNvbnRlbnQucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2VsZi5hZnRlckxvYWQoc2xpZGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAkaWZyYW1lLmF0dHIoXCJzcmNcIiwgc2xpZGUuc3JjKTtcclxuXHJcbiAgICAgIC8vIFJlbW92ZSBpZnJhbWUgaWYgY2xvc2luZyBvciBjaGFuZ2luZyBnYWxsZXJ5IGl0ZW1cclxuICAgICAgJHNsaWRlLm9uZShcIm9uUmVzZXRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFRoaXMgaGVscHMgSUUgbm90IHRvIHRocm93IGVycm9ycyB3aGVuIGNsb3NpbmdcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgJCh0aGlzKVxyXG4gICAgICAgICAgICAuZmluZChcImlmcmFtZVwiKVxyXG4gICAgICAgICAgICAuaGlkZSgpXHJcbiAgICAgICAgICAgIC51bmJpbmQoKVxyXG4gICAgICAgICAgICAuYXR0cihcInNyY1wiLCBcIi8vYWJvdXQ6YmxhbmtcIik7XHJcbiAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxyXG5cclxuICAgICAgICAkKHRoaXMpXHJcbiAgICAgICAgICAub2ZmKFwicmVmcmVzaC5mYlwiKVxyXG4gICAgICAgICAgLmVtcHR5KCk7XHJcblxyXG4gICAgICAgIHNsaWRlLmlzTG9hZGVkID0gZmFsc2U7XHJcbiAgICAgICAgc2xpZGUuaXNSZXZlYWxlZCA9IGZhbHNlO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gV3JhcCBhbmQgYXBwZW5kIGNvbnRlbnQgdG8gdGhlIHNsaWRlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uIChzbGlkZSwgY29udGVudCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc0Nsb3NpbmcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYuaGlkZUxvYWRpbmcoc2xpZGUpO1xyXG5cclxuICAgICAgaWYgKHNsaWRlLiRjb250ZW50KSB7XHJcbiAgICAgICAgJC5mYW5jeWJveC5zdG9wKHNsaWRlLiRjb250ZW50KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2xpZGUuJHNsaWRlLmVtcHR5KCk7XHJcblxyXG4gICAgICAvLyBJZiBjb250ZW50IGlzIGEgalF1ZXJ5IG9iamVjdCwgdGhlbiBpdCB3aWxsIGJlIG1vdmVkIHRvIHRoZSBzbGlkZS5cclxuICAgICAgLy8gVGhlIHBsYWNlaG9sZGVyIGlzIGNyZWF0ZWQgc28gd2Ugd2lsbCBrbm93IHdoZXJlIHRvIHB1dCBpdCBiYWNrLlxyXG4gICAgICBpZiAoaXNRdWVyeShjb250ZW50KSAmJiBjb250ZW50LnBhcmVudCgpLmxlbmd0aCkge1xyXG4gICAgICAgIC8vIE1ha2Ugc3VyZSBjb250ZW50IGlzIG5vdCBhbHJlYWR5IG1vdmVkIHRvIGZhbmN5Qm94XHJcbiAgICAgICAgaWYgKGNvbnRlbnQuaGFzQ2xhc3MoXCJmYW5jeWJveC1jb250ZW50XCIpIHx8IGNvbnRlbnQucGFyZW50KCkuaGFzQ2xhc3MoXCJmYW5jeWJveC1jb250ZW50XCIpKSB7XHJcbiAgICAgICAgICBjb250ZW50LnBhcmVudHMoXCIuZmFuY3lib3gtc2xpZGVcIikudHJpZ2dlcihcIm9uUmVzZXRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgdGVtcG9yYXJ5IGVsZW1lbnQgbWFya2luZyBvcmlnaW5hbCBwbGFjZSBvZiB0aGUgY29udGVudFxyXG4gICAgICAgIHNsaWRlLiRwbGFjZWhvbGRlciA9ICQoXCI8ZGl2PlwiKVxyXG4gICAgICAgICAgLmhpZGUoKVxyXG4gICAgICAgICAgLmluc2VydEFmdGVyKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAvLyBNYWtlIHN1cmUgY29udGVudCBpcyB2aXNpYmxlXHJcbiAgICAgICAgY29udGVudC5jc3MoXCJkaXNwbGF5XCIsIFwiaW5saW5lLWJsb2NrXCIpO1xyXG4gICAgICB9IGVsc2UgaWYgKCFzbGlkZS5oYXNFcnJvcikge1xyXG4gICAgICAgIC8vIElmIGNvbnRlbnQgaXMganVzdCBhIHBsYWluIHRleHQsIHRyeSB0byBjb252ZXJ0IGl0IHRvIGh0bWxcclxuICAgICAgICBpZiAoJC50eXBlKGNvbnRlbnQpID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICBjb250ZW50ID0gJChcIjxkaXY+XCIpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJC50cmltKGNvbnRlbnQpKVxyXG4gICAgICAgICAgICAuY29udGVudHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIFwiZmlsdGVyXCIgb3B0aW9uIGlzIHByb3ZpZGVkLCB0aGVuIGZpbHRlciBjb250ZW50XHJcbiAgICAgICAgaWYgKHNsaWRlLm9wdHMuZmlsdGVyKSB7XHJcbiAgICAgICAgICBjb250ZW50ID0gJChcIjxkaXY+XCIpXHJcbiAgICAgICAgICAgIC5odG1sKGNvbnRlbnQpXHJcbiAgICAgICAgICAgIC5maW5kKHNsaWRlLm9wdHMuZmlsdGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNsaWRlLiRzbGlkZS5vbmUoXCJvblJlc2V0XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBQYXVzZSBhbGwgaHRtbDUgdmlkZW8vYXVkaW9cclxuICAgICAgICAkKHRoaXMpXHJcbiAgICAgICAgICAuZmluZChcInZpZGVvLGF1ZGlvXCIpXHJcbiAgICAgICAgICAudHJpZ2dlcihcInBhdXNlXCIpO1xyXG5cclxuICAgICAgICAvLyBQdXQgY29udGVudCBiYWNrXHJcbiAgICAgICAgaWYgKHNsaWRlLiRwbGFjZWhvbGRlcikge1xyXG4gICAgICAgICAgc2xpZGUuJHBsYWNlaG9sZGVyLmFmdGVyKGNvbnRlbnQucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1jb250ZW50XCIpLmhpZGUoKSkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgc2xpZGUuJHBsYWNlaG9sZGVyID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBjdXN0b20gY2xvc2UgYnV0dG9uXHJcbiAgICAgICAgaWYgKHNsaWRlLiRzbWFsbEJ0bikge1xyXG4gICAgICAgICAgc2xpZGUuJHNtYWxsQnRuLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgIHNsaWRlLiRzbWFsbEJ0biA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZW1vdmUgY29udGVudCBhbmQgbWFyayBzbGlkZSBhcyBub3QgbG9hZGVkXHJcbiAgICAgICAgaWYgKCFzbGlkZS5oYXNFcnJvcikge1xyXG4gICAgICAgICAgJCh0aGlzKS5lbXB0eSgpO1xyXG5cclxuICAgICAgICAgIHNsaWRlLmlzTG9hZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICBzbGlkZS5pc1JldmVhbGVkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgICQoY29udGVudCkuYXBwZW5kVG8oc2xpZGUuJHNsaWRlKTtcclxuXHJcbiAgICAgIGlmICgkKGNvbnRlbnQpLmlzKFwidmlkZW8sYXVkaW9cIikpIHtcclxuICAgICAgICAkKGNvbnRlbnQpLmFkZENsYXNzKFwiZmFuY3lib3gtdmlkZW9cIik7XHJcblxyXG4gICAgICAgICQoY29udGVudCkud3JhcChcIjxkaXY+PC9kaXY+XCIpO1xyXG5cclxuICAgICAgICBzbGlkZS5jb250ZW50VHlwZSA9IFwidmlkZW9cIjtcclxuXHJcbiAgICAgICAgc2xpZGUub3B0cy53aWR0aCA9IHNsaWRlLm9wdHMud2lkdGggfHwgJChjb250ZW50KS5hdHRyKFwid2lkdGhcIik7XHJcbiAgICAgICAgc2xpZGUub3B0cy5oZWlnaHQgPSBzbGlkZS5vcHRzLmhlaWdodCB8fCAkKGNvbnRlbnQpLmF0dHIoXCJoZWlnaHRcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNsaWRlLiRjb250ZW50ID0gc2xpZGUuJHNsaWRlXHJcbiAgICAgICAgLmNoaWxkcmVuKClcclxuICAgICAgICAuZmlsdGVyKFwiZGl2LGZvcm0sbWFpbix2aWRlbyxhdWRpbyxhcnRpY2xlLC5mYW5jeWJveC1jb250ZW50XCIpXHJcbiAgICAgICAgLmZpcnN0KCk7XHJcblxyXG4gICAgICBzbGlkZS4kY29udGVudC5zaWJsaW5ncygpLmhpZGUoKTtcclxuXHJcbiAgICAgIC8vIFJlLWNoZWNrIGlmIHRoZXJlIGlzIGEgdmFsaWQgY29udGVudFxyXG4gICAgICAvLyAoaW4gc29tZSBjYXNlcywgYWpheCByZXNwb25zZSBjYW4gY29udGFpbiB2YXJpb3VzIGVsZW1lbnRzIG9yIHBsYWluIHRleHQpXHJcbiAgICAgIGlmICghc2xpZGUuJGNvbnRlbnQubGVuZ3RoKSB7XHJcbiAgICAgICAgc2xpZGUuJGNvbnRlbnQgPSBzbGlkZS4kc2xpZGVcclxuICAgICAgICAgIC53cmFwSW5uZXIoXCI8ZGl2PjwvZGl2PlwiKVxyXG4gICAgICAgICAgLmNoaWxkcmVuKClcclxuICAgICAgICAgIC5maXJzdCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzbGlkZS4kY29udGVudC5hZGRDbGFzcyhcImZhbmN5Ym94LWNvbnRlbnRcIik7XHJcblxyXG4gICAgICBzbGlkZS4kc2xpZGUuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tXCIgKyBzbGlkZS5jb250ZW50VHlwZSk7XHJcblxyXG4gICAgICBzZWxmLmFmdGVyTG9hZChzbGlkZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIERpc3BsYXkgZXJyb3IgbWVzc2FnZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgc2V0RXJyb3I6IGZ1bmN0aW9uIChzbGlkZSkge1xyXG4gICAgICBzbGlkZS5oYXNFcnJvciA9IHRydWU7XHJcblxyXG4gICAgICBzbGlkZS4kc2xpZGVcclxuICAgICAgICAudHJpZ2dlcihcIm9uUmVzZXRcIilcclxuICAgICAgICAucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tXCIgKyBzbGlkZS5jb250ZW50VHlwZSlcclxuICAgICAgICAuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tZXJyb3JcIik7XHJcblxyXG4gICAgICBzbGlkZS5jb250ZW50VHlwZSA9IFwiaHRtbFwiO1xyXG5cclxuICAgICAgdGhpcy5zZXRDb250ZW50KHNsaWRlLCB0aGlzLnRyYW5zbGF0ZShzbGlkZSwgc2xpZGUub3B0cy5lcnJvclRwbCkpO1xyXG5cclxuICAgICAgaWYgKHNsaWRlLnBvcyA9PT0gdGhpcy5jdXJyUG9zKSB7XHJcbiAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFNob3cgbG9hZGluZyBpY29uIGluc2lkZSB0aGUgc2xpZGVcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBzaG93TG9hZGluZzogZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgIHNsaWRlID0gc2xpZGUgfHwgc2VsZi5jdXJyZW50O1xyXG5cclxuICAgICAgaWYgKHNsaWRlICYmICFzbGlkZS4kc3Bpbm5lcikge1xyXG4gICAgICAgIHNsaWRlLiRzcGlubmVyID0gJChzZWxmLnRyYW5zbGF0ZShzZWxmLCBzZWxmLm9wdHMuc3Bpbm5lclRwbCkpXHJcbiAgICAgICAgICAuYXBwZW5kVG8oc2xpZGUuJHNsaWRlKVxyXG4gICAgICAgICAgLmhpZGUoKVxyXG4gICAgICAgICAgLmZhZGVJbihcImZhc3RcIik7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gUmVtb3ZlIGxvYWRpbmcgaWNvbiBmcm9tIHRoZSBzbGlkZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGhpZGVMb2FkaW5nOiBmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgc2xpZGUgPSBzbGlkZSB8fCBzZWxmLmN1cnJlbnQ7XHJcblxyXG4gICAgICBpZiAoc2xpZGUgJiYgc2xpZGUuJHNwaW5uZXIpIHtcclxuICAgICAgICBzbGlkZS4kc3Bpbm5lci5zdG9wKCkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIGRlbGV0ZSBzbGlkZS4kc3Bpbm5lcjtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBBZGp1c3RtZW50cyBhZnRlciBzbGlkZSBjb250ZW50IGhhcyBiZWVuIGxvYWRlZFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBhZnRlckxvYWQ6IGZ1bmN0aW9uIChzbGlkZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc0Nsb3NpbmcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNsaWRlLmlzTG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICBzbGlkZS5pc0xvYWRlZCA9IHRydWU7XHJcblxyXG4gICAgICBzZWxmLnRyaWdnZXIoXCJhZnRlckxvYWRcIiwgc2xpZGUpO1xyXG5cclxuICAgICAgc2VsZi5oaWRlTG9hZGluZyhzbGlkZSk7XHJcblxyXG4gICAgICAvLyBBZGQgc21hbGwgY2xvc2UgYnV0dG9uXHJcbiAgICAgIGlmIChzbGlkZS5vcHRzLnNtYWxsQnRuICYmICghc2xpZGUuJHNtYWxsQnRuIHx8ICFzbGlkZS4kc21hbGxCdG4ubGVuZ3RoKSkge1xyXG4gICAgICAgIHNsaWRlLiRzbWFsbEJ0biA9ICQoc2VsZi50cmFuc2xhdGUoc2xpZGUsIHNsaWRlLm9wdHMuYnRuVHBsLnNtYWxsQnRuKSkuYXBwZW5kVG8oc2xpZGUuJGNvbnRlbnQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBEaXNhYmxlIHJpZ2h0IGNsaWNrXHJcbiAgICAgIGlmIChzbGlkZS5vcHRzLnByb3RlY3QgJiYgc2xpZGUuJGNvbnRlbnQgJiYgIXNsaWRlLmhhc0Vycm9yKSB7XHJcbiAgICAgICAgc2xpZGUuJGNvbnRlbnQub24oXCJjb250ZXh0bWVudS5mYlwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgaWYgKGUuYnV0dG9uID09IDIpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgZmFrZSBlbGVtZW50IG9uIHRvcCBvZiB0aGUgaW1hZ2VcclxuICAgICAgICAvLyBUaGlzIG1ha2VzIGEgYml0IGhhcmRlciBmb3IgdXNlciB0byBzZWxlY3QgaW1hZ2VcclxuICAgICAgICBpZiAoc2xpZGUudHlwZSA9PT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgICAkKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtc3BhY2ViYWxsXCI+PC9kaXY+JykuYXBwZW5kVG8oc2xpZGUuJGNvbnRlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi5hZGp1c3RDYXB0aW9uKHNsaWRlKTtcclxuXHJcbiAgICAgIHNlbGYuYWRqdXN0TGF5b3V0KHNsaWRlKTtcclxuXHJcbiAgICAgIGlmIChzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcykge1xyXG4gICAgICAgIHNlbGYudXBkYXRlQ3Vyc29yKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYucmV2ZWFsQ29udGVudChzbGlkZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFByZXZlbnQgY2FwdGlvbiBvdmVybGFwLFxyXG4gICAgLy8gZml4IGNzcyBpbmNvbnNpc3RlbmN5IGFjcm9zcyBicm93c2Vyc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGFkanVzdENhcHRpb246IGZ1bmN0aW9uIChzbGlkZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNsaWRlIHx8IHNlbGYuY3VycmVudCxcclxuICAgICAgICBjYXB0aW9uID0gY3VycmVudC5vcHRzLmNhcHRpb24sXHJcbiAgICAgICAgcHJldmVudE92ZXJsYXAgPSBjdXJyZW50Lm9wdHMucHJldmVudENhcHRpb25PdmVybGFwLFxyXG4gICAgICAgICRjYXB0aW9uID0gc2VsZi4kcmVmcy5jYXB0aW9uLFxyXG4gICAgICAgICRjbG9uZSxcclxuICAgICAgICBjYXB0aW9uSCA9IGZhbHNlO1xyXG5cclxuICAgICAgJGNhcHRpb24udG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1jYXB0aW9uLS1zZXBhcmF0ZVwiLCBwcmV2ZW50T3ZlcmxhcCk7XHJcblxyXG4gICAgICBpZiAocHJldmVudE92ZXJsYXAgJiYgY2FwdGlvbiAmJiBjYXB0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgIGlmIChjdXJyZW50LnBvcyAhPT0gc2VsZi5jdXJyUG9zKSB7XHJcbiAgICAgICAgICAkY2xvbmUgPSAkY2FwdGlvbi5jbG9uZSgpLmFwcGVuZFRvKCRjYXB0aW9uLnBhcmVudCgpKTtcclxuXHJcbiAgICAgICAgICAkY2xvbmVcclxuICAgICAgICAgICAgLmNoaWxkcmVuKClcclxuICAgICAgICAgICAgLmVxKDApXHJcbiAgICAgICAgICAgIC5lbXB0eSgpXHJcbiAgICAgICAgICAgIC5odG1sKGNhcHRpb24pO1xyXG5cclxuICAgICAgICAgIGNhcHRpb25IID0gJGNsb25lLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICRjbG9uZS5lbXB0eSgpLnJlbW92ZSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi4kY2FwdGlvbikge1xyXG4gICAgICAgICAgY2FwdGlvbkggPSBzZWxmLiRjYXB0aW9uLm91dGVySGVpZ2h0KHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3VycmVudC4kc2xpZGUuY3NzKFwicGFkZGluZy1ib3R0b21cIiwgY2FwdGlvbkggfHwgXCJcIik7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gU2ltcGxlIGhhY2sgdG8gZml4IGluY29uc2lzdGVuY3kgYWNyb3NzIGJyb3dzZXJzLCBkZXNjcmliZWQgaGVyZSAoYWZmZWN0cyBFZGdlLCB0b28pOlxyXG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzQ4NTE4XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBhZGp1c3RMYXlvdXQ6IGZ1bmN0aW9uIChzbGlkZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNsaWRlIHx8IHNlbGYuY3VycmVudCxcclxuICAgICAgICBzY3JvbGxIZWlnaHQsXHJcbiAgICAgICAgbWFyZ2luQm90dG9tLFxyXG4gICAgICAgIGlubGluZVBhZGRpbmcsXHJcbiAgICAgICAgYWN0dWFsUGFkZGluZztcclxuXHJcbiAgICAgIGlmIChjdXJyZW50LmlzTG9hZGVkICYmIGN1cnJlbnQub3B0cy5kaXNhYmxlTGF5b3V0Rml4ICE9PSB0cnVlKSB7XHJcbiAgICAgICAgY3VycmVudC4kY29udGVudC5jc3MoXCJtYXJnaW4tYm90dG9tXCIsIFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBJZiB3ZSB3b3VsZCBhbHdheXMgc2V0IG1hcmdpbi1ib3R0b20gZm9yIHRoZSBjb250ZW50LFxyXG4gICAgICAgIC8vIHRoZW4gaXQgd291bGQgcG90ZW50aWFsbHkgYnJlYWsgdmVydGljYWwgYWxpZ25cclxuICAgICAgICBpZiAoY3VycmVudC4kY29udGVudC5vdXRlckhlaWdodCgpID4gY3VycmVudC4kc2xpZGUuaGVpZ2h0KCkgKyAwLjUpIHtcclxuICAgICAgICAgIGlubGluZVBhZGRpbmcgPSBjdXJyZW50LiRzbGlkZVswXS5zdHlsZVtcInBhZGRpbmctYm90dG9tXCJdO1xyXG4gICAgICAgICAgYWN0dWFsUGFkZGluZyA9IGN1cnJlbnQuJHNsaWRlLmNzcyhcInBhZGRpbmctYm90dG9tXCIpO1xyXG5cclxuICAgICAgICAgIGlmIChwYXJzZUZsb2F0KGFjdHVhbFBhZGRpbmcpID4gMCkge1xyXG4gICAgICAgICAgICBzY3JvbGxIZWlnaHQgPSBjdXJyZW50LiRzbGlkZVswXS5zY3JvbGxIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LiRzbGlkZS5jc3MoXCJwYWRkaW5nLWJvdHRvbVwiLCAwKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhzY3JvbGxIZWlnaHQgLSBjdXJyZW50LiRzbGlkZVswXS5zY3JvbGxIZWlnaHQpIDwgMSkge1xyXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbSA9IGFjdHVhbFBhZGRpbmc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnQuJHNsaWRlLmNzcyhcInBhZGRpbmctYm90dG9tXCIsIGlubGluZVBhZGRpbmcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3VycmVudC4kY29udGVudC5jc3MoXCJtYXJnaW4tYm90dG9tXCIsIG1hcmdpbkJvdHRvbSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gTWFrZSBjb250ZW50IHZpc2libGVcclxuICAgIC8vIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCByaWdodCBhZnRlciBjb250ZW50IGhhcyBiZWVuIGxvYWRlZCBvclxyXG4gICAgLy8gdXNlciBuYXZpZ2F0ZXMgZ2FsbGVyeSBhbmQgdHJhbnNpdGlvbiBzaG91bGQgc3RhcnRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHJldmVhbENvbnRlbnQ6IGZ1bmN0aW9uIChzbGlkZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgJHNsaWRlID0gc2xpZGUuJHNsaWRlLFxyXG4gICAgICAgIGVuZCA9IGZhbHNlLFxyXG4gICAgICAgIHN0YXJ0ID0gZmFsc2UsXHJcbiAgICAgICAgaXNNb3ZlZCA9IHNlbGYuaXNNb3ZlZChzbGlkZSksXHJcbiAgICAgICAgaXNSZXZlYWxlZCA9IHNsaWRlLmlzUmV2ZWFsZWQsXHJcbiAgICAgICAgZWZmZWN0LFxyXG4gICAgICAgIGVmZmVjdENsYXNzTmFtZSxcclxuICAgICAgICBkdXJhdGlvbixcclxuICAgICAgICBvcGFjaXR5O1xyXG5cclxuICAgICAgc2xpZGUuaXNSZXZlYWxlZCA9IHRydWU7XHJcblxyXG4gICAgICBlZmZlY3QgPSBzbGlkZS5vcHRzW3NlbGYuZmlyc3RSdW4gPyBcImFuaW1hdGlvbkVmZmVjdFwiIDogXCJ0cmFuc2l0aW9uRWZmZWN0XCJdO1xyXG4gICAgICBkdXJhdGlvbiA9IHNsaWRlLm9wdHNbc2VsZi5maXJzdFJ1biA/IFwiYW5pbWF0aW9uRHVyYXRpb25cIiA6IFwidHJhbnNpdGlvbkR1cmF0aW9uXCJdO1xyXG5cclxuICAgICAgZHVyYXRpb24gPSBwYXJzZUludChzbGlkZS5mb3JjZWREdXJhdGlvbiA9PT0gdW5kZWZpbmVkID8gZHVyYXRpb24gOiBzbGlkZS5mb3JjZWREdXJhdGlvbiwgMTApO1xyXG5cclxuICAgICAgaWYgKGlzTW92ZWQgfHwgc2xpZGUucG9zICE9PSBzZWxmLmN1cnJQb3MgfHwgIWR1cmF0aW9uKSB7XHJcbiAgICAgICAgZWZmZWN0ID0gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIGNhbiB6b29tXHJcbiAgICAgIGlmIChlZmZlY3QgPT09IFwiem9vbVwiKSB7XHJcbiAgICAgICAgaWYgKHNsaWRlLnBvcyA9PT0gc2VsZi5jdXJyUG9zICYmIGR1cmF0aW9uICYmIHNsaWRlLnR5cGUgPT09IFwiaW1hZ2VcIiAmJiAhc2xpZGUuaGFzRXJyb3IgJiYgKHN0YXJ0ID0gc2VsZi5nZXRUaHVtYlBvcyhzbGlkZSkpKSB7XHJcbiAgICAgICAgICBlbmQgPSBzZWxmLmdldEZpdFBvcyhzbGlkZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGVmZmVjdCA9IFwiZmFkZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gWm9vbSBhbmltYXRpb25cclxuICAgICAgLy8gPT09PT09PT09PT09PT1cclxuICAgICAgaWYgKGVmZmVjdCA9PT0gXCJ6b29tXCIpIHtcclxuICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgZW5kLnNjYWxlWCA9IGVuZC53aWR0aCAvIHN0YXJ0LndpZHRoO1xyXG4gICAgICAgIGVuZC5zY2FsZVkgPSBlbmQuaGVpZ2h0IC8gc3RhcnQuaGVpZ2h0O1xyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGFuaW1hdGUgb3BhY2l0eVxyXG4gICAgICAgIG9wYWNpdHkgPSBzbGlkZS5vcHRzLnpvb21PcGFjaXR5O1xyXG5cclxuICAgICAgICBpZiAob3BhY2l0eSA9PSBcImF1dG9cIikge1xyXG4gICAgICAgICAgb3BhY2l0eSA9IE1hdGguYWJzKHNsaWRlLndpZHRoIC8gc2xpZGUuaGVpZ2h0IC0gc3RhcnQud2lkdGggLyBzdGFydC5oZWlnaHQpID4gMC4xO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wYWNpdHkpIHtcclxuICAgICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSAwLjE7XHJcbiAgICAgICAgICBlbmQub3BhY2l0eSA9IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEcmF3IGltYWdlIGF0IHN0YXJ0IHBvc2l0aW9uXHJcbiAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoc2xpZGUuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIiksIHN0YXJ0KTtcclxuXHJcbiAgICAgICAgZm9yY2VSZWRyYXcoc2xpZGUuJGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAvLyBTdGFydCBhbmltYXRpb25cclxuICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoc2xpZGUuJGNvbnRlbnQsIGVuZCwgZHVyYXRpb24sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICBzZWxmLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi51cGRhdGVTbGlkZShzbGlkZSk7XHJcblxyXG4gICAgICAvLyBTaW1wbHkgc2hvdyBjb250ZW50IGlmIG5vIGVmZmVjdFxyXG4gICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgICBpZiAoIWVmZmVjdCkge1xyXG4gICAgICAgIHNsaWRlLiRjb250ZW50LnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtaGlkZGVuXCIpO1xyXG5cclxuICAgICAgICBpZiAoIWlzUmV2ZWFsZWQgJiYgaXNNb3ZlZCAmJiBzbGlkZS50eXBlID09PSBcImltYWdlXCIgJiYgIXNsaWRlLmhhc0Vycm9yKSB7XHJcbiAgICAgICAgICBzbGlkZS4kY29udGVudC5oaWRlKCkuZmFkZUluKFwiZmFzdFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcykge1xyXG4gICAgICAgICAgc2VsZi5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBQcmVwYXJlIGZvciBDU1MgdHJhbnNpdG9uXHJcbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICAgJC5mYW5jeWJveC5zdG9wKCRzbGlkZSk7XHJcblxyXG4gICAgICAvL2VmZmVjdENsYXNzTmFtZSA9IFwiZmFuY3lib3gtYW5pbWF0ZWQgZmFuY3lib3gtc2xpZGUtLVwiICsgKHNsaWRlLnBvcyA+PSBzZWxmLnByZXZQb3MgPyBcIm5leHRcIiA6IFwicHJldmlvdXNcIikgKyBcIiBmYW5jeWJveC1meC1cIiArIGVmZmVjdDtcclxuICAgICAgZWZmZWN0Q2xhc3NOYW1lID0gXCJmYW5jeWJveC1zbGlkZS0tXCIgKyAoc2xpZGUucG9zID49IHNlbGYucHJldlBvcyA/IFwibmV4dFwiIDogXCJwcmV2aW91c1wiKSArIFwiIGZhbmN5Ym94LWFuaW1hdGVkIGZhbmN5Ym94LWZ4LVwiICsgZWZmZWN0O1xyXG5cclxuICAgICAgJHNsaWRlLmFkZENsYXNzKGVmZmVjdENsYXNzTmFtZSkucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tY3VycmVudFwiKTsgLy8uYWRkQ2xhc3MoZWZmZWN0Q2xhc3NOYW1lKTtcclxuXHJcbiAgICAgIHNsaWRlLiRjb250ZW50LnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtaGlkZGVuXCIpO1xyXG5cclxuICAgICAgLy8gRm9yY2UgcmVmbG93XHJcbiAgICAgIGZvcmNlUmVkcmF3KCRzbGlkZSk7XHJcblxyXG4gICAgICBpZiAoc2xpZGUudHlwZSAhPT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgc2xpZGUuJGNvbnRlbnQuaGlkZSgpLnNob3coMCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICQuZmFuY3lib3guYW5pbWF0ZShcclxuICAgICAgICAkc2xpZGUsXHJcbiAgICAgICAgXCJmYW5jeWJveC1zbGlkZS0tY3VycmVudFwiLFxyXG4gICAgICAgIGR1cmF0aW9uLFxyXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICRzbGlkZS5yZW1vdmVDbGFzcyhlZmZlY3RDbGFzc05hbWUpLmNzcyh7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogXCJcIixcclxuICAgICAgICAgICAgb3BhY2l0eTogXCJcIlxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaWYgKHNsaWRlLnBvcyA9PT0gc2VsZi5jdXJyUG9zKSB7XHJcbiAgICAgICAgICAgIHNlbGYuY29tcGxldGUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHRydWVcclxuICAgICAgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgd2UgY2FuIGFuZCBoYXZlIHRvIHpvb20gZnJvbSB0aHVtYm5haWxcclxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgZ2V0VGh1bWJQb3M6IGZ1bmN0aW9uIChzbGlkZSkge1xyXG4gICAgICB2YXIgcmV6ID0gZmFsc2UsXHJcbiAgICAgICAgJHRodW1iID0gc2xpZGUuJHRodW1iLFxyXG4gICAgICAgIHRodW1iUG9zLFxyXG4gICAgICAgIGJ0dyxcclxuICAgICAgICBicncsXHJcbiAgICAgICAgYmJ3LFxyXG4gICAgICAgIGJsdztcclxuXHJcbiAgICAgIGlmICghJHRodW1iIHx8ICFpblZpZXdwb3J0KCR0aHVtYlswXSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRodW1iUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoJHRodW1iKTtcclxuXHJcbiAgICAgIGJ0dyA9IHBhcnNlRmxvYXQoJHRodW1iLmNzcyhcImJvcmRlci10b3Atd2lkdGhcIikgfHwgMCk7XHJcbiAgICAgIGJydyA9IHBhcnNlRmxvYXQoJHRodW1iLmNzcyhcImJvcmRlci1yaWdodC13aWR0aFwiKSB8fCAwKTtcclxuICAgICAgYmJ3ID0gcGFyc2VGbG9hdCgkdGh1bWIuY3NzKFwiYm9yZGVyLWJvdHRvbS13aWR0aFwiKSB8fCAwKTtcclxuICAgICAgYmx3ID0gcGFyc2VGbG9hdCgkdGh1bWIuY3NzKFwiYm9yZGVyLWxlZnQtd2lkdGhcIikgfHwgMCk7XHJcblxyXG4gICAgICByZXogPSB7XHJcbiAgICAgICAgdG9wOiB0aHVtYlBvcy50b3AgKyBidHcsXHJcbiAgICAgICAgbGVmdDogdGh1bWJQb3MubGVmdCArIGJsdyxcclxuICAgICAgICB3aWR0aDogdGh1bWJQb3Mud2lkdGggLSBicncgLSBibHcsXHJcbiAgICAgICAgaGVpZ2h0OiB0aHVtYlBvcy5oZWlnaHQgLSBidHcgLSBiYncsXHJcbiAgICAgICAgc2NhbGVYOiAxLFxyXG4gICAgICAgIHNjYWxlWTogMVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIHRodW1iUG9zLndpZHRoID4gMCAmJiB0aHVtYlBvcy5oZWlnaHQgPiAwID8gcmV6IDogZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEZpbmFsIGFkanVzdG1lbnRzIGFmdGVyIGN1cnJlbnQgZ2FsbGVyeSBpdGVtIGlzIG1vdmVkIHRvIHBvc2l0aW9uXHJcbiAgICAvLyBhbmQgaXRgcyBjb250ZW50IGlzIGxvYWRlZFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgc2xpZGVzID0ge30sXHJcbiAgICAgICAgJGVsO1xyXG5cclxuICAgICAgaWYgKHNlbGYuaXNNb3ZlZCgpIHx8ICFjdXJyZW50LmlzTG9hZGVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWN1cnJlbnQuaXNDb21wbGV0ZSkge1xyXG4gICAgICAgIGN1cnJlbnQuaXNDb21wbGV0ZSA9IHRydWU7XHJcblxyXG4gICAgICAgIGN1cnJlbnQuJHNsaWRlLnNpYmxpbmdzKCkudHJpZ2dlcihcIm9uUmVzZXRcIik7XHJcblxyXG4gICAgICAgIHNlbGYucHJlbG9hZChcImlubGluZVwiKTtcclxuXHJcbiAgICAgICAgLy8gVHJpZ2dlciBhbnkgQ1NTIHRyYW5zaXRvbiBpbnNpZGUgdGhlIHNsaWRlXHJcbiAgICAgICAgZm9yY2VSZWRyYXcoY3VycmVudC4kc2xpZGUpO1xyXG5cclxuICAgICAgICBjdXJyZW50LiRzbGlkZS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1jb21wbGV0ZVwiKTtcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIHVubmVjZXNzYXJ5IHNsaWRlc1xyXG4gICAgICAgICQuZWFjaChzZWxmLnNsaWRlcywgZnVuY3Rpb24gKGtleSwgc2xpZGUpIHtcclxuICAgICAgICAgIGlmIChzbGlkZS5wb3MgPj0gc2VsZi5jdXJyUG9zIC0gMSAmJiBzbGlkZS5wb3MgPD0gc2VsZi5jdXJyUG9zICsgMSkge1xyXG4gICAgICAgICAgICBzbGlkZXNbc2xpZGUucG9zXSA9IHNsaWRlO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChzbGlkZSkge1xyXG4gICAgICAgICAgICAkLmZhbmN5Ym94LnN0b3Aoc2xpZGUuJHNsaWRlKTtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlLiRzbGlkZS5vZmYoKS5yZW1vdmUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2VsZi5zbGlkZXMgPSBzbGlkZXM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgIHNlbGYudXBkYXRlQ3Vyc29yKCk7XHJcblxyXG4gICAgICBzZWxmLnRyaWdnZXIoXCJhZnRlclNob3dcIik7XHJcblxyXG4gICAgICAvLyBBdXRvcGxheSBmaXJzdCBodG1sNSB2aWRlby9hdWRpb1xyXG4gICAgICBpZiAoISFjdXJyZW50Lm9wdHMudmlkZW8uYXV0b1N0YXJ0KSB7XHJcbiAgICAgICAgY3VycmVudC4kc2xpZGVcclxuICAgICAgICAgIC5maW5kKFwidmlkZW8sYXVkaW9cIilcclxuICAgICAgICAgIC5maWx0ZXIoXCI6dmlzaWJsZTpmaXJzdFwiKVxyXG4gICAgICAgICAgLnRyaWdnZXIoXCJwbGF5XCIpXHJcbiAgICAgICAgICAub25lKFwiZW5kZWRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoRG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4pIHtcclxuICAgICAgICAgICAgICBEb2N1bWVudC5leGl0RnVsbHNjcmVlbigpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMud2Via2l0RXhpdEZ1bGxzY3JlZW4pIHtcclxuICAgICAgICAgICAgICB0aGlzLndlYmtpdEV4aXRGdWxsc2NyZWVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGYubmV4dCgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRyeSB0byBmb2N1cyBvbiB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnRcclxuICAgICAgaWYgKGN1cnJlbnQub3B0cy5hdXRvRm9jdXMgJiYgY3VycmVudC5jb250ZW50VHlwZSA9PT0gXCJodG1sXCIpIHtcclxuICAgICAgICAvLyBMb29rIGZvciB0aGUgZmlyc3QgaW5wdXQgd2l0aCBhdXRvZm9jdXMgYXR0cmlidXRlXHJcbiAgICAgICAgJGVsID0gY3VycmVudC4kY29udGVudC5maW5kKFwiaW5wdXRbYXV0b2ZvY3VzXTplbmFibGVkOnZpc2libGU6Zmlyc3RcIik7XHJcblxyXG4gICAgICAgIGlmICgkZWwubGVuZ3RoKSB7XHJcbiAgICAgICAgICAkZWwudHJpZ2dlcihcImZvY3VzXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZWxmLmZvY3VzKG51bGwsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQXZvaWQganVtcGluZ1xyXG4gICAgICBjdXJyZW50LiRzbGlkZS5zY3JvbGxUb3AoMCkuc2Nyb2xsTGVmdCgwKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gUHJlbG9hZCBuZXh0IGFuZCBwcmV2aW91cyBzbGlkZXNcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgcHJlbG9hZDogZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIHByZXYsXHJcbiAgICAgICAgbmV4dDtcclxuXHJcbiAgICAgIGlmIChzZWxmLmdyb3VwLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG5leHQgPSBzZWxmLnNsaWRlc1tzZWxmLmN1cnJQb3MgKyAxXTtcclxuICAgICAgcHJldiA9IHNlbGYuc2xpZGVzW3NlbGYuY3VyclBvcyAtIDFdO1xyXG5cclxuICAgICAgaWYgKHByZXYgJiYgcHJldi50eXBlID09PSB0eXBlKSB7XHJcbiAgICAgICAgc2VsZi5sb2FkU2xpZGUocHJldik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChuZXh0ICYmIG5leHQudHlwZSA9PT0gdHlwZSkge1xyXG4gICAgICAgIHNlbGYubG9hZFNsaWRlKG5leHQpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFRyeSB0byBmaW5kIGFuZCBmb2N1cyBvbiB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBmb2N1czogZnVuY3Rpb24gKGUsIGZpcnN0UnVuKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBmb2N1c2FibGVTdHIgPSBbXHJcbiAgICAgICAgICBcImFbaHJlZl1cIixcclxuICAgICAgICAgIFwiYXJlYVtocmVmXVwiLFxyXG4gICAgICAgICAgJ2lucHV0Om5vdChbZGlzYWJsZWRdKTpub3QoW3R5cGU9XCJoaWRkZW5cIl0pOm5vdChbYXJpYS1oaWRkZW5dKScsXHJcbiAgICAgICAgICBcInNlbGVjdDpub3QoW2Rpc2FibGVkXSk6bm90KFthcmlhLWhpZGRlbl0pXCIsXHJcbiAgICAgICAgICBcInRleHRhcmVhOm5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSlcIixcclxuICAgICAgICAgIFwiYnV0dG9uOm5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSlcIixcclxuICAgICAgICAgIFwiaWZyYW1lXCIsXHJcbiAgICAgICAgICBcIm9iamVjdFwiLFxyXG4gICAgICAgICAgXCJlbWJlZFwiLFxyXG4gICAgICAgICAgXCJ2aWRlb1wiLFxyXG4gICAgICAgICAgXCJhdWRpb1wiLFxyXG4gICAgICAgICAgXCJbY29udGVudGVkaXRhYmxlXVwiLFxyXG4gICAgICAgICAgJ1t0YWJpbmRleF06bm90KFt0YWJpbmRleF49XCItXCJdKSdcclxuICAgICAgICBdLmpvaW4oXCIsXCIpLFxyXG4gICAgICAgIGZvY3VzYWJsZUl0ZW1zLFxyXG4gICAgICAgIGZvY3VzZWRJdGVtSW5kZXg7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc0Nsb3NpbmcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChlIHx8ICFzZWxmLmN1cnJlbnQgfHwgIXNlbGYuY3VycmVudC5pc0NvbXBsZXRlKSB7XHJcbiAgICAgICAgLy8gRm9jdXMgb24gYW55IGVsZW1lbnQgaW5zaWRlIGZhbmN5Ym94XHJcbiAgICAgICAgZm9jdXNhYmxlSXRlbXMgPSBzZWxmLiRyZWZzLmNvbnRhaW5lci5maW5kKFwiKjp2aXNpYmxlXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZvY3VzIGluc2lkZSBjdXJyZW50IHNsaWRlXHJcbiAgICAgICAgZm9jdXNhYmxlSXRlbXMgPSBzZWxmLmN1cnJlbnQuJHNsaWRlLmZpbmQoXCIqOnZpc2libGVcIiArIChmaXJzdFJ1biA/IFwiOm5vdCguZmFuY3lib3gtY2xvc2Utc21hbGwpXCIgOiBcIlwiKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvY3VzYWJsZUl0ZW1zID0gZm9jdXNhYmxlSXRlbXMuZmlsdGVyKGZvY3VzYWJsZVN0cikuZmlsdGVyKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJCh0aGlzKS5jc3MoXCJ2aXNpYmlsaXR5XCIpICE9PSBcImhpZGRlblwiICYmICEkKHRoaXMpLmhhc0NsYXNzKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKGZvY3VzYWJsZUl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgIGZvY3VzZWRJdGVtSW5kZXggPSBmb2N1c2FibGVJdGVtcy5pbmRleChkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcclxuXHJcbiAgICAgICAgaWYgKGUgJiYgZS5zaGlmdEtleSkge1xyXG4gICAgICAgICAgLy8gQmFjayB0YWJcclxuICAgICAgICAgIGlmIChmb2N1c2VkSXRlbUluZGV4IDwgMCB8fCBmb2N1c2VkSXRlbUluZGV4ID09IDApIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgZm9jdXNhYmxlSXRlbXMuZXEoZm9jdXNhYmxlSXRlbXMubGVuZ3RoIC0gMSkudHJpZ2dlcihcImZvY3VzXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBPdXRzaWRlIG9yIEZvcndhcmQgdGFiXHJcbiAgICAgICAgICBpZiAoZm9jdXNlZEl0ZW1JbmRleCA8IDAgfHwgZm9jdXNlZEl0ZW1JbmRleCA9PSBmb2N1c2FibGVJdGVtcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb2N1c2FibGVJdGVtcy5lcSgwKS50cmlnZ2VyKFwiZm9jdXNcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLnRyaWdnZXIoXCJmb2N1c1wiKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBBY3RpdmF0ZXMgY3VycmVudCBpbnN0YW5jZSAtIGJyaW5ncyBjb250YWluZXIgdG8gdGhlIGZyb250IGFuZCBlbmFibGVzIGtleWJvYXJkLFxyXG4gICAgLy8gbm90aWZpZXMgb3RoZXIgaW5zdGFuY2VzIGFib3V0IGRlYWN0aXZhdGluZ1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgLy8gRGVhY3RpdmF0ZSBhbGwgaW5zdGFuY2VzXHJcbiAgICAgICQoXCIuZmFuY3lib3gtY29udGFpbmVyXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9ICQodGhpcykuZGF0YShcIkZhbmN5Qm94XCIpO1xyXG5cclxuICAgICAgICAvLyBTa2lwIHNlbGYgYW5kIGNsb3NpbmcgaW5zdGFuY2VzXHJcbiAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmlkICE9PSBzZWxmLmlkICYmICFpbnN0YW5jZS5pc0Nsb3NpbmcpIHtcclxuICAgICAgICAgIGluc3RhbmNlLnRyaWdnZXIoXCJvbkRlYWN0aXZhdGVcIik7XHJcblxyXG4gICAgICAgICAgaW5zdGFuY2UucmVtb3ZlRXZlbnRzKCk7XHJcblxyXG4gICAgICAgICAgaW5zdGFuY2UuaXNWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNlbGYuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgIGlmIChzZWxmLmN1cnJlbnQgfHwgc2VsZi5pc0lkbGUpIHtcclxuICAgICAgICBzZWxmLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZUNvbnRyb2xzKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYudHJpZ2dlcihcIm9uQWN0aXZhdGVcIik7XHJcblxyXG4gICAgICBzZWxmLmFkZEV2ZW50cygpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBTdGFydCBjbG9zaW5nIHByb2NlZHVyZVxyXG4gICAgLy8gVGhpcyB3aWxsIHN0YXJ0IFwiem9vbS1vdXRcIiBhbmltYXRpb24gaWYgbmVlZGVkIGFuZCBjbGVhbiBldmVyeXRoaW5nIHVwIGFmdGVyd2FyZHNcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGNsb3NlOiBmdW5jdGlvbiAoZSwgZCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICBlZmZlY3QsXHJcbiAgICAgICAgZHVyYXRpb24sXHJcbiAgICAgICAgJGNvbnRlbnQsXHJcbiAgICAgICAgZG9tUmVjdCxcclxuICAgICAgICBvcGFjaXR5LFxyXG4gICAgICAgIHN0YXJ0LFxyXG4gICAgICAgIGVuZDtcclxuXHJcbiAgICAgIHZhciBkb25lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNlbGYuY2xlYW5VcChlKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGlmIChzZWxmLmlzQ2xvc2luZykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi5pc0Nsb3NpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgLy8gSWYgYmVmb3JlQ2xvc2UgY2FsbGJhY2sgcHJldmVudHMgY2xvc2luZywgbWFrZSBzdXJlIGNvbnRlbnQgaXMgY2VudGVyZWRcclxuICAgICAgaWYgKHNlbGYudHJpZ2dlcihcImJlZm9yZUNsb3NlXCIsIGUpID09PSBmYWxzZSkge1xyXG4gICAgICAgIHNlbGYuaXNDbG9zaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgc2VsZi51cGRhdGUoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZW1vdmUgYWxsIGV2ZW50c1xyXG4gICAgICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgaW5zdGFuY2VzLCB0aGV5IHdpbGwgYmUgc2V0IGFnYWluIGJ5IFwiYWN0aXZhdGVcIiBtZXRob2RcclxuICAgICAgc2VsZi5yZW1vdmVFdmVudHMoKTtcclxuXHJcbiAgICAgICRjb250ZW50ID0gY3VycmVudC4kY29udGVudDtcclxuICAgICAgZWZmZWN0ID0gY3VycmVudC5vcHRzLmFuaW1hdGlvbkVmZmVjdDtcclxuICAgICAgZHVyYXRpb24gPSAkLmlzTnVtZXJpYyhkKSA/IGQgOiBlZmZlY3QgPyBjdXJyZW50Lm9wdHMuYW5pbWF0aW9uRHVyYXRpb24gOiAwO1xyXG5cclxuICAgICAgY3VycmVudC4kc2xpZGUucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tY29tcGxldGUgZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzIGZhbmN5Ym94LWFuaW1hdGVkXCIpO1xyXG5cclxuICAgICAgaWYgKGUgIT09IHRydWUpIHtcclxuICAgICAgICAkLmZhbmN5Ym94LnN0b3AoY3VycmVudC4kc2xpZGUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVmZmVjdCA9IGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZW1vdmUgb3RoZXIgc2xpZGVzXHJcbiAgICAgIGN1cnJlbnQuJHNsaWRlXHJcbiAgICAgICAgLnNpYmxpbmdzKClcclxuICAgICAgICAudHJpZ2dlcihcIm9uUmVzZXRcIilcclxuICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgICAvLyBUcmlnZ2VyIGFuaW1hdGlvbnNcclxuICAgICAgaWYgKGR1cmF0aW9uKSB7XHJcbiAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXJcclxuICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLW9wZW5cIilcclxuICAgICAgICAgIC5hZGRDbGFzcyhcImZhbmN5Ym94LWlzLWNsb3NpbmdcIilcclxuICAgICAgICAgIC5jc3MoXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIsIGR1cmF0aW9uICsgXCJtc1wiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2xlYW4gdXBcclxuICAgICAgc2VsZi5oaWRlTG9hZGluZyhjdXJyZW50KTtcclxuXHJcbiAgICAgIHNlbGYuaGlkZUNvbnRyb2xzKHRydWUpO1xyXG5cclxuICAgICAgc2VsZi51cGRhdGVDdXJzb3IoKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHBvc3NpYmxlIHRvIHpvb20tb3V0XHJcbiAgICAgIGlmIChcclxuICAgICAgICBlZmZlY3QgPT09IFwiem9vbVwiICYmXHJcbiAgICAgICAgISgkY29udGVudCAmJiBkdXJhdGlvbiAmJiBjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiAmJiAhc2VsZi5pc01vdmVkKCkgJiYgIWN1cnJlbnQuaGFzRXJyb3IgJiYgKGVuZCA9IHNlbGYuZ2V0VGh1bWJQb3MoY3VycmVudCkpKVxyXG4gICAgICApIHtcclxuICAgICAgICBlZmZlY3QgPSBcImZhZGVcIjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVmZmVjdCA9PT0gXCJ6b29tXCIpIHtcclxuICAgICAgICAkLmZhbmN5Ym94LnN0b3AoJGNvbnRlbnQpO1xyXG5cclxuICAgICAgICBkb21SZWN0ID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoJGNvbnRlbnQpO1xyXG5cclxuICAgICAgICBzdGFydCA9IHtcclxuICAgICAgICAgIHRvcDogZG9tUmVjdC50b3AsXHJcbiAgICAgICAgICBsZWZ0OiBkb21SZWN0LmxlZnQsXHJcbiAgICAgICAgICBzY2FsZVg6IGRvbVJlY3Qud2lkdGggLyBlbmQud2lkdGgsXHJcbiAgICAgICAgICBzY2FsZVk6IGRvbVJlY3QuaGVpZ2h0IC8gZW5kLmhlaWdodCxcclxuICAgICAgICAgIHdpZHRoOiBlbmQud2lkdGgsXHJcbiAgICAgICAgICBoZWlnaHQ6IGVuZC5oZWlnaHRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGFuaW1hdGUgb3BhY2l0eVxyXG4gICAgICAgIG9wYWNpdHkgPSBjdXJyZW50Lm9wdHMuem9vbU9wYWNpdHk7XHJcblxyXG4gICAgICAgIGlmIChvcGFjaXR5ID09IFwiYXV0b1wiKSB7XHJcbiAgICAgICAgICBvcGFjaXR5ID0gTWF0aC5hYnMoY3VycmVudC53aWR0aCAvIGN1cnJlbnQuaGVpZ2h0IC0gZW5kLndpZHRoIC8gZW5kLmhlaWdodCkgPiAwLjE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3BhY2l0eSkge1xyXG4gICAgICAgICAgZW5kLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoJGNvbnRlbnQsIHN0YXJ0KTtcclxuXHJcbiAgICAgICAgZm9yY2VSZWRyYXcoJGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoJGNvbnRlbnQsIGVuZCwgZHVyYXRpb24sIGRvbmUpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVmZmVjdCAmJiBkdXJhdGlvbikge1xyXG4gICAgICAgICQuZmFuY3lib3guYW5pbWF0ZShcclxuICAgICAgICAgIGN1cnJlbnQuJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzXCIpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWN1cnJlbnRcIiksXHJcbiAgICAgICAgICBcImZhbmN5Ym94LWFuaW1hdGVkIGZhbmN5Ym94LWZ4LVwiICsgZWZmZWN0LFxyXG4gICAgICAgICAgZHVyYXRpb24sXHJcbiAgICAgICAgICBkb25lXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBJZiBza2lwIGFuaW1hdGlvblxyXG4gICAgICAgIGlmIChlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KGRvbmUsIGR1cmF0aW9uKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEZpbmFsIGFkanVzdG1lbnRzIGFmdGVyIHJlbW92aW5nIHRoZSBpbnN0YW5jZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgY2xlYW5VcDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGluc3RhbmNlLFxyXG4gICAgICAgICRmb2N1cyA9IHNlbGYuY3VycmVudC5vcHRzLiRvcmlnLFxyXG4gICAgICAgIHgsXHJcbiAgICAgICAgeTtcclxuXHJcbiAgICAgIHNlbGYuY3VycmVudC4kc2xpZGUudHJpZ2dlcihcIm9uUmVzZXRcIik7XHJcblxyXG4gICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lci5lbXB0eSgpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKFwiYWZ0ZXJDbG9zZVwiLCBlKTtcclxuXHJcbiAgICAgIC8vIFBsYWNlIGJhY2sgZm9jdXNcclxuICAgICAgaWYgKCEhc2VsZi5jdXJyZW50Lm9wdHMuYmFja0ZvY3VzKSB7XHJcbiAgICAgICAgaWYgKCEkZm9jdXMgfHwgISRmb2N1cy5sZW5ndGggfHwgISRmb2N1cy5pcyhcIjp2aXNpYmxlXCIpKSB7XHJcbiAgICAgICAgICAkZm9jdXMgPSBzZWxmLiR0cmlnZ2VyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCRmb2N1cyAmJiAkZm9jdXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICB4ID0gd2luZG93LnNjcm9sbFg7XHJcbiAgICAgICAgICB5ID0gd2luZG93LnNjcm9sbFk7XHJcblxyXG4gICAgICAgICAgJGZvY3VzLnRyaWdnZXIoXCJmb2N1c1wiKTtcclxuXHJcbiAgICAgICAgICAkKFwiaHRtbCwgYm9keVwiKVxyXG4gICAgICAgICAgICAuc2Nyb2xsVG9wKHkpXHJcbiAgICAgICAgICAgIC5zY3JvbGxMZWZ0KHgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi5jdXJyZW50ID0gbnVsbDtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBvdGhlciBpbnN0YW5jZXNcclxuICAgICAgaW5zdGFuY2UgPSAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCk7XHJcblxyXG4gICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5hY3RpdmF0ZSgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtYWN0aXZlIGNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhclwiKTtcclxuXHJcbiAgICAgICAgJChcIiNmYW5jeWJveC1zdHlsZS1ub3Njcm9sbFwiKS5yZW1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDYWxsIGNhbGxiYWNrIGFuZCB0cmlnZ2VyIGFuIGV2ZW50XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdHJpZ2dlcjogZnVuY3Rpb24gKG5hbWUsIHNsaWRlKSB7XHJcbiAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcclxuICAgICAgICBzZWxmID0gdGhpcyxcclxuICAgICAgICBvYmogPSBzbGlkZSAmJiBzbGlkZS5vcHRzID8gc2xpZGUgOiBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgcmV6O1xyXG5cclxuICAgICAgaWYgKG9iaikge1xyXG4gICAgICAgIGFyZ3MudW5zaGlmdChvYmopO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9iaiA9IHNlbGY7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGFyZ3MudW5zaGlmdChzZWxmKTtcclxuXHJcbiAgICAgIGlmICgkLmlzRnVuY3Rpb24ob2JqLm9wdHNbbmFtZV0pKSB7XHJcbiAgICAgICAgcmV6ID0gb2JqLm9wdHNbbmFtZV0uYXBwbHkob2JqLCBhcmdzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHJleiA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gcmV6O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobmFtZSA9PT0gXCJhZnRlckNsb3NlXCIgfHwgIXNlbGYuJHJlZnMpIHtcclxuICAgICAgICAkRC50cmlnZ2VyKG5hbWUgKyBcIi5mYlwiLCBhcmdzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lci50cmlnZ2VyKG5hbWUgKyBcIi5mYlwiLCBhcmdzKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBVcGRhdGUgaW5mb2JhciB2YWx1ZXMsIG5hdmlnYXRpb24gYnV0dG9uIHN0YXRlcyBhbmQgcmV2ZWFsIGNhcHRpb25cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHVwZGF0ZUNvbnRyb2xzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBjdXJyZW50ID0gc2VsZi5jdXJyZW50LFxyXG4gICAgICAgIGluZGV4ID0gY3VycmVudC5pbmRleCxcclxuICAgICAgICAkY29udGFpbmVyID0gc2VsZi4kcmVmcy5jb250YWluZXIsXHJcbiAgICAgICAgJGNhcHRpb24gPSBzZWxmLiRyZWZzLmNhcHRpb24sXHJcbiAgICAgICAgY2FwdGlvbiA9IGN1cnJlbnQub3B0cy5jYXB0aW9uO1xyXG5cclxuICAgICAgLy8gUmVjYWxjdWxhdGUgY29udGVudCBkaW1lbnNpb25zXHJcbiAgICAgIGN1cnJlbnQuJHNsaWRlLnRyaWdnZXIoXCJyZWZyZXNoXCIpO1xyXG5cclxuICAgICAgLy8gU2V0IGNhcHRpb25cclxuICAgICAgaWYgKGNhcHRpb24gJiYgY2FwdGlvbi5sZW5ndGgpIHtcclxuICAgICAgICBzZWxmLiRjYXB0aW9uID0gJGNhcHRpb247XHJcblxyXG4gICAgICAgICRjYXB0aW9uXHJcbiAgICAgICAgICAuY2hpbGRyZW4oKVxyXG4gICAgICAgICAgLmVxKDApXHJcbiAgICAgICAgICAuaHRtbChjYXB0aW9uKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLiRjYXB0aW9uID0gbnVsbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFzZWxmLmhhc0hpZGRlbkNvbnRyb2xzICYmICFzZWxmLmlzSWRsZSkge1xyXG4gICAgICAgIHNlbGYuc2hvd0NvbnRyb2xzKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBpbmZvIGFuZCBuYXZpZ2F0aW9uIGVsZW1lbnRzXHJcbiAgICAgICRjb250YWluZXIuZmluZChcIltkYXRhLWZhbmN5Ym94LWNvdW50XVwiKS5odG1sKHNlbGYuZ3JvdXAubGVuZ3RoKTtcclxuICAgICAgJGNvbnRhaW5lci5maW5kKFwiW2RhdGEtZmFuY3lib3gtaW5kZXhdXCIpLmh0bWwoaW5kZXggKyAxKTtcclxuXHJcbiAgICAgICRjb250YWluZXIuZmluZChcIltkYXRhLWZhbmN5Ym94LXByZXZdXCIpLnByb3AoXCJkaXNhYmxlZFwiLCAhY3VycmVudC5vcHRzLmxvb3AgJiYgaW5kZXggPD0gMCk7XHJcbiAgICAgICRjb250YWluZXIuZmluZChcIltkYXRhLWZhbmN5Ym94LW5leHRdXCIpLnByb3AoXCJkaXNhYmxlZFwiLCAhY3VycmVudC5vcHRzLmxvb3AgJiYgaW5kZXggPj0gc2VsZi5ncm91cC5sZW5ndGggLSAxKTtcclxuXHJcbiAgICAgIGlmIChjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIikge1xyXG4gICAgICAgIC8vIFJlLWVuYWJsZSBidXR0b25zOyB1cGRhdGUgZG93bmxvYWQgYnV0dG9uIHNvdXJjZVxyXG4gICAgICAgICRjb250YWluZXJcclxuICAgICAgICAgIC5maW5kKFwiW2RhdGEtZmFuY3lib3gtem9vbV1cIilcclxuICAgICAgICAgIC5zaG93KClcclxuICAgICAgICAgIC5lbmQoKVxyXG4gICAgICAgICAgLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1kb3dubG9hZF1cIilcclxuICAgICAgICAgIC5hdHRyKFwiaHJlZlwiLCBjdXJyZW50Lm9wdHMuaW1hZ2Uuc3JjIHx8IGN1cnJlbnQuc3JjKVxyXG4gICAgICAgICAgLnNob3coKTtcclxuICAgICAgfSBlbHNlIGlmIChjdXJyZW50Lm9wdHMudG9vbGJhcikge1xyXG4gICAgICAgICRjb250YWluZXIuZmluZChcIltkYXRhLWZhbmN5Ym94LWRvd25sb2FkXSxbZGF0YS1mYW5jeWJveC16b29tXVwiKS5oaWRlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE1ha2Ugc3VyZSBmb2N1cyBpcyBub3Qgb24gZGlzYWJsZWQgYnV0dG9uL2VsZW1lbnRcclxuICAgICAgaWYgKCQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoXCI6aGlkZGVuLFtkaXNhYmxlZF1cIikpIHtcclxuICAgICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lci50cmlnZ2VyKFwiZm9jdXNcIik7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gSGlkZSB0b29sYmFyIGFuZCBjYXB0aW9uXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBoaWRlQ29udHJvbHM6IGZ1bmN0aW9uIChhbmRDYXB0aW9uKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBhcnIgPSBbXCJpbmZvYmFyXCIsIFwidG9vbGJhclwiLCBcIm5hdlwiXTtcclxuXHJcbiAgICAgIGlmIChhbmRDYXB0aW9uIHx8ICFzZWxmLmN1cnJlbnQub3B0cy5wcmV2ZW50Q2FwdGlvbk92ZXJsYXApIHtcclxuICAgICAgICBhcnIucHVzaChcImNhcHRpb25cIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuJHJlZnMuY29udGFpbmVyLnJlbW92ZUNsYXNzKFxyXG4gICAgICAgIGFyclxyXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgIHJldHVybiBcImZhbmN5Ym94LXNob3ctXCIgKyBpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmpvaW4oXCIgXCIpXHJcbiAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLmhhc0hpZGRlbkNvbnRyb2xzID0gdHJ1ZTtcclxuICAgIH0sXHJcblxyXG4gICAgc2hvd0NvbnRyb2xzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBvcHRzID0gc2VsZi5jdXJyZW50ID8gc2VsZi5jdXJyZW50Lm9wdHMgOiBzZWxmLm9wdHMsXHJcbiAgICAgICAgJGNvbnRhaW5lciA9IHNlbGYuJHJlZnMuY29udGFpbmVyO1xyXG5cclxuICAgICAgc2VsZi5oYXNIaWRkZW5Db250cm9scyA9IGZhbHNlO1xyXG4gICAgICBzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA9IDA7XHJcblxyXG4gICAgICAkY29udGFpbmVyXHJcbiAgICAgICAgLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtc2hvdy10b29sYmFyXCIsICEhKG9wdHMudG9vbGJhciAmJiBvcHRzLmJ1dHRvbnMpKVxyXG4gICAgICAgIC50b2dnbGVDbGFzcyhcImZhbmN5Ym94LXNob3ctaW5mb2JhclwiLCAhIShvcHRzLmluZm9iYXIgJiYgc2VsZi5ncm91cC5sZW5ndGggPiAxKSlcclxuICAgICAgICAudG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1zaG93LWNhcHRpb25cIiwgISFzZWxmLiRjYXB0aW9uKVxyXG4gICAgICAgIC50b2dnbGVDbGFzcyhcImZhbmN5Ym94LXNob3ctbmF2XCIsICEhKG9wdHMuYXJyb3dzICYmIHNlbGYuZ3JvdXAubGVuZ3RoID4gMSkpXHJcbiAgICAgICAgLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtaXMtbW9kYWxcIiwgISFvcHRzLm1vZGFsKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gVG9nZ2xlIHRvb2xiYXIgYW5kIGNhcHRpb25cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdG9nZ2xlQ29udHJvbHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHRoaXMuaGFzSGlkZGVuQ29udHJvbHMpIHtcclxuICAgICAgICB0aGlzLnNob3dDb250cm9scygpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaGlkZUNvbnRyb2xzKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgJC5mYW5jeWJveCA9IHtcclxuICAgIHZlcnNpb246IFwiMy41LjdcIixcclxuICAgIGRlZmF1bHRzOiBkZWZhdWx0cyxcclxuXHJcbiAgICAvLyBHZXQgY3VycmVudCBpbnN0YW5jZSBhbmQgZXhlY3V0ZSBhIGNvbW1hbmQuXHJcbiAgICAvL1xyXG4gICAgLy8gRXhhbXBsZXMgb2YgdXNhZ2U6XHJcbiAgICAvL1xyXG4gICAgLy8gICAkaW5zdGFuY2UgPSAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCk7XHJcbiAgICAvLyAgICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKS5qdW1wVG8oIDEgKTtcclxuICAgIC8vICAgJC5mYW5jeWJveC5nZXRJbnN0YW5jZSggJ2p1bXBUbycsIDEgKTtcclxuICAgIC8vICAgJC5mYW5jeWJveC5nZXRJbnN0YW5jZSggZnVuY3Rpb24oKSB7XHJcbiAgICAvLyAgICAgICBjb25zb2xlLmluZm8oIHRoaXMuY3VyckluZGV4ICk7XHJcbiAgICAvLyAgIH0pO1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uIChjb21tYW5kKSB7XHJcbiAgICAgIHZhciBpbnN0YW5jZSA9ICQoJy5mYW5jeWJveC1jb250YWluZXI6bm90KFwiLmZhbmN5Ym94LWlzLWNsb3NpbmdcIik6bGFzdCcpLmRhdGEoXCJGYW5jeUJveFwiKSxcclxuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuXHJcbiAgICAgIGlmIChpbnN0YW5jZSBpbnN0YW5jZW9mIEZhbmN5Qm94KSB7XHJcbiAgICAgICAgaWYgKCQudHlwZShjb21tYW5kKSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgaW5zdGFuY2VbY29tbWFuZF0uYXBwbHkoaW5zdGFuY2UsIGFyZ3MpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoJC50eXBlKGNvbW1hbmQpID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgIGNvbW1hbmQuYXBwbHkoaW5zdGFuY2UsIGFyZ3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENyZWF0ZSBuZXcgaW5zdGFuY2VcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBvcGVuOiBmdW5jdGlvbiAoaXRlbXMsIG9wdHMsIGluZGV4KSB7XHJcbiAgICAgIHJldHVybiBuZXcgRmFuY3lCb3goaXRlbXMsIG9wdHMsIGluZGV4KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2xvc2UgY3VycmVudCBvciBhbGwgaW5zdGFuY2VzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBjbG9zZTogZnVuY3Rpb24gKGFsbCkge1xyXG4gICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmdldEluc3RhbmNlKCk7XHJcblxyXG4gICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS5jbG9zZSgpO1xyXG5cclxuICAgICAgICAvLyBUcnkgdG8gZmluZCBhbmQgY2xvc2UgbmV4dCBpbnN0YW5jZVxyXG4gICAgICAgIGlmIChhbGwgPT09IHRydWUpIHtcclxuICAgICAgICAgIHRoaXMuY2xvc2UoYWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2xvc2UgYWxsIGluc3RhbmNlcyBhbmQgdW5iaW5kIGFsbCBldmVudHNcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xyXG4gICAgICB0aGlzLmNsb3NlKHRydWUpO1xyXG5cclxuICAgICAgJEQuYWRkKFwiYm9keVwiKS5vZmYoXCJjbGljay5mYi1zdGFydFwiLCBcIioqXCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBUcnkgdG8gZGV0ZWN0IG1vYmlsZSBkZXZpY2VzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgaXNNb2JpbGU6IC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxcclxuXHJcbiAgICAvLyBEZXRlY3QgaWYgJ3RyYW5zbGF0ZTNkJyBzdXBwb3J0IGlzIGF2YWlsYWJsZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB1c2UzZDogKGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblxyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICYmXHJcbiAgICAgICAgd2luZG93LmdldENvbXB1dGVkU3R5bGUoZGl2KSAmJlxyXG4gICAgICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRpdikuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKSAmJlxyXG4gICAgICAgICEoZG9jdW1lbnQuZG9jdW1lbnRNb2RlICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSA8IDExKVxyXG4gICAgICApO1xyXG4gICAgfSkoKSxcclxuXHJcbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGN1cnJlbnQgdmlzdWFsIHN0YXRlIG9mIGFuIGVsZW1lbnRcclxuICAgIC8vIHJldHVybnMgYXJyYXlbIHRvcCwgbGVmdCwgaG9yaXpvbnRhbC1zY2FsZSwgdmVydGljYWwtc2NhbGUsIG9wYWNpdHkgXVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgZ2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoJGVsKSB7XHJcbiAgICAgIHZhciBkb21SZWN0O1xyXG5cclxuICAgICAgaWYgKCEkZWwgfHwgISRlbC5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRvbVJlY3QgPSAkZWxbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHRvcDogZG9tUmVjdC50b3AgfHwgMCxcclxuICAgICAgICBsZWZ0OiBkb21SZWN0LmxlZnQgfHwgMCxcclxuICAgICAgICB3aWR0aDogZG9tUmVjdC53aWR0aCxcclxuICAgICAgICBoZWlnaHQ6IGRvbVJlY3QuaGVpZ2h0LFxyXG4gICAgICAgIG9wYWNpdHk6IHBhcnNlRmxvYXQoJGVsLmNzcyhcIm9wYWNpdHlcIikpXHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFNob3J0Y3V0IGZvciBzZXR0aW5nIFwidHJhbnNsYXRlM2RcIiBwcm9wZXJ0aWVzIGZvciBlbGVtZW50XHJcbiAgICAvLyBDYW4gc2V0IGJlIHVzZWQgdG8gc2V0IG9wYWNpdHksIHRvb1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uICgkZWwsIHByb3BzKSB7XHJcbiAgICAgIHZhciBzdHIgPSBcIlwiLFxyXG4gICAgICAgIGNzcyA9IHt9O1xyXG5cclxuICAgICAgaWYgKCEkZWwgfHwgIXByb3BzKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocHJvcHMubGVmdCAhPT0gdW5kZWZpbmVkIHx8IHByb3BzLnRvcCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgc3RyID1cclxuICAgICAgICAgIChwcm9wcy5sZWZ0ID09PSB1bmRlZmluZWQgPyAkZWwucG9zaXRpb24oKS5sZWZ0IDogcHJvcHMubGVmdCkgK1xyXG4gICAgICAgICAgXCJweCwgXCIgK1xyXG4gICAgICAgICAgKHByb3BzLnRvcCA9PT0gdW5kZWZpbmVkID8gJGVsLnBvc2l0aW9uKCkudG9wIDogcHJvcHMudG9wKSArXHJcbiAgICAgICAgICBcInB4XCI7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnVzZTNkKSB7XHJcbiAgICAgICAgICBzdHIgPSBcInRyYW5zbGF0ZTNkKFwiICsgc3RyICsgXCIsIDBweClcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3RyID0gXCJ0cmFuc2xhdGUoXCIgKyBzdHIgKyBcIilcIjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwcm9wcy5zY2FsZVggIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5zY2FsZVkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHN0ciArPSBcIiBzY2FsZShcIiArIHByb3BzLnNjYWxlWCArIFwiLCBcIiArIHByb3BzLnNjYWxlWSArIFwiKVwiO1xyXG4gICAgICB9IGVsc2UgaWYgKHByb3BzLnNjYWxlWCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgc3RyICs9IFwiIHNjYWxlWChcIiArIHByb3BzLnNjYWxlWCArIFwiKVwiO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc3RyLmxlbmd0aCkge1xyXG4gICAgICAgIGNzcy50cmFuc2Zvcm0gPSBzdHI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwcm9wcy5vcGFjaXR5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjc3Mub3BhY2l0eSA9IHByb3BzLm9wYWNpdHk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwcm9wcy53aWR0aCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY3NzLndpZHRoID0gcHJvcHMud2lkdGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwcm9wcy5oZWlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNzcy5oZWlnaHQgPSBwcm9wcy5oZWlnaHQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiAkZWwuY3NzKGNzcyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFNpbXBsZSBDU1MgdHJhbnNpdGlvbiBoYW5kbGVyXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGFuaW1hdGU6IGZ1bmN0aW9uICgkZWwsIHRvLCBkdXJhdGlvbiwgY2FsbGJhY2ssIGxlYXZlQW5pbWF0aW9uTmFtZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgZnJvbTtcclxuXHJcbiAgICAgIGlmICgkLmlzRnVuY3Rpb24oZHVyYXRpb24pKSB7XHJcbiAgICAgICAgY2FsbGJhY2sgPSBkdXJhdGlvbjtcclxuICAgICAgICBkdXJhdGlvbiA9IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYuc3RvcCgkZWwpO1xyXG5cclxuICAgICAgZnJvbSA9IHNlbGYuZ2V0VHJhbnNsYXRlKCRlbCk7XHJcblxyXG4gICAgICAkZWwub24odHJhbnNpdGlvbkVuZCwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAvLyBTa2lwIGV2ZW50cyBmcm9tIGNoaWxkIGVsZW1lbnRzIGFuZCB6LWluZGV4IGNoYW5nZVxyXG4gICAgICAgIGlmIChlICYmIGUub3JpZ2luYWxFdmVudCAmJiAoISRlbC5pcyhlLm9yaWdpbmFsRXZlbnQudGFyZ2V0KSB8fCBlLm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lID09IFwiei1pbmRleFwiKSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi5zdG9wKCRlbCk7XHJcblxyXG4gICAgICAgIGlmICgkLmlzTnVtZXJpYyhkdXJhdGlvbikpIHtcclxuICAgICAgICAgICRlbC5jc3MoXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIsIFwiXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCQuaXNQbGFpbk9iamVjdCh0bykpIHtcclxuICAgICAgICAgIGlmICh0by5zY2FsZVggIT09IHVuZGVmaW5lZCAmJiB0by5zY2FsZVkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBzZWxmLnNldFRyYW5zbGF0ZSgkZWwsIHtcclxuICAgICAgICAgICAgICB0b3A6IHRvLnRvcCxcclxuICAgICAgICAgICAgICBsZWZ0OiB0by5sZWZ0LFxyXG4gICAgICAgICAgICAgIHdpZHRoOiBmcm9tLndpZHRoICogdG8uc2NhbGVYLFxyXG4gICAgICAgICAgICAgIGhlaWdodDogZnJvbS5oZWlnaHQgKiB0by5zY2FsZVksXHJcbiAgICAgICAgICAgICAgc2NhbGVYOiAxLFxyXG4gICAgICAgICAgICAgIHNjYWxlWTogMVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGxlYXZlQW5pbWF0aW9uTmFtZSAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgJGVsLnJlbW92ZUNsYXNzKHRvKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgkLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcbiAgICAgICAgICBjYWxsYmFjayhlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKCQuaXNOdW1lcmljKGR1cmF0aW9uKSkge1xyXG4gICAgICAgICRlbC5jc3MoXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIsIGR1cmF0aW9uICsgXCJtc1wiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gU3RhcnQgYW5pbWF0aW9uIGJ5IGNoYW5naW5nIENTUyBwcm9wZXJ0aWVzIG9yIGNsYXNzIG5hbWVcclxuICAgICAgaWYgKCQuaXNQbGFpbk9iamVjdCh0bykpIHtcclxuICAgICAgICBpZiAodG8uc2NhbGVYICE9PSB1bmRlZmluZWQgJiYgdG8uc2NhbGVZICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIGRlbGV0ZSB0by53aWR0aDtcclxuICAgICAgICAgIGRlbGV0ZSB0by5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgaWYgKCRlbC5wYXJlbnQoKS5oYXNDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1pbWFnZVwiKSkge1xyXG4gICAgICAgICAgICAkZWwucGFyZW50KCkuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1zY2FsaW5nXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoJGVsLCB0byk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJGVsLmFkZENsYXNzKHRvKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgYHRyYW5zaXRpb25lbmRgIGNhbGxiYWNrIGdldHMgZmlyZWRcclxuICAgICAgJGVsLmRhdGEoXHJcbiAgICAgICAgXCJ0aW1lclwiLFxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgJGVsLnRyaWdnZXIodHJhbnNpdGlvbkVuZCk7XHJcbiAgICAgICAgfSwgZHVyYXRpb24gKyAzMylcclxuICAgICAgKTtcclxuICAgIH0sXHJcblxyXG4gICAgc3RvcDogZnVuY3Rpb24gKCRlbCwgY2FsbENhbGxiYWNrKSB7XHJcbiAgICAgIGlmICgkZWwgJiYgJGVsLmxlbmd0aCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCgkZWwuZGF0YShcInRpbWVyXCIpKTtcclxuXHJcbiAgICAgICAgaWYgKGNhbGxDYWxsYmFjaykge1xyXG4gICAgICAgICAgJGVsLnRyaWdnZXIodHJhbnNpdGlvbkVuZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkZWwub2ZmKHRyYW5zaXRpb25FbmQpLmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIiwgXCJcIik7XHJcblxyXG4gICAgICAgICRlbC5wYXJlbnQoKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLXNjYWxpbmdcIik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBEZWZhdWx0IGNsaWNrIGhhbmRsZXIgZm9yIFwiZmFuY3lib3hlZFwiIGxpbmtzXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgZnVuY3Rpb24gX3J1bihlLCBvcHRzKSB7XHJcbiAgICB2YXIgaXRlbXMgPSBbXSxcclxuICAgICAgaW5kZXggPSAwLFxyXG4gICAgICAkdGFyZ2V0LFxyXG4gICAgICB2YWx1ZSxcclxuICAgICAgaW5zdGFuY2U7XHJcblxyXG4gICAgLy8gQXZvaWQgb3BlbmluZyBtdWx0aXBsZSB0aW1lc1xyXG4gICAgaWYgKGUgJiYgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xyXG5cclxuICAgIGlmIChlICYmIGUuZGF0YSkge1xyXG4gICAgICBvcHRzID0gbWVyZ2VPcHRzKGUuZGF0YS5vcHRpb25zLCBvcHRzKTtcclxuICAgIH1cclxuXHJcbiAgICAkdGFyZ2V0ID0gb3B0cy4kdGFyZ2V0IHx8ICQoZS5jdXJyZW50VGFyZ2V0KS50cmlnZ2VyKFwiYmx1clwiKTtcclxuICAgIGluc3RhbmNlID0gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS4kdHJpZ2dlciAmJiBpbnN0YW5jZS4kdHJpZ2dlci5pcygkdGFyZ2V0KSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdHMuc2VsZWN0b3IpIHtcclxuICAgICAgaXRlbXMgPSAkKG9wdHMuc2VsZWN0b3IpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gR2V0IGFsbCByZWxhdGVkIGl0ZW1zIGFuZCBmaW5kIGluZGV4IGZvciBjbGlja2VkIG9uZVxyXG4gICAgICB2YWx1ZSA9ICR0YXJnZXQuYXR0cihcImRhdGEtZmFuY3lib3hcIikgfHwgXCJcIjtcclxuXHJcbiAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgIGl0ZW1zID0gZS5kYXRhID8gZS5kYXRhLml0ZW1zIDogW107XHJcbiAgICAgICAgaXRlbXMgPSBpdGVtcy5sZW5ndGggPyBpdGVtcy5maWx0ZXIoJ1tkYXRhLWZhbmN5Ym94PVwiJyArIHZhbHVlICsgJ1wiXScpIDogJCgnW2RhdGEtZmFuY3lib3g9XCInICsgdmFsdWUgKyAnXCJdJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaXRlbXMgPSBbJHRhcmdldF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbmRleCA9ICQoaXRlbXMpLmluZGV4KCR0YXJnZXQpO1xyXG5cclxuICAgIC8vIFNvbWV0aW1lcyBjdXJyZW50IGl0ZW0gY2FuIG5vdCBiZSBmb3VuZFxyXG4gICAgaWYgKGluZGV4IDwgMCkge1xyXG4gICAgICBpbmRleCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgaW5zdGFuY2UgPSAkLmZhbmN5Ym94Lm9wZW4oaXRlbXMsIG9wdHMsIGluZGV4KTtcclxuXHJcbiAgICAvLyBTYXZlIGxhc3QgYWN0aXZlIGVsZW1lbnRcclxuICAgIGluc3RhbmNlLiR0cmlnZ2VyID0gJHRhcmdldDtcclxuICB9XHJcblxyXG4gIC8vIENyZWF0ZSBhIGpRdWVyeSBwbHVnaW5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICQuZm4uZmFuY3lib3ggPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgdmFyIHNlbGVjdG9yO1xyXG5cclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yIHx8IGZhbHNlO1xyXG5cclxuICAgIGlmIChzZWxlY3Rvcikge1xyXG4gICAgICAvLyBVc2UgYm9keSBlbGVtZW50IGluc3RlYWQgb2YgZG9jdW1lbnQgc28gaXQgZXhlY3V0ZXMgZmlyc3RcclxuICAgICAgJChcImJvZHlcIilcclxuICAgICAgICAub2ZmKFwiY2xpY2suZmItc3RhcnRcIiwgc2VsZWN0b3IpXHJcbiAgICAgICAgLm9uKFwiY2xpY2suZmItc3RhcnRcIiwgc2VsZWN0b3IsIHtcclxuICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcclxuICAgICAgICB9LCBfcnVuKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMub2ZmKFwiY2xpY2suZmItc3RhcnRcIikub24oXHJcbiAgICAgICAgXCJjbGljay5mYi1zdGFydFwiLCB7XHJcbiAgICAgICAgICBpdGVtczogdGhpcyxcclxuICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9ydW5cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICAvLyBTZWxmIGluaXRpYWxpemluZyBwbHVnaW4gZm9yIGFsbCBlbGVtZW50cyBoYXZpbmcgYGRhdGEtZmFuY3lib3hgIGF0dHJpYnV0ZVxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICRELm9uKFwiY2xpY2suZmItc3RhcnRcIiwgXCJbZGF0YS1mYW5jeWJveF1cIiwgX3J1bik7XHJcblxyXG4gIC8vIEVuYWJsZSBcInRyaWdnZXIgZWxlbWVudHNcIlxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgJEQub24oXCJjbGljay5mYi1zdGFydFwiLCBcIltkYXRhLWZhbmN5Ym94LXRyaWdnZXJdXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAkKCdbZGF0YS1mYW5jeWJveD1cIicgKyAkKHRoaXMpLmF0dHIoXCJkYXRhLWZhbmN5Ym94LXRyaWdnZXJcIikgKyAnXCJdJylcclxuICAgICAgLmVxKCQodGhpcykuYXR0cihcImRhdGEtZmFuY3lib3gtaW5kZXhcIikgfHwgMClcclxuICAgICAgLnRyaWdnZXIoXCJjbGljay5mYi1zdGFydFwiLCB7XHJcbiAgICAgICAgJHRyaWdnZXI6ICQodGhpcylcclxuICAgICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIFRyYWNrIGZvY3VzIGV2ZW50IGZvciBiZXR0ZXIgYWNjZXNzaWJpbGl0eSBzdHlsaW5nXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGJ1dHRvblN0ciA9IFwiLmZhbmN5Ym94LWJ1dHRvblwiLFxyXG4gICAgICBmb2N1c1N0ciA9IFwiZmFuY3lib3gtZm9jdXNcIixcclxuICAgICAgJHByZXNzZWQgPSBudWxsO1xyXG5cclxuICAgICRELm9uKFwibW91c2Vkb3duIG1vdXNldXAgZm9jdXMgYmx1clwiLCBidXR0b25TdHIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIHN3aXRjaCAoZS50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBcIm1vdXNlZG93blwiOlxyXG4gICAgICAgICAgJHByZXNzZWQgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIm1vdXNldXBcIjpcclxuICAgICAgICAgICRwcmVzc2VkID0gbnVsbDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJmb2N1c2luXCI6XHJcbiAgICAgICAgICAkKGJ1dHRvblN0cikucmVtb3ZlQ2xhc3MoZm9jdXNTdHIpO1xyXG5cclxuICAgICAgICAgIGlmICghJCh0aGlzKS5pcygkcHJlc3NlZCkgJiYgISQodGhpcykuaXMoXCJbZGlzYWJsZWRdXCIpKSB7XHJcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoZm9jdXNTdHIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImZvY3Vzb3V0XCI6XHJcbiAgICAgICAgICAkKGJ1dHRvblN0cikucmVtb3ZlQ2xhc3MoZm9jdXNTdHIpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pKCk7XHJcbn0pKHdpbmRvdywgZG9jdW1lbnQsIGpRdWVyeSk7XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBNZWRpYVxyXG4vLyBBZGRzIGFkZGl0aW9uYWwgbWVkaWEgdHlwZSBzdXBwb3J0XHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbihmdW5jdGlvbiAoJCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAvLyBPYmplY3QgY29udGFpbmluZyBwcm9wZXJ0aWVzIGZvciBlYWNoIG1lZGlhIHR5cGVcclxuICB2YXIgZGVmYXVsdHMgPSB7XHJcbiAgICB5b3V0dWJlOiB7XHJcbiAgICAgIG1hdGNoZXI6IC8oeW91dHViZVxcLmNvbXx5b3V0dVxcLmJlfHlvdXR1YmVcXC1ub2Nvb2tpZVxcLmNvbSlcXC8od2F0Y2hcXD8oLiomKT92PXx2XFwvfHVcXC98ZW1iZWRcXC8/KT8odmlkZW9zZXJpZXNcXD9saXN0PSguKil8W1xcdy1dezExfXxcXD9saXN0VHlwZT0oLiopJmxpc3Q9KC4qKSkoLiopL2ksXHJcbiAgICAgIHBhcmFtczoge1xyXG4gICAgICAgIGF1dG9wbGF5OiAxLFxyXG4gICAgICAgIGF1dG9oaWRlOiAxLFxyXG4gICAgICAgIGZzOiAxLFxyXG4gICAgICAgIHJlbDogMCxcclxuICAgICAgICBoZDogMSxcclxuICAgICAgICB3bW9kZTogXCJ0cmFuc3BhcmVudFwiLFxyXG4gICAgICAgIGVuYWJsZWpzYXBpOiAxLFxyXG4gICAgICAgIGh0bWw1OiAxXHJcbiAgICAgIH0sXHJcbiAgICAgIHBhcmFtUGxhY2U6IDgsXHJcbiAgICAgIHR5cGU6IFwiaWZyYW1lXCIsXHJcbiAgICAgIHVybDogXCJodHRwczovL3d3dy55b3V0dWJlLW5vY29va2llLmNvbS9lbWJlZC8kNFwiLFxyXG4gICAgICB0aHVtYjogXCJodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS8kNC9ocWRlZmF1bHQuanBnXCJcclxuICAgIH0sXHJcblxyXG4gICAgdmltZW86IHtcclxuICAgICAgbWF0Y2hlcjogL14uK3ZpbWVvLmNvbVxcLyguKlxcLyk/KFtcXGRdKykoLiopPy8sXHJcbiAgICAgIHBhcmFtczoge1xyXG4gICAgICAgIGF1dG9wbGF5OiAxLFxyXG4gICAgICAgIGhkOiAxLFxyXG4gICAgICAgIHNob3dfdGl0bGU6IDEsXHJcbiAgICAgICAgc2hvd19ieWxpbmU6IDEsXHJcbiAgICAgICAgc2hvd19wb3J0cmFpdDogMCxcclxuICAgICAgICBmdWxsc2NyZWVuOiAxXHJcbiAgICAgIH0sXHJcbiAgICAgIHBhcmFtUGxhY2U6IDMsXHJcbiAgICAgIHR5cGU6IFwiaWZyYW1lXCIsXHJcbiAgICAgIHVybDogXCIvL3BsYXllci52aW1lby5jb20vdmlkZW8vJDJcIlxyXG4gICAgfSxcclxuXHJcbiAgICBpbnN0YWdyYW06IHtcclxuICAgICAgbWF0Y2hlcjogLyhpbnN0YWdyXFwuYW18aW5zdGFncmFtXFwuY29tKVxcL3BcXC8oW2EtekEtWjAtOV9cXC1dKylcXC8/L2ksXHJcbiAgICAgIHR5cGU6IFwiaW1hZ2VcIixcclxuICAgICAgdXJsOiBcIi8vJDEvcC8kMi9tZWRpYS8/c2l6ZT1sXCJcclxuICAgIH0sXHJcblxyXG4gICAgLy8gRXhhbXBsZXM6XHJcbiAgICAvLyBodHRwOi8vbWFwcy5nb29nbGUuY29tLz9sbD00OC44NTc5OTUsMi4yOTQyOTcmc3BuPTAuMDA3NjY2LDAuMDIxMTM2JnQ9bSZ6PTE2XHJcbiAgICAvLyBodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvQDM3Ljc4NTIwMDYsLTEyMi40MTQ2MzU1LDE0LjY1elxyXG4gICAgLy8gaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL0A1Mi4yMTExMTIzLDIuOTIzNzU0Miw2LjYxej9obD1lblxyXG4gICAgLy8gaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL3BsYWNlL0dvb2dsZXBsZXgvQDM3LjQyMjAwNDEsLTEyMi4wODMzNDk0LDE3ei9kYXRhPSE0bTUhM200ITFzMHgwOjB4NmMyOTZjNjY2MTkzNjdlMCE4bTIhM2QzNy40MjE5OTk4ITRkLTEyMi4wODQwNTcyXHJcbiAgICBnbWFwX3BsYWNlOiB7XHJcbiAgICAgIG1hdGNoZXI6IC8obWFwc1xcLik/Z29vZ2xlXFwuKFthLXpdezIsM30oXFwuW2Etel17Mn0pPylcXC8oKChtYXBzXFwvKHBsYWNlXFwvKC4qKVxcLyk/XFxAKC4qKSwoXFxkKy4/XFxkKz8peikpfChcXD9sbD0pKSguKik/L2ksXHJcbiAgICAgIHR5cGU6IFwiaWZyYW1lXCIsXHJcbiAgICAgIHVybDogZnVuY3Rpb24gKHJleikge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICBcIi8vbWFwcy5nb29nbGUuXCIgK1xyXG4gICAgICAgICAgcmV6WzJdICtcclxuICAgICAgICAgIFwiLz9sbD1cIiArXHJcbiAgICAgICAgICAocmV6WzldID8gcmV6WzldICsgXCImej1cIiArIE1hdGguZmxvb3IocmV6WzEwXSkgKyAocmV6WzEyXSA/IHJlelsxMl0ucmVwbGFjZSgvXlxcLy8sIFwiJlwiKSA6IFwiXCIpIDogcmV6WzEyXSArIFwiXCIpLnJlcGxhY2UoL1xcPy8sIFwiJlwiKSArXHJcbiAgICAgICAgICBcIiZvdXRwdXQ9XCIgK1xyXG4gICAgICAgICAgKHJlelsxMl0gJiYgcmV6WzEyXS5pbmRleE9mKFwibGF5ZXI9Y1wiKSA+IDAgPyBcInN2ZW1iZWRcIiA6IFwiZW1iZWRcIilcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEV4YW1wbGVzOlxyXG4gICAgLy8gaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL3NlYXJjaC9FbXBpcmUrU3RhdGUrQnVpbGRpbmcvXHJcbiAgICAvLyBodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvc2VhcmNoLz9hcGk9MSZxdWVyeT1jZW50dXJ5bGluaytmaWVsZFxyXG4gICAgLy8gaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL3NlYXJjaC8/YXBpPTEmcXVlcnk9NDcuNTk1MTUxOCwtMTIyLjMzMTYzOTNcclxuICAgIGdtYXBfc2VhcmNoOiB7XHJcbiAgICAgIG1hdGNoZXI6IC8obWFwc1xcLik/Z29vZ2xlXFwuKFthLXpdezIsM30oXFwuW2Etel17Mn0pPylcXC8obWFwc1xcL3NlYXJjaFxcLykoLiopL2ksXHJcbiAgICAgIHR5cGU6IFwiaWZyYW1lXCIsXHJcbiAgICAgIHVybDogZnVuY3Rpb24gKHJleikge1xyXG4gICAgICAgIHJldHVybiBcIi8vbWFwcy5nb29nbGUuXCIgKyByZXpbMl0gKyBcIi9tYXBzP3E9XCIgKyByZXpbNV0ucmVwbGFjZShcInF1ZXJ5PVwiLCBcInE9XCIpLnJlcGxhY2UoXCJhcGk9MVwiLCBcIlwiKSArIFwiJm91dHB1dD1lbWJlZFwiO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gRm9ybWF0cyBtYXRjaGluZyB1cmwgdG8gZmluYWwgZm9ybVxyXG4gIHZhciBmb3JtYXQgPSBmdW5jdGlvbiAodXJsLCByZXosIHBhcmFtcykge1xyXG4gICAgaWYgKCF1cmwpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHBhcmFtcyA9IHBhcmFtcyB8fCBcIlwiO1xyXG5cclxuICAgIGlmICgkLnR5cGUocGFyYW1zKSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICBwYXJhbXMgPSAkLnBhcmFtKHBhcmFtcywgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgJC5lYWNoKHJleiwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgdXJsID0gdXJsLnJlcGxhY2UoXCIkXCIgKyBrZXksIHZhbHVlIHx8IFwiXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHBhcmFtcy5sZW5ndGgpIHtcclxuICAgICAgdXJsICs9ICh1cmwuaW5kZXhPZihcIj9cIikgPiAwID8gXCImXCIgOiBcIj9cIikgKyBwYXJhbXM7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVybDtcclxuICB9O1xyXG5cclxuICAkKGRvY3VtZW50KS5vbihcIm9iamVjdE5lZWRzVHlwZS5mYlwiLCBmdW5jdGlvbiAoZSwgaW5zdGFuY2UsIGl0ZW0pIHtcclxuICAgIHZhciB1cmwgPSBpdGVtLnNyYyB8fCBcIlwiLFxyXG4gICAgICB0eXBlID0gZmFsc2UsXHJcbiAgICAgIG1lZGlhLFxyXG4gICAgICB0aHVtYixcclxuICAgICAgcmV6LFxyXG4gICAgICBwYXJhbXMsXHJcbiAgICAgIHVybFBhcmFtcyxcclxuICAgICAgcGFyYW1PYmosXHJcbiAgICAgIHByb3ZpZGVyO1xyXG5cclxuICAgIG1lZGlhID0gJC5leHRlbmQodHJ1ZSwge30sIGRlZmF1bHRzLCBpdGVtLm9wdHMubWVkaWEpO1xyXG5cclxuICAgIC8vIExvb2sgZm9yIGFueSBtYXRjaGluZyBtZWRpYSB0eXBlXHJcbiAgICAkLmVhY2gobWVkaWEsIGZ1bmN0aW9uIChwcm92aWRlck5hbWUsIHByb3ZpZGVyT3B0cykge1xyXG4gICAgICByZXogPSB1cmwubWF0Y2gocHJvdmlkZXJPcHRzLm1hdGNoZXIpO1xyXG5cclxuICAgICAgaWYgKCFyZXopIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHR5cGUgPSBwcm92aWRlck9wdHMudHlwZTtcclxuICAgICAgcHJvdmlkZXIgPSBwcm92aWRlck5hbWU7XHJcbiAgICAgIHBhcmFtT2JqID0ge307XHJcblxyXG4gICAgICBpZiAocHJvdmlkZXJPcHRzLnBhcmFtUGxhY2UgJiYgcmV6W3Byb3ZpZGVyT3B0cy5wYXJhbVBsYWNlXSkge1xyXG4gICAgICAgIHVybFBhcmFtcyA9IHJleltwcm92aWRlck9wdHMucGFyYW1QbGFjZV07XHJcblxyXG4gICAgICAgIGlmICh1cmxQYXJhbXNbMF0gPT0gXCI/XCIpIHtcclxuICAgICAgICAgIHVybFBhcmFtcyA9IHVybFBhcmFtcy5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cmxQYXJhbXMgPSB1cmxQYXJhbXMuc3BsaXQoXCImXCIpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBtID0gMDsgbSA8IHVybFBhcmFtcy5sZW5ndGg7ICsrbSkge1xyXG4gICAgICAgICAgdmFyIHAgPSB1cmxQYXJhbXNbbV0uc3BsaXQoXCI9XCIsIDIpO1xyXG5cclxuICAgICAgICAgIGlmIChwLmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgICAgIHBhcmFtT2JqW3BbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KHBbMV0ucmVwbGFjZSgvXFwrL2csIFwiIFwiKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBwYXJhbXMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgcHJvdmlkZXJPcHRzLnBhcmFtcywgaXRlbS5vcHRzW3Byb3ZpZGVyTmFtZV0sIHBhcmFtT2JqKTtcclxuXHJcbiAgICAgIHVybCA9XHJcbiAgICAgICAgJC50eXBlKHByb3ZpZGVyT3B0cy51cmwpID09PSBcImZ1bmN0aW9uXCIgPyBwcm92aWRlck9wdHMudXJsLmNhbGwodGhpcywgcmV6LCBwYXJhbXMsIGl0ZW0pIDogZm9ybWF0KHByb3ZpZGVyT3B0cy51cmwsIHJleiwgcGFyYW1zKTtcclxuXHJcbiAgICAgIHRodW1iID1cclxuICAgICAgICAkLnR5cGUocHJvdmlkZXJPcHRzLnRodW1iKSA9PT0gXCJmdW5jdGlvblwiID8gcHJvdmlkZXJPcHRzLnRodW1iLmNhbGwodGhpcywgcmV6LCBwYXJhbXMsIGl0ZW0pIDogZm9ybWF0KHByb3ZpZGVyT3B0cy50aHVtYiwgcmV6KTtcclxuXHJcbiAgICAgIGlmIChwcm92aWRlck5hbWUgPT09IFwieW91dHViZVwiKSB7XHJcbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoLyZ0PSgoXFxkKyltKT8oXFxkKylzLywgZnVuY3Rpb24gKG1hdGNoLCBwMSwgbSwgcykge1xyXG4gICAgICAgICAgcmV0dXJuIFwiJnN0YXJ0PVwiICsgKChtID8gcGFyc2VJbnQobSwgMTApICogNjAgOiAwKSArIHBhcnNlSW50KHMsIDEwKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAocHJvdmlkZXJOYW1lID09PSBcInZpbWVvXCIpIHtcclxuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShcIiYlMjNcIiwgXCIjXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBJZiBpdCBpcyBmb3VuZCwgdGhlbiBjaGFuZ2UgY29udGVudCB0eXBlIGFuZCB1cGRhdGUgdGhlIHVybFxyXG5cclxuICAgIGlmICh0eXBlKSB7XHJcbiAgICAgIGlmICghaXRlbS5vcHRzLnRodW1iICYmICEoaXRlbS5vcHRzLiR0aHVtYiAmJiBpdGVtLm9wdHMuJHRodW1iLmxlbmd0aCkpIHtcclxuICAgICAgICBpdGVtLm9wdHMudGh1bWIgPSB0aHVtYjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHR5cGUgPT09IFwiaWZyYW1lXCIpIHtcclxuICAgICAgICBpdGVtLm9wdHMgPSAkLmV4dGVuZCh0cnVlLCBpdGVtLm9wdHMsIHtcclxuICAgICAgICAgIGlmcmFtZToge1xyXG4gICAgICAgICAgICBwcmVsb2FkOiBmYWxzZSxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgIHNjcm9sbGluZzogXCJub1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJC5leHRlbmQoaXRlbSwge1xyXG4gICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgc3JjOiB1cmwsXHJcbiAgICAgICAgb3JpZ1NyYzogaXRlbS5zcmMsXHJcbiAgICAgICAgY29udGVudFNvdXJjZTogcHJvdmlkZXIsXHJcbiAgICAgICAgY29udGVudFR5cGU6IHR5cGUgPT09IFwiaW1hZ2VcIiA/IFwiaW1hZ2VcIiA6IHByb3ZpZGVyID09IFwiZ21hcF9wbGFjZVwiIHx8IHByb3ZpZGVyID09IFwiZ21hcF9zZWFyY2hcIiA/IFwibWFwXCIgOiBcInZpZGVvXCJcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHVybCkge1xyXG4gICAgICBpdGVtLnR5cGUgPSBpdGVtLm9wdHMuZGVmYXVsdFR5cGU7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIExvYWQgWW91VHViZS9WaWRlbyBBUEkgb24gcmVxdWVzdCB0byBkZXRlY3Qgd2hlbiB2aWRlbyBmaW5pc2hlZCBwbGF5aW5nXHJcbiAgdmFyIFZpZGVvQVBJTG9hZGVyID0ge1xyXG4gICAgeW91dHViZToge1xyXG4gICAgICBzcmM6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vaWZyYW1lX2FwaVwiLFxyXG4gICAgICBjbGFzczogXCJZVFwiLFxyXG4gICAgICBsb2FkaW5nOiBmYWxzZSxcclxuICAgICAgbG9hZGVkOiBmYWxzZVxyXG4gICAgfSxcclxuXHJcbiAgICB2aW1lbzoge1xyXG4gICAgICBzcmM6IFwiaHR0cHM6Ly9wbGF5ZXIudmltZW8uY29tL2FwaS9wbGF5ZXIuanNcIixcclxuICAgICAgY2xhc3M6IFwiVmltZW9cIixcclxuICAgICAgbG9hZGluZzogZmFsc2UsXHJcbiAgICAgIGxvYWRlZDogZmFsc2VcclxuICAgIH0sXHJcblxyXG4gICAgbG9hZDogZnVuY3Rpb24gKHZlbmRvcikge1xyXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxyXG4gICAgICAgIHNjcmlwdDtcclxuXHJcbiAgICAgIGlmICh0aGlzW3ZlbmRvcl0ubG9hZGVkKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBfdGhpcy5kb25lKHZlbmRvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpc1t2ZW5kb3JdLmxvYWRpbmcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXNbdmVuZG9yXS5sb2FkaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XHJcbiAgICAgIHNjcmlwdC50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcclxuICAgICAgc2NyaXB0LnNyYyA9IHRoaXNbdmVuZG9yXS5zcmM7XHJcblxyXG4gICAgICBpZiAodmVuZG9yID09PSBcInlvdXR1YmVcIikge1xyXG4gICAgICAgIHdpbmRvdy5vbllvdVR1YmVJZnJhbWVBUElSZWFkeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIF90aGlzW3ZlbmRvcl0ubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgIF90aGlzLmRvbmUodmVuZG9yKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBfdGhpc1t2ZW5kb3JdLmxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICBfdGhpcy5kb25lKHZlbmRvcik7XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgfSxcclxuICAgIGRvbmU6IGZ1bmN0aW9uICh2ZW5kb3IpIHtcclxuICAgICAgdmFyIGluc3RhbmNlLCAkZWwsIHBsYXllcjtcclxuXHJcbiAgICAgIGlmICh2ZW5kb3IgPT09IFwieW91dHViZVwiKSB7XHJcbiAgICAgICAgZGVsZXRlIHdpbmRvdy5vbllvdVR1YmVJZnJhbWVBUElSZWFkeTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaW5zdGFuY2UgPSAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCk7XHJcblxyXG4gICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAkZWwgPSBpbnN0YW5jZS5jdXJyZW50LiRjb250ZW50LmZpbmQoXCJpZnJhbWVcIik7XHJcblxyXG4gICAgICAgIGlmICh2ZW5kb3IgPT09IFwieW91dHViZVwiICYmIFlUICE9PSB1bmRlZmluZWQgJiYgWVQpIHtcclxuICAgICAgICAgIHBsYXllciA9IG5ldyBZVC5QbGF5ZXIoJGVsLmF0dHIoXCJpZFwiKSwge1xyXG4gICAgICAgICAgICBldmVudHM6IHtcclxuICAgICAgICAgICAgICBvblN0YXRlQ2hhbmdlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuZGF0YSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgIGluc3RhbmNlLm5leHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodmVuZG9yID09PSBcInZpbWVvXCIgJiYgVmltZW8gIT09IHVuZGVmaW5lZCAmJiBWaW1lbykge1xyXG4gICAgICAgICAgcGxheWVyID0gbmV3IFZpbWVvLlBsYXllcigkZWwpO1xyXG5cclxuICAgICAgICAgIHBsYXllci5vbihcImVuZGVkXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UubmV4dCgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJChkb2N1bWVudCkub24oe1xyXG4gICAgXCJhZnRlclNob3cuZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlLCBjdXJyZW50KSB7XHJcbiAgICAgIGlmIChpbnN0YW5jZS5ncm91cC5sZW5ndGggPiAxICYmIChjdXJyZW50LmNvbnRlbnRTb3VyY2UgPT09IFwieW91dHViZVwiIHx8IGN1cnJlbnQuY29udGVudFNvdXJjZSA9PT0gXCJ2aW1lb1wiKSkge1xyXG4gICAgICAgIFZpZGVvQVBJTG9hZGVyLmxvYWQoY3VycmVudC5jb250ZW50U291cmNlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG59KShqUXVlcnkpO1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gR3Vlc3R1cmVzXHJcbi8vIEFkZHMgdG91Y2ggZ3Vlc3R1cmVzLCBoYW5kbGVzIGNsaWNrIGFuZCB0YXAgZXZlbnRzXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbihmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCwgJCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICB2YXIgcmVxdWVzdEFGcmFtZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAvLyBpZiBhbGwgZWxzZSBmYWlscywgdXNlIHNldFRpbWVvdXRcclxuICAgICAgZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0pKCk7XHJcblxyXG4gIHZhciBjYW5jZWxBRnJhbWUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93Lm9DYW5jZWxBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGlkKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9KSgpO1xyXG5cclxuICB2YXIgZ2V0UG9pbnRlclhZID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIHZhciByZXN1bHQgPSBbXTtcclxuXHJcbiAgICBlID0gZS5vcmlnaW5hbEV2ZW50IHx8IGUgfHwgd2luZG93LmU7XHJcbiAgICBlID0gZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPyBlLnRvdWNoZXMgOiBlLmNoYW5nZWRUb3VjaGVzICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID8gZS5jaGFuZ2VkVG91Y2hlcyA6IFtlXTtcclxuXHJcbiAgICBmb3IgKHZhciBrZXkgaW4gZSkge1xyXG4gICAgICBpZiAoZVtrZXldLnBhZ2VYKSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICAgICAgeDogZVtrZXldLnBhZ2VYLFxyXG4gICAgICAgICAgeTogZVtrZXldLnBhZ2VZXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZVtrZXldLmNsaWVudFgpIHtcclxuICAgICAgICByZXN1bHQucHVzaCh7XHJcbiAgICAgICAgICB4OiBlW2tleV0uY2xpZW50WCxcclxuICAgICAgICAgIHk6IGVba2V5XS5jbGllbnRZXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH07XHJcblxyXG4gIHZhciBkaXN0YW5jZSA9IGZ1bmN0aW9uIChwb2ludDIsIHBvaW50MSwgd2hhdCkge1xyXG4gICAgaWYgKCFwb2ludDEgfHwgIXBvaW50Mikge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAod2hhdCA9PT0gXCJ4XCIpIHtcclxuICAgICAgcmV0dXJuIHBvaW50Mi54IC0gcG9pbnQxLng7XHJcbiAgICB9IGVsc2UgaWYgKHdoYXQgPT09IFwieVwiKSB7XHJcbiAgICAgIHJldHVybiBwb2ludDIueSAtIHBvaW50MS55O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocG9pbnQyLnggLSBwb2ludDEueCwgMikgKyBNYXRoLnBvdyhwb2ludDIueSAtIHBvaW50MS55LCAyKSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGlzQ2xpY2thYmxlID0gZnVuY3Rpb24gKCRlbCkge1xyXG4gICAgaWYgKFxyXG4gICAgICAkZWwuaXMoJ2EsYXJlYSxidXR0b24sW3JvbGU9XCJidXR0b25cIl0saW5wdXQsbGFiZWwsc2VsZWN0LHN1bW1hcnksdGV4dGFyZWEsdmlkZW8sYXVkaW8saWZyYW1lJykgfHxcclxuICAgICAgJC5pc0Z1bmN0aW9uKCRlbC5nZXQoMCkub25jbGljaykgfHxcclxuICAgICAgJGVsLmRhdGEoXCJzZWxlY3RhYmxlXCIpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgZm9yIGF0dHJpYnV0ZXMgbGlrZSBkYXRhLWZhbmN5Ym94LW5leHQgb3IgZGF0YS1mYW5jeWJveC1jbG9zZVxyXG4gICAgZm9yICh2YXIgaSA9IDAsIGF0dHMgPSAkZWxbMF0uYXR0cmlidXRlcywgbiA9IGF0dHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgIGlmIChhdHRzW2ldLm5vZGVOYW1lLnN1YnN0cigwLCAxNCkgPT09IFwiZGF0YS1mYW5jeWJveC1cIikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH07XHJcblxyXG4gIHZhciBoYXNTY3JvbGxiYXJzID0gZnVuY3Rpb24gKGVsKSB7XHJcbiAgICB2YXIgb3ZlcmZsb3dZID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpW1wib3ZlcmZsb3cteVwiXSxcclxuICAgICAgb3ZlcmZsb3dYID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpW1wib3ZlcmZsb3cteFwiXSxcclxuICAgICAgdmVydGljYWwgPSAob3ZlcmZsb3dZID09PSBcInNjcm9sbFwiIHx8IG92ZXJmbG93WSA9PT0gXCJhdXRvXCIpICYmIGVsLnNjcm9sbEhlaWdodCA+IGVsLmNsaWVudEhlaWdodCxcclxuICAgICAgaG9yaXpvbnRhbCA9IChvdmVyZmxvd1ggPT09IFwic2Nyb2xsXCIgfHwgb3ZlcmZsb3dYID09PSBcImF1dG9cIikgJiYgZWwuc2Nyb2xsV2lkdGggPiBlbC5jbGllbnRXaWR0aDtcclxuXHJcbiAgICByZXR1cm4gdmVydGljYWwgfHwgaG9yaXpvbnRhbDtcclxuICB9O1xyXG5cclxuICB2YXIgaXNTY3JvbGxhYmxlID0gZnVuY3Rpb24gKCRlbCkge1xyXG4gICAgdmFyIHJleiA9IGZhbHNlO1xyXG5cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgIHJleiA9IGhhc1Njcm9sbGJhcnMoJGVsLmdldCgwKSk7XHJcblxyXG4gICAgICBpZiAocmV6KSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRlbCA9ICRlbC5wYXJlbnQoKTtcclxuXHJcbiAgICAgIGlmICghJGVsLmxlbmd0aCB8fCAkZWwuaGFzQ2xhc3MoXCJmYW5jeWJveC1zdGFnZVwiKSB8fCAkZWwuaXMoXCJib2R5XCIpKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmV6O1xyXG4gIH07XHJcblxyXG4gIHZhciBHdWVzdHVyZXMgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBzZWxmLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcblxyXG4gICAgc2VsZi4kYmcgPSBpbnN0YW5jZS4kcmVmcy5iZztcclxuICAgIHNlbGYuJHN0YWdlID0gaW5zdGFuY2UuJHJlZnMuc3RhZ2U7XHJcbiAgICBzZWxmLiRjb250YWluZXIgPSBpbnN0YW5jZS4kcmVmcy5jb250YWluZXI7XHJcblxyXG4gICAgc2VsZi5kZXN0cm95KCk7XHJcblxyXG4gICAgc2VsZi4kY29udGFpbmVyLm9uKFwidG91Y2hzdGFydC5mYi50b3VjaCBtb3VzZWRvd24uZmIudG91Y2hcIiwgJC5wcm94eShzZWxmLCBcIm9udG91Y2hzdGFydFwiKSk7XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHNlbGYuJGNvbnRhaW5lci5vZmYoXCIuZmIudG91Y2hcIik7XHJcblxyXG4gICAgJChkb2N1bWVudCkub2ZmKFwiLmZiLnRvdWNoXCIpO1xyXG5cclxuICAgIGlmIChzZWxmLnJlcXVlc3RJZCkge1xyXG4gICAgICBjYW5jZWxBRnJhbWUoc2VsZi5yZXF1ZXN0SWQpO1xyXG4gICAgICBzZWxmLnJlcXVlc3RJZCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNlbGYudGFwcGVkKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChzZWxmLnRhcHBlZCk7XHJcbiAgICAgIHNlbGYudGFwcGVkID0gbnVsbDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICR0YXJnZXQgPSAkKGUudGFyZ2V0KSxcclxuICAgICAgaW5zdGFuY2UgPSBzZWxmLmluc3RhbmNlLFxyXG4gICAgICBjdXJyZW50ID0gaW5zdGFuY2UuY3VycmVudCxcclxuICAgICAgJHNsaWRlID0gY3VycmVudC4kc2xpZGUsXHJcbiAgICAgICRjb250ZW50ID0gY3VycmVudC4kY29udGVudCxcclxuICAgICAgaXNUb3VjaERldmljZSA9IGUudHlwZSA9PSBcInRvdWNoc3RhcnRcIjtcclxuXHJcbiAgICAvLyBEbyBub3QgcmVzcG9uZCB0byBib3RoICh0b3VjaCBhbmQgbW91c2UpIGV2ZW50c1xyXG4gICAgaWYgKGlzVG91Y2hEZXZpY2UpIHtcclxuICAgICAgc2VsZi4kY29udGFpbmVyLm9mZihcIm1vdXNlZG93bi5mYi50b3VjaFwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZ25vcmUgcmlnaHQgY2xpY2tcclxuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQgJiYgZS5vcmlnaW5hbEV2ZW50LmJ1dHRvbiA9PSAyKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZ25vcmUgdGFwaW5nIG9uIGxpbmtzLCBidXR0b25zLCBpbnB1dCBlbGVtZW50c1xyXG4gICAgaWYgKCEkc2xpZGUubGVuZ3RoIHx8ICEkdGFyZ2V0Lmxlbmd0aCB8fCBpc0NsaWNrYWJsZSgkdGFyZ2V0KSB8fCBpc0NsaWNrYWJsZSgkdGFyZ2V0LnBhcmVudCgpKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBJZ25vcmUgY2xpY2tzIG9uIHRoZSBzY3JvbGxiYXJcclxuICAgIGlmICghJHRhcmdldC5pcyhcImltZ1wiKSAmJiBlLm9yaWdpbmFsRXZlbnQuY2xpZW50WCA+ICR0YXJnZXRbMF0uY2xpZW50V2lkdGggKyAkdGFyZ2V0Lm9mZnNldCgpLmxlZnQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElnbm9yZSBjbGlja3Mgd2hpbGUgem9vbWluZyBvciBjbG9zaW5nXHJcbiAgICBpZiAoIWN1cnJlbnQgfHwgaW5zdGFuY2UuaXNBbmltYXRpbmcgfHwgY3VycmVudC4kc2xpZGUuaGFzQ2xhc3MoXCJmYW5jeWJveC1hbmltYXRlZFwiKSkge1xyXG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5yZWFsUG9pbnRzID0gc2VsZi5zdGFydFBvaW50cyA9IGdldFBvaW50ZXJYWShlKTtcclxuXHJcbiAgICBpZiAoIXNlbGYuc3RhcnRQb2ludHMubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBbGxvdyBvdGhlciBzY3JpcHRzIHRvIGNhdGNoIHRvdWNoIGV2ZW50IGlmIFwidG91Y2hcIiBpcyBzZXQgdG8gZmFsc2VcclxuICAgIGlmIChjdXJyZW50LnRvdWNoKSB7XHJcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5zdGFydEV2ZW50ID0gZTtcclxuXHJcbiAgICBzZWxmLmNhblRhcCA9IHRydWU7XHJcbiAgICBzZWxmLiR0YXJnZXQgPSAkdGFyZ2V0O1xyXG4gICAgc2VsZi4kY29udGVudCA9ICRjb250ZW50O1xyXG4gICAgc2VsZi5vcHRzID0gY3VycmVudC5vcHRzLnRvdWNoO1xyXG5cclxuICAgIHNlbGYuaXNQYW5uaW5nID0gZmFsc2U7XHJcbiAgICBzZWxmLmlzU3dpcGluZyA9IGZhbHNlO1xyXG4gICAgc2VsZi5pc1pvb21pbmcgPSBmYWxzZTtcclxuICAgIHNlbGYuaXNTY3JvbGxpbmcgPSBmYWxzZTtcclxuICAgIHNlbGYuY2FuUGFuID0gaW5zdGFuY2UuY2FuUGFuKCk7XHJcblxyXG4gICAgc2VsZi5zdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIHNlbGYuZGlzdGFuY2VYID0gc2VsZi5kaXN0YW5jZVkgPSBzZWxmLmRpc3RhbmNlID0gMDtcclxuXHJcbiAgICBzZWxmLmNhbnZhc1dpZHRoID0gTWF0aC5yb3VuZCgkc2xpZGVbMF0uY2xpZW50V2lkdGgpO1xyXG4gICAgc2VsZi5jYW52YXNIZWlnaHQgPSBNYXRoLnJvdW5kKCRzbGlkZVswXS5jbGllbnRIZWlnaHQpO1xyXG5cclxuICAgIHNlbGYuY29udGVudExhc3RQb3MgPSBudWxsO1xyXG4gICAgc2VsZi5jb250ZW50U3RhcnRQb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShzZWxmLiRjb250ZW50KSB8fCB7XHJcbiAgICAgIHRvcDogMCxcclxuICAgICAgbGVmdDogMFxyXG4gICAgfTtcclxuICAgIHNlbGYuc2xpZGVyU3RhcnRQb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZSgkc2xpZGUpO1xyXG5cclxuICAgIC8vIFNpbmNlIHBvc2l0aW9uIHdpbGwgYmUgYWJzb2x1dGUsIGJ1dCB3ZSBuZWVkIHRvIG1ha2UgaXQgcmVsYXRpdmUgdG8gdGhlIHN0YWdlXHJcbiAgICBzZWxmLnN0YWdlUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoaW5zdGFuY2UuJHJlZnMuc3RhZ2UpO1xyXG5cclxuICAgIHNlbGYuc2xpZGVyU3RhcnRQb3MudG9wIC09IHNlbGYuc3RhZ2VQb3MudG9wO1xyXG4gICAgc2VsZi5zbGlkZXJTdGFydFBvcy5sZWZ0IC09IHNlbGYuc3RhZ2VQb3MubGVmdDtcclxuXHJcbiAgICBzZWxmLmNvbnRlbnRTdGFydFBvcy50b3AgLT0gc2VsZi5zdGFnZVBvcy50b3A7XHJcbiAgICBzZWxmLmNvbnRlbnRTdGFydFBvcy5sZWZ0IC09IHNlbGYuc3RhZ2VQb3MubGVmdDtcclxuXHJcbiAgICAkKGRvY3VtZW50KVxyXG4gICAgICAub2ZmKFwiLmZiLnRvdWNoXCIpXHJcbiAgICAgIC5vbihpc1RvdWNoRGV2aWNlID8gXCJ0b3VjaGVuZC5mYi50b3VjaCB0b3VjaGNhbmNlbC5mYi50b3VjaFwiIDogXCJtb3VzZXVwLmZiLnRvdWNoIG1vdXNlbGVhdmUuZmIudG91Y2hcIiwgJC5wcm94eShzZWxmLCBcIm9udG91Y2hlbmRcIikpXHJcbiAgICAgIC5vbihpc1RvdWNoRGV2aWNlID8gXCJ0b3VjaG1vdmUuZmIudG91Y2hcIiA6IFwibW91c2Vtb3ZlLmZiLnRvdWNoXCIsICQucHJveHkoc2VsZiwgXCJvbnRvdWNobW92ZVwiKSk7XHJcblxyXG4gICAgaWYgKCQuZmFuY3lib3guaXNNb2JpbGUpIHtcclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBzZWxmLm9uc2Nyb2xsLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTa2lwIGlmIGNsaWNrZWQgb3V0c2lkZSB0aGUgc2xpZGluZyBhcmVhXHJcbiAgICBpZiAoIShzZWxmLm9wdHMgfHwgc2VsZi5jYW5QYW4pIHx8ICEoJHRhcmdldC5pcyhzZWxmLiRzdGFnZSkgfHwgc2VsZi4kc3RhZ2UuZmluZCgkdGFyZ2V0KS5sZW5ndGgpKSB7XHJcbiAgICAgIGlmICgkdGFyZ2V0LmlzKFwiLmZhbmN5Ym94LWltYWdlXCIpKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoISgkLmZhbmN5Ym94LmlzTW9iaWxlICYmICR0YXJnZXQucGFyZW50cyhcIi5mYW5jeWJveC1jYXB0aW9uXCIpLmxlbmd0aCkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZWxmLmlzU2Nyb2xsYWJsZSA9IGlzU2Nyb2xsYWJsZSgkdGFyZ2V0KSB8fCBpc1Njcm9sbGFibGUoJHRhcmdldC5wYXJlbnQoKSk7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgZWxlbWVudCBpcyBzY3JvbGxhYmxlIGFuZCB0cnkgdG8gcHJldmVudCBkZWZhdWx0IGJlaGF2aW9yIChzY3JvbGxpbmcpXHJcbiAgICBpZiAoISgkLmZhbmN5Ym94LmlzTW9iaWxlICYmIHNlbGYuaXNTY3JvbGxhYmxlKSkge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gT25lIGZpbmdlciBvciBtb3VzZSBjbGljayAtIHN3aXBlIG9yIHBhbiBhbiBpbWFnZVxyXG4gICAgaWYgKHNlbGYuc3RhcnRQb2ludHMubGVuZ3RoID09PSAxIHx8IGN1cnJlbnQuaGFzRXJyb3IpIHtcclxuICAgICAgaWYgKHNlbGYuY2FuUGFuKSB7XHJcbiAgICAgICAgJC5mYW5jeWJveC5zdG9wKHNlbGYuJGNvbnRlbnQpO1xyXG5cclxuICAgICAgICBzZWxmLmlzUGFubmluZyA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2VsZi5pc1N3aXBpbmcgPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLiRjb250YWluZXIuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1ncmFiYmluZ1wiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUd28gZmluZ2VycyAtIHpvb20gaW1hZ2VcclxuICAgIGlmIChzZWxmLnN0YXJ0UG9pbnRzLmxlbmd0aCA9PT0gMiAmJiBjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiAmJiAoY3VycmVudC5pc0xvYWRlZCB8fCBjdXJyZW50LiRnaG9zdCkpIHtcclxuICAgICAgc2VsZi5jYW5UYXAgPSBmYWxzZTtcclxuICAgICAgc2VsZi5pc1N3aXBpbmcgPSBmYWxzZTtcclxuICAgICAgc2VsZi5pc1Bhbm5pbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgIHNlbGYuaXNab29taW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICQuZmFuY3lib3guc3RvcChzZWxmLiRjb250ZW50KTtcclxuXHJcbiAgICAgIHNlbGYuY2VudGVyUG9pbnRTdGFydFggPSAoc2VsZi5zdGFydFBvaW50c1swXS54ICsgc2VsZi5zdGFydFBvaW50c1sxXS54KSAqIDAuNSAtICQod2luZG93KS5zY3JvbGxMZWZ0KCk7XHJcbiAgICAgIHNlbGYuY2VudGVyUG9pbnRTdGFydFkgPSAoc2VsZi5zdGFydFBvaW50c1swXS55ICsgc2VsZi5zdGFydFBvaW50c1sxXS55KSAqIDAuNSAtICQod2luZG93KS5zY3JvbGxUb3AoKTtcclxuXHJcbiAgICAgIHNlbGYucGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRYID0gKHNlbGYuY2VudGVyUG9pbnRTdGFydFggLSBzZWxmLmNvbnRlbnRTdGFydFBvcy5sZWZ0KSAvIHNlbGYuY29udGVudFN0YXJ0UG9zLndpZHRoO1xyXG4gICAgICBzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WSA9IChzZWxmLmNlbnRlclBvaW50U3RhcnRZIC0gc2VsZi5jb250ZW50U3RhcnRQb3MudG9wKSAvIHNlbGYuY29udGVudFN0YXJ0UG9zLmhlaWdodDtcclxuXHJcbiAgICAgIHNlbGYuc3RhcnREaXN0YW5jZUJldHdlZW5GaW5nZXJzID0gZGlzdGFuY2Uoc2VsZi5zdGFydFBvaW50c1swXSwgc2VsZi5zdGFydFBvaW50c1sxXSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5vbnNjcm9sbCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgc2VsZi5pc1Njcm9sbGluZyA9IHRydWU7XHJcblxyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBzZWxmLm9uc2Nyb2xsLCB0cnVlKTtcclxuICB9O1xyXG5cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLm9udG91Y2htb3ZlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAvLyBNYWtlIHN1cmUgdXNlciBoYXMgbm90IHJlbGVhc2VkIG92ZXIgaWZyYW1lIG9yIGRpc2FibGVkIGVsZW1lbnRcclxuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQuYnV0dG9ucyAhPT0gdW5kZWZpbmVkICYmIGUub3JpZ2luYWxFdmVudC5idXR0b25zID09PSAwKSB7XHJcbiAgICAgIHNlbGYub250b3VjaGVuZChlKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzZWxmLmlzU2Nyb2xsaW5nKSB7XHJcbiAgICAgIHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLm5ld1BvaW50cyA9IGdldFBvaW50ZXJYWShlKTtcclxuXHJcbiAgICBpZiAoIShzZWxmLm9wdHMgfHwgc2VsZi5jYW5QYW4pIHx8ICFzZWxmLm5ld1BvaW50cy5sZW5ndGggfHwgIXNlbGYubmV3UG9pbnRzLmxlbmd0aCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCEoc2VsZi5pc1N3aXBpbmcgJiYgc2VsZi5pc1N3aXBpbmcgPT09IHRydWUpKSB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLmRpc3RhbmNlWCA9IGRpc3RhbmNlKHNlbGYubmV3UG9pbnRzWzBdLCBzZWxmLnN0YXJ0UG9pbnRzWzBdLCBcInhcIik7XHJcbiAgICBzZWxmLmRpc3RhbmNlWSA9IGRpc3RhbmNlKHNlbGYubmV3UG9pbnRzWzBdLCBzZWxmLnN0YXJ0UG9pbnRzWzBdLCBcInlcIik7XHJcblxyXG4gICAgc2VsZi5kaXN0YW5jZSA9IGRpc3RhbmNlKHNlbGYubmV3UG9pbnRzWzBdLCBzZWxmLnN0YXJ0UG9pbnRzWzBdKTtcclxuXHJcbiAgICAvLyBTa2lwIGZhbHNlIG9udG91Y2htb3ZlIGV2ZW50cyAoQ2hyb21lKVxyXG4gICAgaWYgKHNlbGYuZGlzdGFuY2UgPiAwKSB7XHJcbiAgICAgIGlmIChzZWxmLmlzU3dpcGluZykge1xyXG4gICAgICAgIHNlbGYub25Td2lwZShlKTtcclxuICAgICAgfSBlbHNlIGlmIChzZWxmLmlzUGFubmluZykge1xyXG4gICAgICAgIHNlbGYub25QYW4oKTtcclxuICAgICAgfSBlbHNlIGlmIChzZWxmLmlzWm9vbWluZykge1xyXG4gICAgICAgIHNlbGYub25ab29tKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLm9uU3dpcGUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICBpbnN0YW5jZSA9IHNlbGYuaW5zdGFuY2UsXHJcbiAgICAgIHN3aXBpbmcgPSBzZWxmLmlzU3dpcGluZyxcclxuICAgICAgbGVmdCA9IHNlbGYuc2xpZGVyU3RhcnRQb3MubGVmdCB8fCAwLFxyXG4gICAgICBhbmdsZTtcclxuXHJcbiAgICAvLyBJZiBkaXJlY3Rpb24gaXMgbm90IHlldCBkZXRlcm1pbmVkXHJcbiAgICBpZiAoc3dpcGluZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAvLyBXZSBuZWVkIGF0IGxlYXN0IDEwcHggZGlzdGFuY2UgdG8gY29ycmVjdGx5IGNhbGN1bGF0ZSBhbiBhbmdsZVxyXG4gICAgICBpZiAoTWF0aC5hYnMoc2VsZi5kaXN0YW5jZSkgPiAxMCkge1xyXG4gICAgICAgIHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyICYmIHNlbGYub3B0cy52ZXJ0aWNhbCkge1xyXG4gICAgICAgICAgc2VsZi5pc1N3aXBpbmcgPSBcInlcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKGluc3RhbmNlLmlzRHJhZ2dpbmcgfHwgc2VsZi5vcHRzLnZlcnRpY2FsID09PSBmYWxzZSB8fCAoc2VsZi5vcHRzLnZlcnRpY2FsID09PSBcImF1dG9cIiAmJiAkKHdpbmRvdykud2lkdGgoKSA+IDgwMCkpIHtcclxuICAgICAgICAgIHNlbGYuaXNTd2lwaW5nID0gXCJ4XCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFuZ2xlID0gTWF0aC5hYnMoKE1hdGguYXRhbjIoc2VsZi5kaXN0YW5jZVksIHNlbGYuZGlzdGFuY2VYKSAqIDE4MCkgLyBNYXRoLlBJKTtcclxuXHJcbiAgICAgICAgICBzZWxmLmlzU3dpcGluZyA9IGFuZ2xlID4gNDUgJiYgYW5nbGUgPCAxMzUgPyBcInlcIiA6IFwieFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNlbGYuaXNTd2lwaW5nID09PSBcInlcIiAmJiAkLmZhbmN5Ym94LmlzTW9iaWxlICYmIHNlbGYuaXNTY3JvbGxhYmxlKSB7XHJcbiAgICAgICAgICBzZWxmLmlzU2Nyb2xsaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnN0YW5jZS5pc0RyYWdnaW5nID0gc2VsZi5pc1N3aXBpbmc7XHJcblxyXG4gICAgICAgIC8vIFJlc2V0IHBvaW50cyB0byBhdm9pZCBqdW1waW5nLCBiZWNhdXNlIHdlIGRyb3BwZWQgZmlyc3Qgc3dpcGVzIHRvIGNhbGN1bGF0ZSB0aGUgYW5nbGVcclxuICAgICAgICBzZWxmLnN0YXJ0UG9pbnRzID0gc2VsZi5uZXdQb2ludHM7XHJcblxyXG4gICAgICAgICQuZWFjaChpbnN0YW5jZS5zbGlkZXMsIGZ1bmN0aW9uIChpbmRleCwgc2xpZGUpIHtcclxuICAgICAgICAgIHZhciBzbGlkZVBvcywgc3RhZ2VQb3M7XHJcblxyXG4gICAgICAgICAgJC5mYW5jeWJveC5zdG9wKHNsaWRlLiRzbGlkZSk7XHJcblxyXG4gICAgICAgICAgc2xpZGVQb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShzbGlkZS4kc2xpZGUpO1xyXG4gICAgICAgICAgc3RhZ2VQb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShpbnN0YW5jZS4kcmVmcy5zdGFnZSk7XHJcblxyXG4gICAgICAgICAgc2xpZGUuJHNsaWRlXHJcbiAgICAgICAgICAgIC5jc3Moe1xyXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogXCJcIixcclxuICAgICAgICAgICAgICBvcGFjaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgIFwidHJhbnNpdGlvbi1kdXJhdGlvblwiOiBcIlwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWFuaW1hdGVkXCIpXHJcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhmdW5jdGlvbiAoaW5kZXgsIGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiAoY2xhc3NOYW1lLm1hdGNoKC8oXnxcXHMpZmFuY3lib3gtZngtXFxTKy9nKSB8fCBbXSkuam9pbihcIiBcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGlmIChzbGlkZS5wb3MgPT09IGluc3RhbmNlLmN1cnJlbnQucG9zKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2xpZGVyU3RhcnRQb3MudG9wID0gc2xpZGVQb3MudG9wIC0gc3RhZ2VQb3MudG9wO1xyXG4gICAgICAgICAgICBzZWxmLnNsaWRlclN0YXJ0UG9zLmxlZnQgPSBzbGlkZVBvcy5sZWZ0IC0gc3RhZ2VQb3MubGVmdDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZShzbGlkZS4kc2xpZGUsIHtcclxuICAgICAgICAgICAgdG9wOiBzbGlkZVBvcy50b3AgLSBzdGFnZVBvcy50b3AsXHJcbiAgICAgICAgICAgIGxlZnQ6IHNsaWRlUG9zLmxlZnQgLSBzdGFnZVBvcy5sZWZ0XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gU3RvcCBzbGlkZXNob3dcclxuICAgICAgICBpZiAoaW5zdGFuY2UuU2xpZGVTaG93ICYmIGluc3RhbmNlLlNsaWRlU2hvdy5pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgaW5zdGFuY2UuU2xpZGVTaG93LnN0b3AoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdGlja3kgZWRnZXNcclxuICAgIGlmIChzd2lwaW5nID09IFwieFwiKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBzZWxmLmRpc3RhbmNlWCA+IDAgJiZcclxuICAgICAgICAoc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyIHx8IChzZWxmLmluc3RhbmNlLmN1cnJlbnQuaW5kZXggPT09IDAgJiYgIXNlbGYuaW5zdGFuY2UuY3VycmVudC5vcHRzLmxvb3ApKVxyXG4gICAgICApIHtcclxuICAgICAgICBsZWZ0ID0gbGVmdCArIE1hdGgucG93KHNlbGYuZGlzdGFuY2VYLCAwLjgpO1xyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIHNlbGYuZGlzdGFuY2VYIDwgMCAmJlxyXG4gICAgICAgIChzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCA8IDIgfHxcclxuICAgICAgICAgIChzZWxmLmluc3RhbmNlLmN1cnJlbnQuaW5kZXggPT09IHNlbGYuaW5zdGFuY2UuZ3JvdXAubGVuZ3RoIC0gMSAmJiAhc2VsZi5pbnN0YW5jZS5jdXJyZW50Lm9wdHMubG9vcCkpXHJcbiAgICAgICkge1xyXG4gICAgICAgIGxlZnQgPSBsZWZ0IC0gTWF0aC5wb3coLXNlbGYuZGlzdGFuY2VYLCAwLjgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxlZnQgPSBsZWZ0ICsgc2VsZi5kaXN0YW5jZVg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZWxmLnNsaWRlckxhc3RQb3MgPSB7XHJcbiAgICAgIHRvcDogc3dpcGluZyA9PSBcInhcIiA/IDAgOiBzZWxmLnNsaWRlclN0YXJ0UG9zLnRvcCArIHNlbGYuZGlzdGFuY2VZLFxyXG4gICAgICBsZWZ0OiBsZWZ0XHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChzZWxmLnJlcXVlc3RJZCkge1xyXG4gICAgICBjYW5jZWxBRnJhbWUoc2VsZi5yZXF1ZXN0SWQpO1xyXG5cclxuICAgICAgc2VsZi5yZXF1ZXN0SWQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGYucmVxdWVzdElkID0gcmVxdWVzdEFGcmFtZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmIChzZWxmLnNsaWRlckxhc3RQb3MpIHtcclxuICAgICAgICAkLmVhY2goc2VsZi5pbnN0YW5jZS5zbGlkZXMsIGZ1bmN0aW9uIChpbmRleCwgc2xpZGUpIHtcclxuICAgICAgICAgIHZhciBwb3MgPSBzbGlkZS5wb3MgLSBzZWxmLmluc3RhbmNlLmN1cnJQb3M7XHJcblxyXG4gICAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoc2xpZGUuJHNsaWRlLCB7XHJcbiAgICAgICAgICAgIHRvcDogc2VsZi5zbGlkZXJMYXN0UG9zLnRvcCxcclxuICAgICAgICAgICAgbGVmdDogc2VsZi5zbGlkZXJMYXN0UG9zLmxlZnQgKyBwb3MgKiBzZWxmLmNhbnZhc1dpZHRoICsgcG9zICogc2xpZGUub3B0cy5ndXR0ZXJcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZWxmLiRjb250YWluZXIuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1zbGlkaW5nXCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLm9uUGFuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIC8vIFByZXZlbnQgYWNjaWRlbnRhbCBtb3ZlbWVudCAoc29tZXRpbWVzLCB3aGVuIHRhcHBpbmcgY2FzdWFsbHksIGZpbmdlciBjYW4gbW92ZSBhIGJpdClcclxuICAgIGlmIChkaXN0YW5jZShzZWxmLm5ld1BvaW50c1swXSwgc2VsZi5yZWFsUG9pbnRzWzBdKSA8ICgkLmZhbmN5Ym94LmlzTW9iaWxlID8gMTAgOiA1KSkge1xyXG4gICAgICBzZWxmLnN0YXJ0UG9pbnRzID0gc2VsZi5uZXdQb2ludHM7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLmNhblRhcCA9IGZhbHNlO1xyXG5cclxuICAgIHNlbGYuY29udGVudExhc3RQb3MgPSBzZWxmLmxpbWl0TW92ZW1lbnQoKTtcclxuXHJcbiAgICBpZiAoc2VsZi5yZXF1ZXN0SWQpIHtcclxuICAgICAgY2FuY2VsQUZyYW1lKHNlbGYucmVxdWVzdElkKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLnJlcXVlc3RJZCA9IHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZShzZWxmLiRjb250ZW50LCBzZWxmLmNvbnRlbnRMYXN0UG9zKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8vIE1ha2UgcGFubmluZyBzdGlja3kgdG8gdGhlIGVkZ2VzXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5saW1pdE1vdmVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHZhciBjYW52YXNXaWR0aCA9IHNlbGYuY2FudmFzV2lkdGg7XHJcbiAgICB2YXIgY2FudmFzSGVpZ2h0ID0gc2VsZi5jYW52YXNIZWlnaHQ7XHJcblxyXG4gICAgdmFyIGRpc3RhbmNlWCA9IHNlbGYuZGlzdGFuY2VYO1xyXG4gICAgdmFyIGRpc3RhbmNlWSA9IHNlbGYuZGlzdGFuY2VZO1xyXG5cclxuICAgIHZhciBjb250ZW50U3RhcnRQb3MgPSBzZWxmLmNvbnRlbnRTdGFydFBvcztcclxuXHJcbiAgICB2YXIgY3VycmVudE9mZnNldFggPSBjb250ZW50U3RhcnRQb3MubGVmdDtcclxuICAgIHZhciBjdXJyZW50T2Zmc2V0WSA9IGNvbnRlbnRTdGFydFBvcy50b3A7XHJcblxyXG4gICAgdmFyIGN1cnJlbnRXaWR0aCA9IGNvbnRlbnRTdGFydFBvcy53aWR0aDtcclxuICAgIHZhciBjdXJyZW50SGVpZ2h0ID0gY29udGVudFN0YXJ0UG9zLmhlaWdodDtcclxuXHJcbiAgICB2YXIgbWluVHJhbnNsYXRlWCwgbWluVHJhbnNsYXRlWSwgbWF4VHJhbnNsYXRlWCwgbWF4VHJhbnNsYXRlWSwgbmV3T2Zmc2V0WCwgbmV3T2Zmc2V0WTtcclxuXHJcbiAgICBpZiAoY3VycmVudFdpZHRoID4gY2FudmFzV2lkdGgpIHtcclxuICAgICAgbmV3T2Zmc2V0WCA9IGN1cnJlbnRPZmZzZXRYICsgZGlzdGFuY2VYO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV3T2Zmc2V0WCA9IGN1cnJlbnRPZmZzZXRYO1xyXG4gICAgfVxyXG5cclxuICAgIG5ld09mZnNldFkgPSBjdXJyZW50T2Zmc2V0WSArIGRpc3RhbmNlWTtcclxuXHJcbiAgICAvLyBTbG93IGRvd24gcHJvcG9ydGlvbmFsbHkgdG8gdHJhdmVsZWQgZGlzdGFuY2VcclxuICAgIG1pblRyYW5zbGF0ZVggPSBNYXRoLm1heCgwLCBjYW52YXNXaWR0aCAqIDAuNSAtIGN1cnJlbnRXaWR0aCAqIDAuNSk7XHJcbiAgICBtaW5UcmFuc2xhdGVZID0gTWF0aC5tYXgoMCwgY2FudmFzSGVpZ2h0ICogMC41IC0gY3VycmVudEhlaWdodCAqIDAuNSk7XHJcblxyXG4gICAgbWF4VHJhbnNsYXRlWCA9IE1hdGgubWluKGNhbnZhc1dpZHRoIC0gY3VycmVudFdpZHRoLCBjYW52YXNXaWR0aCAqIDAuNSAtIGN1cnJlbnRXaWR0aCAqIDAuNSk7XHJcbiAgICBtYXhUcmFuc2xhdGVZID0gTWF0aC5taW4oY2FudmFzSGVpZ2h0IC0gY3VycmVudEhlaWdodCwgY2FudmFzSGVpZ2h0ICogMC41IC0gY3VycmVudEhlaWdodCAqIDAuNSk7XHJcblxyXG4gICAgLy8gICAtPlxyXG4gICAgaWYgKGRpc3RhbmNlWCA+IDAgJiYgbmV3T2Zmc2V0WCA+IG1pblRyYW5zbGF0ZVgpIHtcclxuICAgICAgbmV3T2Zmc2V0WCA9IG1pblRyYW5zbGF0ZVggLSAxICsgTWF0aC5wb3coLW1pblRyYW5zbGF0ZVggKyBjdXJyZW50T2Zmc2V0WCArIGRpc3RhbmNlWCwgMC44KSB8fCAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vICAgIDwtXHJcbiAgICBpZiAoZGlzdGFuY2VYIDwgMCAmJiBuZXdPZmZzZXRYIDwgbWF4VHJhbnNsYXRlWCkge1xyXG4gICAgICBuZXdPZmZzZXRYID0gbWF4VHJhbnNsYXRlWCArIDEgLSBNYXRoLnBvdyhtYXhUcmFuc2xhdGVYIC0gY3VycmVudE9mZnNldFggLSBkaXN0YW5jZVgsIDAuOCkgfHwgMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyAgIFxcL1xyXG4gICAgaWYgKGRpc3RhbmNlWSA+IDAgJiYgbmV3T2Zmc2V0WSA+IG1pblRyYW5zbGF0ZVkpIHtcclxuICAgICAgbmV3T2Zmc2V0WSA9IG1pblRyYW5zbGF0ZVkgLSAxICsgTWF0aC5wb3coLW1pblRyYW5zbGF0ZVkgKyBjdXJyZW50T2Zmc2V0WSArIGRpc3RhbmNlWSwgMC44KSB8fCAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vICAgL1xcXHJcbiAgICBpZiAoZGlzdGFuY2VZIDwgMCAmJiBuZXdPZmZzZXRZIDwgbWF4VHJhbnNsYXRlWSkge1xyXG4gICAgICBuZXdPZmZzZXRZID0gbWF4VHJhbnNsYXRlWSArIDEgLSBNYXRoLnBvdyhtYXhUcmFuc2xhdGVZIC0gY3VycmVudE9mZnNldFkgLSBkaXN0YW5jZVksIDAuOCkgfHwgMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b3A6IG5ld09mZnNldFksXHJcbiAgICAgIGxlZnQ6IG5ld09mZnNldFhcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5saW1pdFBvc2l0aW9uID0gZnVuY3Rpb24gKG5ld09mZnNldFgsIG5ld09mZnNldFksIG5ld1dpZHRoLCBuZXdIZWlnaHQpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB2YXIgY2FudmFzV2lkdGggPSBzZWxmLmNhbnZhc1dpZHRoO1xyXG4gICAgdmFyIGNhbnZhc0hlaWdodCA9IHNlbGYuY2FudmFzSGVpZ2h0O1xyXG5cclxuICAgIGlmIChuZXdXaWR0aCA+IGNhbnZhc1dpZHRoKSB7XHJcbiAgICAgIG5ld09mZnNldFggPSBuZXdPZmZzZXRYID4gMCA/IDAgOiBuZXdPZmZzZXRYO1xyXG4gICAgICBuZXdPZmZzZXRYID0gbmV3T2Zmc2V0WCA8IGNhbnZhc1dpZHRoIC0gbmV3V2lkdGggPyBjYW52YXNXaWR0aCAtIG5ld1dpZHRoIDogbmV3T2Zmc2V0WDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIENlbnRlciBob3Jpem9udGFsbHlcclxuICAgICAgbmV3T2Zmc2V0WCA9IE1hdGgubWF4KDAsIGNhbnZhc1dpZHRoIC8gMiAtIG5ld1dpZHRoIC8gMik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5ld0hlaWdodCA+IGNhbnZhc0hlaWdodCkge1xyXG4gICAgICBuZXdPZmZzZXRZID0gbmV3T2Zmc2V0WSA+IDAgPyAwIDogbmV3T2Zmc2V0WTtcclxuICAgICAgbmV3T2Zmc2V0WSA9IG5ld09mZnNldFkgPCBjYW52YXNIZWlnaHQgLSBuZXdIZWlnaHQgPyBjYW52YXNIZWlnaHQgLSBuZXdIZWlnaHQgOiBuZXdPZmZzZXRZO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gQ2VudGVyIHZlcnRpY2FsbHlcclxuICAgICAgbmV3T2Zmc2V0WSA9IE1hdGgubWF4KDAsIGNhbnZhc0hlaWdodCAvIDIgLSBuZXdIZWlnaHQgLyAyKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b3A6IG5ld09mZnNldFksXHJcbiAgICAgIGxlZnQ6IG5ld09mZnNldFhcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5vblpvb20gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIGN1cnJlbnQgZGlzdGFuY2UgYmV0d2VlbiBwb2ludHMgdG8gZ2V0IHBpbmNoIHJhdGlvIGFuZCBuZXcgd2lkdGggYW5kIGhlaWdodFxyXG4gICAgdmFyIGNvbnRlbnRTdGFydFBvcyA9IHNlbGYuY29udGVudFN0YXJ0UG9zO1xyXG5cclxuICAgIHZhciBjdXJyZW50V2lkdGggPSBjb250ZW50U3RhcnRQb3Mud2lkdGg7XHJcbiAgICB2YXIgY3VycmVudEhlaWdodCA9IGNvbnRlbnRTdGFydFBvcy5oZWlnaHQ7XHJcblxyXG4gICAgdmFyIGN1cnJlbnRPZmZzZXRYID0gY29udGVudFN0YXJ0UG9zLmxlZnQ7XHJcbiAgICB2YXIgY3VycmVudE9mZnNldFkgPSBjb250ZW50U3RhcnRQb3MudG9wO1xyXG5cclxuICAgIHZhciBlbmREaXN0YW5jZUJldHdlZW5GaW5nZXJzID0gZGlzdGFuY2Uoc2VsZi5uZXdQb2ludHNbMF0sIHNlbGYubmV3UG9pbnRzWzFdKTtcclxuXHJcbiAgICB2YXIgcGluY2hSYXRpbyA9IGVuZERpc3RhbmNlQmV0d2VlbkZpbmdlcnMgLyBzZWxmLnN0YXJ0RGlzdGFuY2VCZXR3ZWVuRmluZ2VycztcclxuXHJcbiAgICB2YXIgbmV3V2lkdGggPSBNYXRoLmZsb29yKGN1cnJlbnRXaWR0aCAqIHBpbmNoUmF0aW8pO1xyXG4gICAgdmFyIG5ld0hlaWdodCA9IE1hdGguZmxvb3IoY3VycmVudEhlaWdodCAqIHBpbmNoUmF0aW8pO1xyXG5cclxuICAgIC8vIFRoaXMgaXMgdGhlIHRyYW5zbGF0aW9uIGR1ZSB0byBwaW5jaC16b29taW5nXHJcbiAgICB2YXIgdHJhbnNsYXRlRnJvbVpvb21pbmdYID0gKGN1cnJlbnRXaWR0aCAtIG5ld1dpZHRoKSAqIHNlbGYucGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRYO1xyXG4gICAgdmFyIHRyYW5zbGF0ZUZyb21ab29taW5nWSA9IChjdXJyZW50SGVpZ2h0IC0gbmV3SGVpZ2h0KSAqIHNlbGYucGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRZO1xyXG5cclxuICAgIC8vIFBvaW50IGJldHdlZW4gdGhlIHR3byB0b3VjaGVzXHJcbiAgICB2YXIgY2VudGVyUG9pbnRFbmRYID0gKHNlbGYubmV3UG9pbnRzWzBdLnggKyBzZWxmLm5ld1BvaW50c1sxXS54KSAvIDIgLSAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpO1xyXG4gICAgdmFyIGNlbnRlclBvaW50RW5kWSA9IChzZWxmLm5ld1BvaW50c1swXS55ICsgc2VsZi5uZXdQb2ludHNbMV0ueSkgLyAyIC0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xyXG5cclxuICAgIC8vIEFuZCB0aGlzIGlzIHRoZSB0cmFuc2xhdGlvbiBkdWUgdG8gdHJhbnNsYXRpb24gb2YgdGhlIGNlbnRlcnBvaW50XHJcbiAgICAvLyBiZXR3ZWVuIHRoZSB0d28gZmluZ2Vyc1xyXG4gICAgdmFyIHRyYW5zbGF0ZUZyb21UcmFuc2xhdGluZ1ggPSBjZW50ZXJQb2ludEVuZFggLSBzZWxmLmNlbnRlclBvaW50U3RhcnRYO1xyXG4gICAgdmFyIHRyYW5zbGF0ZUZyb21UcmFuc2xhdGluZ1kgPSBjZW50ZXJQb2ludEVuZFkgLSBzZWxmLmNlbnRlclBvaW50U3RhcnRZO1xyXG5cclxuICAgIC8vIFRoZSBuZXcgb2Zmc2V0IGlzIHRoZSBvbGQvY3VycmVudCBvbmUgcGx1cyB0aGUgdG90YWwgdHJhbnNsYXRpb25cclxuICAgIHZhciBuZXdPZmZzZXRYID0gY3VycmVudE9mZnNldFggKyAodHJhbnNsYXRlRnJvbVpvb21pbmdYICsgdHJhbnNsYXRlRnJvbVRyYW5zbGF0aW5nWCk7XHJcbiAgICB2YXIgbmV3T2Zmc2V0WSA9IGN1cnJlbnRPZmZzZXRZICsgKHRyYW5zbGF0ZUZyb21ab29taW5nWSArIHRyYW5zbGF0ZUZyb21UcmFuc2xhdGluZ1kpO1xyXG5cclxuICAgIHZhciBuZXdQb3MgPSB7XHJcbiAgICAgIHRvcDogbmV3T2Zmc2V0WSxcclxuICAgICAgbGVmdDogbmV3T2Zmc2V0WCxcclxuICAgICAgc2NhbGVYOiBwaW5jaFJhdGlvLFxyXG4gICAgICBzY2FsZVk6IHBpbmNoUmF0aW9cclxuICAgIH07XHJcblxyXG4gICAgc2VsZi5jYW5UYXAgPSBmYWxzZTtcclxuXHJcbiAgICBzZWxmLm5ld1dpZHRoID0gbmV3V2lkdGg7XHJcbiAgICBzZWxmLm5ld0hlaWdodCA9IG5ld0hlaWdodDtcclxuXHJcbiAgICBzZWxmLmNvbnRlbnRMYXN0UG9zID0gbmV3UG9zO1xyXG5cclxuICAgIGlmIChzZWxmLnJlcXVlc3RJZCkge1xyXG4gICAgICBjYW5jZWxBRnJhbWUoc2VsZi5yZXF1ZXN0SWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGYucmVxdWVzdElkID0gcmVxdWVzdEFGcmFtZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKHNlbGYuJGNvbnRlbnQsIHNlbGYuY29udGVudExhc3RQb3MpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5vbnRvdWNoZW5kID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB2YXIgc3dpcGluZyA9IHNlbGYuaXNTd2lwaW5nO1xyXG4gICAgdmFyIHBhbm5pbmcgPSBzZWxmLmlzUGFubmluZztcclxuICAgIHZhciB6b29taW5nID0gc2VsZi5pc1pvb21pbmc7XHJcbiAgICB2YXIgc2Nyb2xsaW5nID0gc2VsZi5pc1Njcm9sbGluZztcclxuXHJcbiAgICBzZWxmLmVuZFBvaW50cyA9IGdldFBvaW50ZXJYWShlKTtcclxuICAgIHNlbGYuZE1zID0gTWF0aC5tYXgobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzZWxmLnN0YXJ0VGltZSwgMSk7XHJcblxyXG4gICAgc2VsZi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtZ3JhYmJpbmdcIik7XHJcblxyXG4gICAgJChkb2N1bWVudCkub2ZmKFwiLmZiLnRvdWNoXCIpO1xyXG5cclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgc2VsZi5vbnNjcm9sbCwgdHJ1ZSk7XHJcblxyXG4gICAgaWYgKHNlbGYucmVxdWVzdElkKSB7XHJcbiAgICAgIGNhbmNlbEFGcmFtZShzZWxmLnJlcXVlc3RJZCk7XHJcblxyXG4gICAgICBzZWxmLnJlcXVlc3RJZCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5pc1N3aXBpbmcgPSBmYWxzZTtcclxuICAgIHNlbGYuaXNQYW5uaW5nID0gZmFsc2U7XHJcbiAgICBzZWxmLmlzWm9vbWluZyA9IGZhbHNlO1xyXG4gICAgc2VsZi5pc1Njcm9sbGluZyA9IGZhbHNlO1xyXG5cclxuICAgIHNlbGYuaW5zdGFuY2UuaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG5cclxuICAgIGlmIChzZWxmLmNhblRhcCkge1xyXG4gICAgICByZXR1cm4gc2VsZi5vblRhcChlKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLnNwZWVkID0gMTAwO1xyXG5cclxuICAgIC8vIFNwZWVkIGluIHB4L21zXHJcbiAgICBzZWxmLnZlbG9jaXR5WCA9IChzZWxmLmRpc3RhbmNlWCAvIHNlbGYuZE1zKSAqIDAuNTtcclxuICAgIHNlbGYudmVsb2NpdHlZID0gKHNlbGYuZGlzdGFuY2VZIC8gc2VsZi5kTXMpICogMC41O1xyXG5cclxuICAgIGlmIChwYW5uaW5nKSB7XHJcbiAgICAgIHNlbGYuZW5kUGFubmluZygpO1xyXG4gICAgfSBlbHNlIGlmICh6b29taW5nKSB7XHJcbiAgICAgIHNlbGYuZW5kWm9vbWluZygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2VsZi5lbmRTd2lwaW5nKHN3aXBpbmcsIHNjcm9sbGluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuO1xyXG4gIH07XHJcblxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUuZW5kU3dpcGluZyA9IGZ1bmN0aW9uIChzd2lwaW5nLCBzY3JvbGxpbmcpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgcmV0ID0gZmFsc2UsXHJcbiAgICAgIGxlbiA9IHNlbGYuaW5zdGFuY2UuZ3JvdXAubGVuZ3RoLFxyXG4gICAgICBkaXN0YW5jZVggPSBNYXRoLmFicyhzZWxmLmRpc3RhbmNlWCksXHJcbiAgICAgIGNhbkFkdmFuY2UgPSBzd2lwaW5nID09IFwieFwiICYmIGxlbiA+IDEgJiYgKChzZWxmLmRNcyA+IDEzMCAmJiBkaXN0YW5jZVggPiAxMCkgfHwgZGlzdGFuY2VYID4gNTApLFxyXG4gICAgICBzcGVlZFggPSAzMDA7XHJcblxyXG4gICAgc2VsZi5zbGlkZXJMYXN0UG9zID0gbnVsbDtcclxuXHJcbiAgICAvLyBDbG9zZSBpZiBzd2lwZWQgdmVydGljYWxseSAvIG5hdmlnYXRlIGlmIGhvcml6b250YWxseVxyXG4gICAgaWYgKHN3aXBpbmcgPT0gXCJ5XCIgJiYgIXNjcm9sbGluZyAmJiBNYXRoLmFicyhzZWxmLmRpc3RhbmNlWSkgPiA1MCkge1xyXG4gICAgICAvLyBDb250aW51ZSB2ZXJ0aWNhbCBtb3ZlbWVudFxyXG4gICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoXHJcbiAgICAgICAgc2VsZi5pbnN0YW5jZS5jdXJyZW50LiRzbGlkZSwge1xyXG4gICAgICAgICAgdG9wOiBzZWxmLnNsaWRlclN0YXJ0UG9zLnRvcCArIHNlbGYuZGlzdGFuY2VZICsgc2VsZi52ZWxvY2l0eVkgKiAxNTAsXHJcbiAgICAgICAgICBvcGFjaXR5OiAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICAyMDBcclxuICAgICAgKTtcclxuICAgICAgcmV0ID0gc2VsZi5pbnN0YW5jZS5jbG9zZSh0cnVlLCAyNTApO1xyXG4gICAgfSBlbHNlIGlmIChjYW5BZHZhbmNlICYmIHNlbGYuZGlzdGFuY2VYID4gMCkge1xyXG4gICAgICByZXQgPSBzZWxmLmluc3RhbmNlLnByZXZpb3VzKHNwZWVkWCk7XHJcbiAgICB9IGVsc2UgaWYgKGNhbkFkdmFuY2UgJiYgc2VsZi5kaXN0YW5jZVggPCAwKSB7XHJcbiAgICAgIHJldCA9IHNlbGYuaW5zdGFuY2UubmV4dChzcGVlZFgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChyZXQgPT09IGZhbHNlICYmIChzd2lwaW5nID09IFwieFwiIHx8IHN3aXBpbmcgPT0gXCJ5XCIpKSB7XHJcbiAgICAgIHNlbGYuaW5zdGFuY2UuY2VudGVyU2xpZGUoMjAwKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1zbGlkaW5nXCIpO1xyXG4gIH07XHJcblxyXG4gIC8vIExpbWl0IHBhbm5pbmcgZnJvbSBlZGdlc1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUuZW5kUGFubmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgbmV3T2Zmc2V0WCxcclxuICAgICAgbmV3T2Zmc2V0WSxcclxuICAgICAgbmV3UG9zO1xyXG5cclxuICAgIGlmICghc2VsZi5jb250ZW50TGFzdFBvcykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNlbGYub3B0cy5tb21lbnR1bSA9PT0gZmFsc2UgfHwgc2VsZi5kTXMgPiAzNTApIHtcclxuICAgICAgbmV3T2Zmc2V0WCA9IHNlbGYuY29udGVudExhc3RQb3MubGVmdDtcclxuICAgICAgbmV3T2Zmc2V0WSA9IHNlbGYuY29udGVudExhc3RQb3MudG9wO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gQ29udGludWUgbW92ZW1lbnRcclxuICAgICAgbmV3T2Zmc2V0WCA9IHNlbGYuY29udGVudExhc3RQb3MubGVmdCArIHNlbGYudmVsb2NpdHlYICogNTAwO1xyXG4gICAgICBuZXdPZmZzZXRZID0gc2VsZi5jb250ZW50TGFzdFBvcy50b3AgKyBzZWxmLnZlbG9jaXR5WSAqIDUwMDtcclxuICAgIH1cclxuXHJcbiAgICBuZXdQb3MgPSBzZWxmLmxpbWl0UG9zaXRpb24obmV3T2Zmc2V0WCwgbmV3T2Zmc2V0WSwgc2VsZi5jb250ZW50U3RhcnRQb3Mud2lkdGgsIHNlbGYuY29udGVudFN0YXJ0UG9zLmhlaWdodCk7XHJcblxyXG4gICAgbmV3UG9zLndpZHRoID0gc2VsZi5jb250ZW50U3RhcnRQb3Mud2lkdGg7XHJcbiAgICBuZXdQb3MuaGVpZ2h0ID0gc2VsZi5jb250ZW50U3RhcnRQb3MuaGVpZ2h0O1xyXG5cclxuICAgICQuZmFuY3lib3guYW5pbWF0ZShzZWxmLiRjb250ZW50LCBuZXdQb3MsIDM2Nik7XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5lbmRab29taW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHZhciBjdXJyZW50ID0gc2VsZi5pbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuICAgIHZhciBuZXdPZmZzZXRYLCBuZXdPZmZzZXRZLCBuZXdQb3MsIHJlc2V0O1xyXG5cclxuICAgIHZhciBuZXdXaWR0aCA9IHNlbGYubmV3V2lkdGg7XHJcbiAgICB2YXIgbmV3SGVpZ2h0ID0gc2VsZi5uZXdIZWlnaHQ7XHJcblxyXG4gICAgaWYgKCFzZWxmLmNvbnRlbnRMYXN0UG9zKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBuZXdPZmZzZXRYID0gc2VsZi5jb250ZW50TGFzdFBvcy5sZWZ0O1xyXG4gICAgbmV3T2Zmc2V0WSA9IHNlbGYuY29udGVudExhc3RQb3MudG9wO1xyXG5cclxuICAgIHJlc2V0ID0ge1xyXG4gICAgICB0b3A6IG5ld09mZnNldFksXHJcbiAgICAgIGxlZnQ6IG5ld09mZnNldFgsXHJcbiAgICAgIHdpZHRoOiBuZXdXaWR0aCxcclxuICAgICAgaGVpZ2h0OiBuZXdIZWlnaHQsXHJcbiAgICAgIHNjYWxlWDogMSxcclxuICAgICAgc2NhbGVZOiAxXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFJlc2V0IHNjYWxleC9zY2FsZVkgdmFsdWVzOyB0aGlzIGhlbHBzIGZvciBwZXJmb21hbmNlIGFuZCBkb2VzIG5vdCBicmVhayBhbmltYXRpb25cclxuICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKHNlbGYuJGNvbnRlbnQsIHJlc2V0KTtcclxuXHJcbiAgICBpZiAobmV3V2lkdGggPCBzZWxmLmNhbnZhc1dpZHRoICYmIG5ld0hlaWdodCA8IHNlbGYuY2FudmFzSGVpZ2h0KSB7XHJcbiAgICAgIHNlbGYuaW5zdGFuY2Uuc2NhbGVUb0ZpdCgxNTApO1xyXG4gICAgfSBlbHNlIGlmIChuZXdXaWR0aCA+IGN1cnJlbnQud2lkdGggfHwgbmV3SGVpZ2h0ID4gY3VycmVudC5oZWlnaHQpIHtcclxuICAgICAgc2VsZi5pbnN0YW5jZS5zY2FsZVRvQWN0dWFsKHNlbGYuY2VudGVyUG9pbnRTdGFydFgsIHNlbGYuY2VudGVyUG9pbnRTdGFydFksIDE1MCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBuZXdQb3MgPSBzZWxmLmxpbWl0UG9zaXRpb24obmV3T2Zmc2V0WCwgbmV3T2Zmc2V0WSwgbmV3V2lkdGgsIG5ld0hlaWdodCk7XHJcblxyXG4gICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoc2VsZi4kY29udGVudCwgbmV3UG9zLCAxNTApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUub25UYXAgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyICR0YXJnZXQgPSAkKGUudGFyZ2V0KTtcclxuXHJcbiAgICB2YXIgaW5zdGFuY2UgPSBzZWxmLmluc3RhbmNlO1xyXG4gICAgdmFyIGN1cnJlbnQgPSBpbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuICAgIHZhciBlbmRQb2ludHMgPSAoZSAmJiBnZXRQb2ludGVyWFkoZSkpIHx8IHNlbGYuc3RhcnRQb2ludHM7XHJcblxyXG4gICAgdmFyIHRhcFggPSBlbmRQb2ludHNbMF0gPyBlbmRQb2ludHNbMF0ueCAtICQod2luZG93KS5zY3JvbGxMZWZ0KCkgLSBzZWxmLnN0YWdlUG9zLmxlZnQgOiAwO1xyXG4gICAgdmFyIHRhcFkgPSBlbmRQb2ludHNbMF0gPyBlbmRQb2ludHNbMF0ueSAtICQod2luZG93KS5zY3JvbGxUb3AoKSAtIHNlbGYuc3RhZ2VQb3MudG9wIDogMDtcclxuXHJcbiAgICB2YXIgd2hlcmU7XHJcblxyXG4gICAgdmFyIHByb2Nlc3MgPSBmdW5jdGlvbiAocHJlZml4KSB7XHJcbiAgICAgIHZhciBhY3Rpb24gPSBjdXJyZW50Lm9wdHNbcHJlZml4XTtcclxuXHJcbiAgICAgIGlmICgkLmlzRnVuY3Rpb24oYWN0aW9uKSkge1xyXG4gICAgICAgIGFjdGlvbiA9IGFjdGlvbi5hcHBseShpbnN0YW5jZSwgW2N1cnJlbnQsIGVdKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XHJcbiAgICAgICAgY2FzZSBcImNsb3NlXCI6XHJcbiAgICAgICAgICBpbnN0YW5jZS5jbG9zZShzZWxmLnN0YXJ0RXZlbnQpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFwidG9nZ2xlQ29udHJvbHNcIjpcclxuICAgICAgICAgIGluc3RhbmNlLnRvZ2dsZUNvbnRyb2xzKCk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgXCJuZXh0XCI6XHJcbiAgICAgICAgICBpbnN0YW5jZS5uZXh0KCk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgXCJuZXh0T3JDbG9zZVwiOlxyXG4gICAgICAgICAgaWYgKGluc3RhbmNlLmdyb3VwLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UubmV4dCgpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuY2xvc2Uoc2VsZi5zdGFydEV2ZW50KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBcInpvb21cIjpcclxuICAgICAgICAgIGlmIChjdXJyZW50LnR5cGUgPT0gXCJpbWFnZVwiICYmIChjdXJyZW50LmlzTG9hZGVkIHx8IGN1cnJlbnQuJGdob3N0KSkge1xyXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UuY2FuUGFuKCkpIHtcclxuICAgICAgICAgICAgICBpbnN0YW5jZS5zY2FsZVRvRml0KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UuaXNTY2FsZWREb3duKCkpIHtcclxuICAgICAgICAgICAgICBpbnN0YW5jZS5zY2FsZVRvQWN0dWFsKHRhcFgsIHRhcFkpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluc3RhbmNlLmdyb3VwLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgICAgICBpbnN0YW5jZS5jbG9zZShzZWxmLnN0YXJ0RXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gSWdub3JlIHJpZ2h0IGNsaWNrXHJcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50ICYmIGUub3JpZ2luYWxFdmVudC5idXR0b24gPT0gMikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2tpcCBpZiBjbGlja2VkIG9uIHRoZSBzY3JvbGxiYXJcclxuICAgIGlmICghJHRhcmdldC5pcyhcImltZ1wiKSAmJiB0YXBYID4gJHRhcmdldFswXS5jbGllbnRXaWR0aCArICR0YXJnZXQub2Zmc2V0KCkubGVmdCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgd2hlcmUgaXMgY2xpY2tlZFxyXG4gICAgaWYgKCR0YXJnZXQuaXMoXCIuZmFuY3lib3gtYmcsLmZhbmN5Ym94LWlubmVyLC5mYW5jeWJveC1vdXRlciwuZmFuY3lib3gtY29udGFpbmVyXCIpKSB7XHJcbiAgICAgIHdoZXJlID0gXCJPdXRzaWRlXCI7XHJcbiAgICB9IGVsc2UgaWYgKCR0YXJnZXQuaXMoXCIuZmFuY3lib3gtc2xpZGVcIikpIHtcclxuICAgICAgd2hlcmUgPSBcIlNsaWRlXCI7XHJcbiAgICB9IGVsc2UgaWYgKFxyXG4gICAgICBpbnN0YW5jZS5jdXJyZW50LiRjb250ZW50ICYmXHJcbiAgICAgIGluc3RhbmNlLmN1cnJlbnQuJGNvbnRlbnRcclxuICAgICAgLmZpbmQoJHRhcmdldClcclxuICAgICAgLmFkZEJhY2soKVxyXG4gICAgICAuZmlsdGVyKCR0YXJnZXQpLmxlbmd0aFxyXG4gICAgKSB7XHJcbiAgICAgIHdoZXJlID0gXCJDb250ZW50XCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIGRvdWJsZSB0YXBcclxuICAgIGlmIChzZWxmLnRhcHBlZCkge1xyXG4gICAgICAvLyBTdG9wIHByZXZpb3VzbHkgY3JlYXRlZCBzaW5nbGUgdGFwXHJcbiAgICAgIGNsZWFyVGltZW91dChzZWxmLnRhcHBlZCk7XHJcbiAgICAgIHNlbGYudGFwcGVkID0gbnVsbDtcclxuXHJcbiAgICAgIC8vIFNraXAgaWYgZGlzdGFuY2UgYmV0d2VlbiB0YXBzIGlzIHRvbyBiaWdcclxuICAgICAgaWYgKE1hdGguYWJzKHRhcFggLSBzZWxmLnRhcFgpID4gNTAgfHwgTWF0aC5hYnModGFwWSAtIHNlbGYudGFwWSkgPiA1MCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBPSywgbm93IHdlIGFzc3VtZSB0aGF0IHRoaXMgaXMgYSBkb3VibGUtdGFwXHJcbiAgICAgIHByb2Nlc3MoXCJkYmxjbGlja1wiICsgd2hlcmUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gU2luZ2xlIHRhcCB3aWxsIGJlIHByb2Nlc3NlZCBpZiB1c2VyIGhhcyBub3QgY2xpY2tlZCBzZWNvbmQgdGltZSB3aXRoaW4gMzAwbXNcclxuICAgICAgLy8gb3IgdGhlcmUgaXMgbm8gbmVlZCB0byB3YWl0IGZvciBkb3VibGUtdGFwXHJcbiAgICAgIHNlbGYudGFwWCA9IHRhcFg7XHJcbiAgICAgIHNlbGYudGFwWSA9IHRhcFk7XHJcblxyXG4gICAgICBpZiAoY3VycmVudC5vcHRzW1wiZGJsY2xpY2tcIiArIHdoZXJlXSAmJiBjdXJyZW50Lm9wdHNbXCJkYmxjbGlja1wiICsgd2hlcmVdICE9PSBjdXJyZW50Lm9wdHNbXCJjbGlja1wiICsgd2hlcmVdKSB7XHJcbiAgICAgICAgc2VsZi50YXBwZWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHNlbGYudGFwcGVkID0gbnVsbDtcclxuXHJcbiAgICAgICAgICBpZiAoIWluc3RhbmNlLmlzQW5pbWF0aW5nKSB7XHJcbiAgICAgICAgICAgIHByb2Nlc3MoXCJjbGlja1wiICsgd2hlcmUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIDUwMCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcHJvY2VzcyhcImNsaWNrXCIgKyB3aGVyZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICAkKGRvY3VtZW50KVxyXG4gICAgLm9uKFwib25BY3RpdmF0ZS5mYlwiLCBmdW5jdGlvbiAoZSwgaW5zdGFuY2UpIHtcclxuICAgICAgaWYgKGluc3RhbmNlICYmICFpbnN0YW5jZS5HdWVzdHVyZXMpIHtcclxuICAgICAgICBpbnN0YW5jZS5HdWVzdHVyZXMgPSBuZXcgR3Vlc3R1cmVzKGluc3RhbmNlKTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIC5vbihcImJlZm9yZUNsb3NlLmZiXCIsIGZ1bmN0aW9uIChlLCBpbnN0YW5jZSkge1xyXG4gICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuR3Vlc3R1cmVzKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuR3Vlc3R1cmVzLmRlc3Ryb3koKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbn0pKHdpbmRvdywgZG9jdW1lbnQsIGpRdWVyeSk7XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBTbGlkZVNob3dcclxuLy8gRW5hYmxlcyBzbGlkZXNob3cgZnVuY3Rpb25hbGl0eVxyXG4vL1xyXG4vLyBFeGFtcGxlIG9mIHVzYWdlOlxyXG4vLyAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCkuU2xpZGVTaG93LnN0YXJ0KClcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuKGZ1bmN0aW9uIChkb2N1bWVudCwgJCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAkLmV4dGVuZCh0cnVlLCAkLmZhbmN5Ym94LmRlZmF1bHRzLCB7XHJcbiAgICBidG5UcGw6IHtcclxuICAgICAgc2xpZGVTaG93OiAnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXBsYXkgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1wbGF5XCIgdGl0bGU9XCJ7e1BMQVlfU1RBUlR9fVwiPicgK1xyXG4gICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk02LjUgNS40djEzLjJsMTEtNi42elwiLz48L3N2Zz4nICtcclxuICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNOC4zMyA1Ljc1aDIuMnYxMi41aC0yLjJWNS43NXptNS4xNSAwaDIuMnYxMi41aC0yLjJWNS43NXpcIi8+PC9zdmc+JyArXHJcbiAgICAgICAgXCI8L2J1dHRvbj5cIlxyXG4gICAgfSxcclxuICAgIHNsaWRlU2hvdzoge1xyXG4gICAgICBhdXRvU3RhcnQ6IGZhbHNlLFxyXG4gICAgICBzcGVlZDogMzAwMCxcclxuICAgICAgcHJvZ3Jlc3M6IHRydWVcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdmFyIFNsaWRlU2hvdyA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfTtcclxuXHJcbiAgJC5leHRlbmQoU2xpZGVTaG93LnByb3RvdHlwZSwge1xyXG4gICAgdGltZXI6IG51bGwsXHJcbiAgICBpc0FjdGl2ZTogZmFsc2UsXHJcbiAgICAkYnV0dG9uOiBudWxsLFxyXG5cclxuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGluc3RhbmNlID0gc2VsZi5pbnN0YW5jZSxcclxuICAgICAgICBvcHRzID0gaW5zdGFuY2UuZ3JvdXBbaW5zdGFuY2UuY3VyckluZGV4XS5vcHRzLnNsaWRlU2hvdztcclxuXHJcbiAgICAgIHNlbGYuJGJ1dHRvbiA9IGluc3RhbmNlLiRyZWZzLnRvb2xiYXIuZmluZChcIltkYXRhLWZhbmN5Ym94LXBsYXldXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNlbGYudG9nZ2xlKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKGluc3RhbmNlLmdyb3VwLmxlbmd0aCA8IDIgfHwgIW9wdHMpIHtcclxuICAgICAgICBzZWxmLiRidXR0b24uaGlkZSgpO1xyXG4gICAgICB9IGVsc2UgaWYgKG9wdHMucHJvZ3Jlc3MpIHtcclxuICAgICAgICBzZWxmLiRwcm9ncmVzcyA9ICQoJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1wcm9ncmVzc1wiPjwvZGl2PicpLmFwcGVuZFRvKGluc3RhbmNlLiRyZWZzLmlubmVyKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBzZXQ6IGZ1bmN0aW9uIChmb3JjZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgaW5zdGFuY2UgPSBzZWxmLmluc3RhbmNlLFxyXG4gICAgICAgIGN1cnJlbnQgPSBpbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgcmVhY2hlZCBsYXN0IGVsZW1lbnRcclxuICAgICAgaWYgKGN1cnJlbnQgJiYgKGZvcmNlID09PSB0cnVlIHx8IGN1cnJlbnQub3B0cy5sb29wIHx8IGluc3RhbmNlLmN1cnJJbmRleCA8IGluc3RhbmNlLmdyb3VwLmxlbmd0aCAtIDEpKSB7XHJcbiAgICAgICAgaWYgKHNlbGYuaXNBY3RpdmUgJiYgY3VycmVudC5jb250ZW50VHlwZSAhPT0gXCJ2aWRlb1wiKSB7XHJcbiAgICAgICAgICBpZiAoc2VsZi4kcHJvZ3Jlc3MpIHtcclxuICAgICAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKHNlbGYuJHByb2dyZXNzLnNob3coKSwge1xyXG4gICAgICAgICAgICAgIHNjYWxlWDogMVxyXG4gICAgICAgICAgICB9LCBjdXJyZW50Lm9wdHMuc2xpZGVTaG93LnNwZWVkKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBzZWxmLnRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghaW5zdGFuY2UuY3VycmVudC5vcHRzLmxvb3AgJiYgaW5zdGFuY2UuY3VycmVudC5pbmRleCA9PSBpbnN0YW5jZS5ncm91cC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgaW5zdGFuY2UuanVtcFRvKDApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGluc3RhbmNlLm5leHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSwgY3VycmVudC5vcHRzLnNsaWRlU2hvdy5zcGVlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYuc3RvcCgpO1xyXG4gICAgICAgIGluc3RhbmNlLmlkbGVTZWNvbmRzQ291bnRlciA9IDA7XHJcbiAgICAgICAgaW5zdGFuY2Uuc2hvd0NvbnRyb2xzKCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZXIpO1xyXG5cclxuICAgICAgc2VsZi50aW1lciA9IG51bGw7XHJcblxyXG4gICAgICBpZiAoc2VsZi4kcHJvZ3Jlc3MpIHtcclxuICAgICAgICBzZWxmLiRwcm9ncmVzcy5yZW1vdmVBdHRyKFwic3R5bGVcIikuaGlkZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHN0YXJ0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBjdXJyZW50ID0gc2VsZi5pbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuICAgICAgaWYgKGN1cnJlbnQpIHtcclxuICAgICAgICBzZWxmLiRidXR0b25cclxuICAgICAgICAgIC5hdHRyKFwidGl0bGVcIiwgKGN1cnJlbnQub3B0cy5pMThuW2N1cnJlbnQub3B0cy5sYW5nXSB8fCBjdXJyZW50Lm9wdHMuaTE4bi5lbikuUExBWV9TVE9QKVxyXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtYnV0dG9uLS1wbGF5XCIpXHJcbiAgICAgICAgICAuYWRkQ2xhc3MoXCJmYW5jeWJveC1idXR0b24tLXBhdXNlXCIpO1xyXG5cclxuICAgICAgICBzZWxmLmlzQWN0aXZlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnQuaXNDb21wbGV0ZSkge1xyXG4gICAgICAgICAgc2VsZi5zZXQodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLmluc3RhbmNlLnRyaWdnZXIoXCJvblNsaWRlU2hvd0NoYW5nZVwiLCB0cnVlKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBzdG9wOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBjdXJyZW50ID0gc2VsZi5pbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuICAgICAgc2VsZi5jbGVhcigpO1xyXG5cclxuICAgICAgc2VsZi4kYnV0dG9uXHJcbiAgICAgICAgLmF0dHIoXCJ0aXRsZVwiLCAoY3VycmVudC5vcHRzLmkxOG5bY3VycmVudC5vcHRzLmxhbmddIHx8IGN1cnJlbnQub3B0cy5pMThuLmVuKS5QTEFZX1NUQVJUKVxyXG4gICAgICAgIC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWJ1dHRvbi0tcGF1c2VcIilcclxuICAgICAgICAuYWRkQ2xhc3MoXCJmYW5jeWJveC1idXR0b24tLXBsYXlcIik7XHJcblxyXG4gICAgICBzZWxmLmlzQWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgICBzZWxmLmluc3RhbmNlLnRyaWdnZXIoXCJvblNsaWRlU2hvd0NoYW5nZVwiLCBmYWxzZSk7XHJcblxyXG4gICAgICBpZiAoc2VsZi4kcHJvZ3Jlc3MpIHtcclxuICAgICAgICBzZWxmLiRwcm9ncmVzcy5yZW1vdmVBdHRyKFwic3R5bGVcIikuaGlkZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHRvZ2dsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc0FjdGl2ZSkge1xyXG4gICAgICAgIHNlbGYuc3RvcCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYuc3RhcnQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAkKGRvY3VtZW50KS5vbih7XHJcbiAgICBcIm9uSW5pdC5mYlwiOiBmdW5jdGlvbiAoZSwgaW5zdGFuY2UpIHtcclxuICAgICAgaWYgKGluc3RhbmNlICYmICFpbnN0YW5jZS5TbGlkZVNob3cpIHtcclxuICAgICAgICBpbnN0YW5jZS5TbGlkZVNob3cgPSBuZXcgU2xpZGVTaG93KGluc3RhbmNlKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBcImJlZm9yZVNob3cuZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlLCBjdXJyZW50LCBmaXJzdFJ1bikge1xyXG4gICAgICB2YXIgU2xpZGVTaG93ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuU2xpZGVTaG93O1xyXG5cclxuICAgICAgaWYgKGZpcnN0UnVuKSB7XHJcbiAgICAgICAgaWYgKFNsaWRlU2hvdyAmJiBjdXJyZW50Lm9wdHMuc2xpZGVTaG93LmF1dG9TdGFydCkge1xyXG4gICAgICAgICAgU2xpZGVTaG93LnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKFNsaWRlU2hvdyAmJiBTbGlkZVNob3cuaXNBY3RpdmUpIHtcclxuICAgICAgICBTbGlkZVNob3cuY2xlYXIoKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBcImFmdGVyU2hvdy5mYlwiOiBmdW5jdGlvbiAoZSwgaW5zdGFuY2UsIGN1cnJlbnQpIHtcclxuICAgICAgdmFyIFNsaWRlU2hvdyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlNsaWRlU2hvdztcclxuXHJcbiAgICAgIGlmIChTbGlkZVNob3cgJiYgU2xpZGVTaG93LmlzQWN0aXZlKSB7XHJcbiAgICAgICAgU2xpZGVTaG93LnNldCgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIFwiYWZ0ZXJLZXlkb3duLmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSwgY3VycmVudCwga2V5cHJlc3MsIGtleWNvZGUpIHtcclxuICAgICAgdmFyIFNsaWRlU2hvdyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlNsaWRlU2hvdztcclxuXHJcbiAgICAgIC8vIFwiUFwiIG9yIFNwYWNlYmFyXHJcbiAgICAgIGlmIChTbGlkZVNob3cgJiYgY3VycmVudC5vcHRzLnNsaWRlU2hvdyAmJiAoa2V5Y29kZSA9PT0gODAgfHwga2V5Y29kZSA9PT0gMzIpICYmICEkKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmlzKFwiYnV0dG9uLGEsaW5wdXRcIikpIHtcclxuICAgICAgICBrZXlwcmVzcy5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBTbGlkZVNob3cudG9nZ2xlKCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgXCJiZWZvcmVDbG9zZS5mYiBvbkRlYWN0aXZhdGUuZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlKSB7XHJcbiAgICAgIHZhciBTbGlkZVNob3cgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5TbGlkZVNob3c7XHJcblxyXG4gICAgICBpZiAoU2xpZGVTaG93KSB7XHJcbiAgICAgICAgU2xpZGVTaG93LnN0b3AoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBQYWdlIFZpc2liaWxpdHkgQVBJIHRvIHBhdXNlIHNsaWRlc2hvdyB3aGVuIHdpbmRvdyBpcyBub3QgYWN0aXZlXHJcbiAgJChkb2N1bWVudCkub24oXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBpbnN0YW5jZSA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKSxcclxuICAgICAgU2xpZGVTaG93ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuU2xpZGVTaG93O1xyXG5cclxuICAgIGlmIChTbGlkZVNob3cgJiYgU2xpZGVTaG93LmlzQWN0aXZlKSB7XHJcbiAgICAgIGlmIChkb2N1bWVudC5oaWRkZW4pIHtcclxuICAgICAgICBTbGlkZVNob3cuY2xlYXIoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBTbGlkZVNob3cuc2V0KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufSkoZG9jdW1lbnQsIGpRdWVyeSk7XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBGdWxsU2NyZWVuXHJcbi8vIEFkZHMgZnVsbHNjcmVlbiBmdW5jdGlvbmFsaXR5XHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbihmdW5jdGlvbiAoZG9jdW1lbnQsICQpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgLy8gQ29sbGVjdGlvbiBvZiBtZXRob2RzIHN1cHBvcnRlZCBieSB1c2VyIGJyb3dzZXJcclxuICB2YXIgZm4gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGZuTWFwID0gW1xyXG4gICAgICBbXCJyZXF1ZXN0RnVsbHNjcmVlblwiLCBcImV4aXRGdWxsc2NyZWVuXCIsIFwiZnVsbHNjcmVlbkVsZW1lbnRcIiwgXCJmdWxsc2NyZWVuRW5hYmxlZFwiLCBcImZ1bGxzY3JlZW5jaGFuZ2VcIiwgXCJmdWxsc2NyZWVuZXJyb3JcIl0sXHJcbiAgICAgIC8vIG5ldyBXZWJLaXRcclxuICAgICAgW1xyXG4gICAgICAgIFwid2Via2l0UmVxdWVzdEZ1bGxzY3JlZW5cIixcclxuICAgICAgICBcIndlYmtpdEV4aXRGdWxsc2NyZWVuXCIsXHJcbiAgICAgICAgXCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudFwiLFxyXG4gICAgICAgIFwid2Via2l0RnVsbHNjcmVlbkVuYWJsZWRcIixcclxuICAgICAgICBcIndlYmtpdGZ1bGxzY3JlZW5jaGFuZ2VcIixcclxuICAgICAgICBcIndlYmtpdGZ1bGxzY3JlZW5lcnJvclwiXHJcbiAgICAgIF0sXHJcbiAgICAgIC8vIG9sZCBXZWJLaXQgKFNhZmFyaSA1LjEpXHJcbiAgICAgIFtcclxuICAgICAgICBcIndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuXCIsXHJcbiAgICAgICAgXCJ3ZWJraXRDYW5jZWxGdWxsU2NyZWVuXCIsXHJcbiAgICAgICAgXCJ3ZWJraXRDdXJyZW50RnVsbFNjcmVlbkVsZW1lbnRcIixcclxuICAgICAgICBcIndlYmtpdENhbmNlbEZ1bGxTY3JlZW5cIixcclxuICAgICAgICBcIndlYmtpdGZ1bGxzY3JlZW5jaGFuZ2VcIixcclxuICAgICAgICBcIndlYmtpdGZ1bGxzY3JlZW5lcnJvclwiXHJcbiAgICAgIF0sXHJcbiAgICAgIFtcclxuICAgICAgICBcIm1velJlcXVlc3RGdWxsU2NyZWVuXCIsXHJcbiAgICAgICAgXCJtb3pDYW5jZWxGdWxsU2NyZWVuXCIsXHJcbiAgICAgICAgXCJtb3pGdWxsU2NyZWVuRWxlbWVudFwiLFxyXG4gICAgICAgIFwibW96RnVsbFNjcmVlbkVuYWJsZWRcIixcclxuICAgICAgICBcIm1vemZ1bGxzY3JlZW5jaGFuZ2VcIixcclxuICAgICAgICBcIm1vemZ1bGxzY3JlZW5lcnJvclwiXHJcbiAgICAgIF0sXHJcbiAgICAgIFtcIm1zUmVxdWVzdEZ1bGxzY3JlZW5cIiwgXCJtc0V4aXRGdWxsc2NyZWVuXCIsIFwibXNGdWxsc2NyZWVuRWxlbWVudFwiLCBcIm1zRnVsbHNjcmVlbkVuYWJsZWRcIiwgXCJNU0Z1bGxzY3JlZW5DaGFuZ2VcIiwgXCJNU0Z1bGxzY3JlZW5FcnJvclwiXVxyXG4gICAgXTtcclxuXHJcbiAgICB2YXIgcmV0ID0ge307XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbk1hcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgdmFsID0gZm5NYXBbaV07XHJcblxyXG4gICAgICBpZiAodmFsICYmIHZhbFsxXSBpbiBkb2N1bWVudCkge1xyXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICByZXRbZm5NYXBbMF1bal1dID0gdmFsW2pdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9KSgpO1xyXG5cclxuICBpZiAoZm4pIHtcclxuICAgIHZhciBGdWxsU2NyZWVuID0ge1xyXG4gICAgICByZXF1ZXN0OiBmdW5jdGlvbiAoZWxlbSkge1xyXG4gICAgICAgIGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcbiAgICAgICAgZWxlbVtmbi5yZXF1ZXN0RnVsbHNjcmVlbl0oZWxlbS5BTExPV19LRVlCT0FSRF9JTlBVVCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGV4aXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBkb2N1bWVudFtmbi5leGl0RnVsbHNjcmVlbl0oKTtcclxuICAgICAgfSxcclxuICAgICAgdG9nZ2xlOiBmdW5jdGlvbiAoZWxlbSkge1xyXG4gICAgICAgIGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNGdWxsc2NyZWVuKCkpIHtcclxuICAgICAgICAgIHRoaXMuZXhpdCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnJlcXVlc3QoZWxlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBpc0Z1bGxzY3JlZW46IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gQm9vbGVhbihkb2N1bWVudFtmbi5mdWxsc2NyZWVuRWxlbWVudF0pO1xyXG4gICAgICB9LFxyXG4gICAgICBlbmFibGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oZG9jdW1lbnRbZm4uZnVsbHNjcmVlbkVuYWJsZWRdKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkLmV4dGVuZCh0cnVlLCAkLmZhbmN5Ym94LmRlZmF1bHRzLCB7XHJcbiAgICAgIGJ0blRwbDoge1xyXG4gICAgICAgIGZ1bGxTY3JlZW46ICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtZnVsbHNjcmVlbiBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWZzZW50ZXJcIiB0aXRsZT1cInt7RlVMTF9TQ1JFRU59fVwiPicgK1xyXG4gICAgICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTcgMTRINXY1aDV2LTJIN3YtM3ptLTItNGgyVjdoM1Y1SDV2NXptMTIgN2gtM3YyaDV2LTVoLTJ2M3pNMTQgNXYyaDN2M2gyVjVoLTV6XCIvPjwvc3ZnPicgK1xyXG4gICAgICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTUgMTZoM3YzaDJ2LTVINXptMy04SDV2Mmg1VjVIOHptNiAxMWgydi0zaDN2LTJoLTV6bTItMTFWNWgtMnY1aDVWOHpcIi8+PC9zdmc+JyArXHJcbiAgICAgICAgICBcIjwvYnV0dG9uPlwiXHJcbiAgICAgIH0sXHJcbiAgICAgIGZ1bGxTY3JlZW46IHtcclxuICAgICAgICBhdXRvU3RhcnQ6IGZhbHNlXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQoZG9jdW1lbnQpLm9uKGZuLmZ1bGxzY3JlZW5jaGFuZ2UsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIGlzRnVsbHNjcmVlbiA9IEZ1bGxTY3JlZW4uaXNGdWxsc2NyZWVuKCksXHJcbiAgICAgICAgaW5zdGFuY2UgPSAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCk7XHJcblxyXG4gICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAvLyBJZiBpbWFnZSBpcyB6b29taW5nLCB0aGVuIGZvcmNlIHRvIHN0b3AgYW5kIHJlcG9zaXRpb24gcHJvcGVybHlcclxuICAgICAgICBpZiAoaW5zdGFuY2UuY3VycmVudCAmJiBpbnN0YW5jZS5jdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiAmJiBpbnN0YW5jZS5pc0FuaW1hdGluZykge1xyXG4gICAgICAgICAgaW5zdGFuY2UuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICBpbnN0YW5jZS51cGRhdGUodHJ1ZSwgdHJ1ZSwgMCk7XHJcblxyXG4gICAgICAgICAgaWYgKCFpbnN0YW5jZS5pc0NvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnN0YW5jZS50cmlnZ2VyKFwib25GdWxsc2NyZWVuQ2hhbmdlXCIsIGlzRnVsbHNjcmVlbik7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLiRyZWZzLmNvbnRhaW5lci50b2dnbGVDbGFzcyhcImZhbmN5Ym94LWlzLWZ1bGxzY3JlZW5cIiwgaXNGdWxsc2NyZWVuKTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UuJHJlZnMudG9vbGJhclxyXG4gICAgICAgICAgLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXVwiKVxyXG4gICAgICAgICAgLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtYnV0dG9uLS1mc2VudGVyXCIsICFpc0Z1bGxzY3JlZW4pXHJcbiAgICAgICAgICAudG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1idXR0b24tLWZzZXhpdFwiLCBpc0Z1bGxzY3JlZW4pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gICQoZG9jdW1lbnQpLm9uKHtcclxuICAgIFwib25Jbml0LmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSkge1xyXG4gICAgICB2YXIgJGNvbnRhaW5lcjtcclxuXHJcbiAgICAgIGlmICghZm4pIHtcclxuICAgICAgICBpbnN0YW5jZS4kcmVmcy50b29sYmFyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXVwiKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuZ3JvdXBbaW5zdGFuY2UuY3VyckluZGV4XS5vcHRzLmZ1bGxTY3JlZW4pIHtcclxuICAgICAgICAkY29udGFpbmVyID0gaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyO1xyXG5cclxuICAgICAgICAkY29udGFpbmVyLm9uKFwiY2xpY2suZmItZnVsbHNjcmVlblwiLCBcIltkYXRhLWZhbmN5Ym94LWZ1bGxzY3JlZW5dXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgIEZ1bGxTY3JlZW4udG9nZ2xlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5vcHRzLmZ1bGxTY3JlZW4gJiYgaW5zdGFuY2Uub3B0cy5mdWxsU2NyZWVuLmF1dG9TdGFydCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgRnVsbFNjcmVlbi5yZXF1ZXN0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFeHBvc2UgQVBJXHJcbiAgICAgICAgaW5zdGFuY2UuRnVsbFNjcmVlbiA9IEZ1bGxTY3JlZW47XHJcbiAgICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS4kcmVmcy50b29sYmFyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXVwiKS5oaWRlKCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgXCJhZnRlcktleWRvd24uZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlLCBjdXJyZW50LCBrZXlwcmVzcywga2V5Y29kZSkge1xyXG4gICAgICAvLyBcIkZcIlxyXG4gICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuRnVsbFNjcmVlbiAmJiBrZXljb2RlID09PSA3MCkge1xyXG4gICAgICAgIGtleXByZXNzLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLkZ1bGxTY3JlZW4udG9nZ2xlKCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgXCJiZWZvcmVDbG9zZS5mYlwiOiBmdW5jdGlvbiAoZSwgaW5zdGFuY2UpIHtcclxuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLkZ1bGxTY3JlZW4gJiYgaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyLmhhc0NsYXNzKFwiZmFuY3lib3gtaXMtZnVsbHNjcmVlblwiKSkge1xyXG4gICAgICAgIEZ1bGxTY3JlZW4uZXhpdCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pKGRvY3VtZW50LCBqUXVlcnkpO1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gVGh1bWJzXHJcbi8vIERpc3BsYXlzIHRodW1ibmFpbHMgaW4gYSBncmlkXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbihmdW5jdGlvbiAoZG9jdW1lbnQsICQpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgdmFyIENMQVNTID0gXCJmYW5jeWJveC10aHVtYnNcIixcclxuICAgIENMQVNTX0FDVElWRSA9IENMQVNTICsgXCItYWN0aXZlXCI7XHJcblxyXG4gIC8vIE1ha2Ugc3VyZSB0aGVyZSBhcmUgZGVmYXVsdCB2YWx1ZXNcclxuICAkLmZhbmN5Ym94LmRlZmF1bHRzID0gJC5leHRlbmQoXHJcbiAgICB0cnVlLCB7XHJcbiAgICAgIGJ0blRwbDoge1xyXG4gICAgICAgIHRodW1iczogJzxidXR0b24gZGF0YS1mYW5jeWJveC10aHVtYnMgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS10aHVtYnNcIiB0aXRsZT1cInt7VEhVTUJTfX1cIj4nICtcclxuICAgICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xNC41OSAxNC41OWgzLjc2djMuNzZoLTMuNzZ2LTMuNzZ6bS00LjQ3IDBoMy43NnYzLjc2aC0zLjc2di0zLjc2em0tNC40NyAwaDMuNzZ2My43Nkg1LjY1di0zLjc2em04Ljk0LTQuNDdoMy43NnYzLjc2aC0zLjc2di0zLjc2em0tNC40NyAwaDMuNzZ2My43NmgtMy43NnYtMy43NnptLTQuNDcgMGgzLjc2djMuNzZINS42NXYtMy43NnptOC45NC00LjQ3aDMuNzZ2My43NmgtMy43NlY1LjY1em0tNC40NyAwaDMuNzZ2My43NmgtMy43NlY1LjY1em0tNC40NyAwaDMuNzZ2My43Nkg1LjY1VjUuNjV6XCIvPjwvc3ZnPicgK1xyXG4gICAgICAgICAgXCI8L2J1dHRvbj5cIlxyXG4gICAgICB9LFxyXG4gICAgICB0aHVtYnM6IHtcclxuICAgICAgICBhdXRvU3RhcnQ6IGZhbHNlLCAvLyBEaXNwbGF5IHRodW1ibmFpbHMgb24gb3BlbmluZ1xyXG4gICAgICAgIGhpZGVPbkNsb3NlOiB0cnVlLCAvLyBIaWRlIHRodW1ibmFpbCBncmlkIHdoZW4gY2xvc2luZyBhbmltYXRpb24gc3RhcnRzXHJcbiAgICAgICAgcGFyZW50RWw6IFwiLmZhbmN5Ym94LWNvbnRhaW5lclwiLCAvLyBDb250YWluZXIgaXMgaW5qZWN0ZWQgaW50byB0aGlzIGVsZW1lbnRcclxuICAgICAgICBheGlzOiBcInlcIiAvLyBWZXJ0aWNhbCAoeSkgb3IgaG9yaXpvbnRhbCAoeCkgc2Nyb2xsaW5nXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICAkLmZhbmN5Ym94LmRlZmF1bHRzXHJcbiAgKTtcclxuXHJcbiAgdmFyIEZhbmN5VGh1bWJzID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICB0aGlzLmluaXQoaW5zdGFuY2UpO1xyXG4gIH07XHJcblxyXG4gICQuZXh0ZW5kKEZhbmN5VGh1bWJzLnByb3RvdHlwZSwge1xyXG4gICAgJGJ1dHRvbjogbnVsbCxcclxuICAgICRncmlkOiBudWxsLFxyXG4gICAgJGxpc3Q6IG51bGwsXHJcbiAgICBpc1Zpc2libGU6IGZhbHNlLFxyXG4gICAgaXNBY3RpdmU6IGZhbHNlLFxyXG5cclxuICAgIGluaXQ6IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgZ3JvdXAgPSBpbnN0YW5jZS5ncm91cCxcclxuICAgICAgICBlbmFibGVkID0gMDtcclxuXHJcbiAgICAgIHNlbGYuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgc2VsZi5vcHRzID0gZ3JvdXBbaW5zdGFuY2UuY3VyckluZGV4XS5vcHRzLnRodW1icztcclxuXHJcbiAgICAgIGluc3RhbmNlLlRodW1icyA9IHNlbGY7XHJcblxyXG4gICAgICBzZWxmLiRidXR0b24gPSBpbnN0YW5jZS4kcmVmcy50b29sYmFyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC10aHVtYnNdXCIpO1xyXG5cclxuICAgICAgLy8gRW5hYmxlIHRodW1icyBpZiBhdCBsZWFzdCB0d28gZ3JvdXAgaXRlbXMgaGF2ZSB0aHVtYm5haWxzXHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBncm91cC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGlmIChncm91cFtpXS50aHVtYikge1xyXG4gICAgICAgICAgZW5hYmxlZCsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGVuYWJsZWQgPiAxKSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChlbmFibGVkID4gMSAmJiAhIXNlbGYub3B0cykge1xyXG4gICAgICAgIHNlbGYuJGJ1dHRvbi5yZW1vdmVBdHRyKFwic3R5bGVcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBzZWxmLnRvZ2dsZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZWxmLmlzQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLiRidXR0b24uaGlkZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgaW5zdGFuY2UgPSBzZWxmLmluc3RhbmNlLFxyXG4gICAgICAgIHBhcmVudEVsID0gc2VsZi5vcHRzLnBhcmVudEVsLFxyXG4gICAgICAgIGxpc3QgPSBbXSxcclxuICAgICAgICBzcmM7XHJcblxyXG4gICAgICBpZiAoIXNlbGYuJGdyaWQpIHtcclxuICAgICAgICAvLyBDcmVhdGUgbWFpbiBlbGVtZW50XHJcbiAgICAgICAgc2VsZi4kZ3JpZCA9ICQoJzxkaXYgY2xhc3M9XCInICsgQ0xBU1MgKyBcIiBcIiArIENMQVNTICsgXCItXCIgKyBzZWxmLm9wdHMuYXhpcyArICdcIj48L2Rpdj4nKS5hcHBlbmRUbyhcclxuICAgICAgICAgIGluc3RhbmNlLiRyZWZzLmNvbnRhaW5lclxyXG4gICAgICAgICAgLmZpbmQocGFyZW50RWwpXHJcbiAgICAgICAgICAuYWRkQmFjaygpXHJcbiAgICAgICAgICAuZmlsdGVyKHBhcmVudEVsKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBcImNsaWNrXCIgZXZlbnQgdGhhdCBwZXJmb3JtcyBnYWxsZXJ5IG5hdmlnYXRpb25cclxuICAgICAgICBzZWxmLiRncmlkLm9uKFwiY2xpY2tcIiwgXCJhXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGluc3RhbmNlLmp1bXBUbygkKHRoaXMpLmF0dHIoXCJkYXRhLWluZGV4XCIpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQnVpbGQgdGhlIGxpc3RcclxuICAgICAgaWYgKCFzZWxmLiRsaXN0KSB7XHJcbiAgICAgICAgc2VsZi4kbGlzdCA9ICQoJzxkaXYgY2xhc3M9XCInICsgQ0xBU1MgKyAnX19saXN0XCI+JykuYXBwZW5kVG8oc2VsZi4kZ3JpZCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICQuZWFjaChpbnN0YW5jZS5ncm91cCwgZnVuY3Rpb24gKGksIGl0ZW0pIHtcclxuICAgICAgICBzcmMgPSBpdGVtLnRodW1iO1xyXG5cclxuICAgICAgICBpZiAoIXNyYyAmJiBpdGVtLnR5cGUgPT09IFwiaW1hZ2VcIikge1xyXG4gICAgICAgICAgc3JjID0gaXRlbS5zcmM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsaXN0LnB1c2goXHJcbiAgICAgICAgICAnPGEgaHJlZj1cImphdmFzY3JpcHQ6O1wiIHRhYmluZGV4PVwiMFwiIGRhdGEtaW5kZXg9XCInICtcclxuICAgICAgICAgIGkgK1xyXG4gICAgICAgICAgJ1wiJyArXHJcbiAgICAgICAgICAoc3JjICYmIHNyYy5sZW5ndGggPyAnIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTp1cmwoJyArIHNyYyArICcpXCInIDogJ2NsYXNzPVwiZmFuY3lib3gtdGh1bWJzLW1pc3NpbmdcIicpICtcclxuICAgICAgICAgIFwiPjwvYT5cIlxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc2VsZi4kbGlzdFswXS5pbm5lckhUTUwgPSBsaXN0LmpvaW4oXCJcIik7XHJcblxyXG4gICAgICBpZiAoc2VsZi5vcHRzLmF4aXMgPT09IFwieFwiKSB7XHJcbiAgICAgICAgLy8gU2V0IGZpeGVkIHdpZHRoIGZvciBsaXN0IGVsZW1lbnQgdG8gZW5hYmxlIGhvcml6b250YWwgc2Nyb2xsaW5nXHJcbiAgICAgICAgc2VsZi4kbGlzdC53aWR0aChcclxuICAgICAgICAgIHBhcnNlSW50KHNlbGYuJGdyaWQuY3NzKFwicGFkZGluZy1yaWdodFwiKSwgMTApICtcclxuICAgICAgICAgIGluc3RhbmNlLmdyb3VwLmxlbmd0aCAqXHJcbiAgICAgICAgICBzZWxmLiRsaXN0XHJcbiAgICAgICAgICAuY2hpbGRyZW4oKVxyXG4gICAgICAgICAgLmVxKDApXHJcbiAgICAgICAgICAub3V0ZXJXaWR0aCh0cnVlKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgZm9jdXM6IGZ1bmN0aW9uIChkdXJhdGlvbikge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgJGxpc3QgPSBzZWxmLiRsaXN0LFxyXG4gICAgICAgICRncmlkID0gc2VsZi4kZ3JpZCxcclxuICAgICAgICB0aHVtYixcclxuICAgICAgICB0aHVtYlBvcztcclxuXHJcbiAgICAgIGlmICghc2VsZi5pbnN0YW5jZS5jdXJyZW50KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aHVtYiA9ICRsaXN0XHJcbiAgICAgICAgLmNoaWxkcmVuKClcclxuICAgICAgICAucmVtb3ZlQ2xhc3MoQ0xBU1NfQUNUSVZFKVxyXG4gICAgICAgIC5maWx0ZXIoJ1tkYXRhLWluZGV4PVwiJyArIHNlbGYuaW5zdGFuY2UuY3VycmVudC5pbmRleCArICdcIl0nKVxyXG4gICAgICAgIC5hZGRDbGFzcyhDTEFTU19BQ1RJVkUpO1xyXG5cclxuICAgICAgdGh1bWJQb3MgPSB0aHVtYi5wb3NpdGlvbigpO1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgbmVlZCB0byBzY3JvbGwgdG8gbWFrZSBjdXJyZW50IHRodW1iIHZpc2libGVcclxuICAgICAgaWYgKHNlbGYub3B0cy5heGlzID09PSBcInlcIiAmJiAodGh1bWJQb3MudG9wIDwgMCB8fCB0aHVtYlBvcy50b3AgPiAkbGlzdC5oZWlnaHQoKSAtIHRodW1iLm91dGVySGVpZ2h0KCkpKSB7XHJcbiAgICAgICAgJGxpc3Quc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICBzY3JvbGxUb3A6ICRsaXN0LnNjcm9sbFRvcCgpICsgdGh1bWJQb3MudG9wXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZHVyYXRpb25cclxuICAgICAgICApO1xyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIHNlbGYub3B0cy5heGlzID09PSBcInhcIiAmJlxyXG4gICAgICAgICh0aHVtYlBvcy5sZWZ0IDwgJGdyaWQuc2Nyb2xsTGVmdCgpIHx8IHRodW1iUG9zLmxlZnQgPiAkZ3JpZC5zY3JvbGxMZWZ0KCkgKyAoJGdyaWQud2lkdGgoKSAtIHRodW1iLm91dGVyV2lkdGgoKSkpXHJcbiAgICAgICkge1xyXG4gICAgICAgICRsaXN0XHJcbiAgICAgICAgICAucGFyZW50KClcclxuICAgICAgICAgIC5zdG9wKClcclxuICAgICAgICAgIC5hbmltYXRlKHtcclxuICAgICAgICAgICAgICBzY3JvbGxMZWZ0OiB0aHVtYlBvcy5sZWZ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGR1cmF0aW9uXHJcbiAgICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgIHRoYXQuaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtc2hvdy10aHVtYnNcIiwgdGhpcy5pc1Zpc2libGUpO1xyXG5cclxuICAgICAgaWYgKHRoYXQuaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgaWYgKCF0aGF0LiRncmlkKSB7XHJcbiAgICAgICAgICB0aGF0LmNyZWF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhhdC5pbnN0YW5jZS50cmlnZ2VyKFwib25UaHVtYnNTaG93XCIpO1xyXG5cclxuICAgICAgICB0aGF0LmZvY3VzKDApO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoYXQuJGdyaWQpIHtcclxuICAgICAgICB0aGF0Lmluc3RhbmNlLnRyaWdnZXIoXCJvblRodW1ic0hpZGVcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBjb250ZW50IHBvc2l0aW9uXHJcbiAgICAgIHRoYXQuaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5pc1Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICB0aGlzLmlzVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHRvZ2dsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICB0aGlzLmlzVmlzaWJsZSA9ICF0aGlzLmlzVmlzaWJsZTtcclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgJChkb2N1bWVudCkub24oe1xyXG4gICAgXCJvbkluaXQuZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlKSB7XHJcbiAgICAgIHZhciBUaHVtYnM7XHJcblxyXG4gICAgICBpZiAoaW5zdGFuY2UgJiYgIWluc3RhbmNlLlRodW1icykge1xyXG4gICAgICAgIFRodW1icyA9IG5ldyBGYW5jeVRodW1icyhpbnN0YW5jZSk7XHJcblxyXG4gICAgICAgIGlmIChUaHVtYnMuaXNBY3RpdmUgJiYgVGh1bWJzLm9wdHMuYXV0b1N0YXJ0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICBUaHVtYnMuc2hvdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBcImJlZm9yZVNob3cuZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlLCBpdGVtLCBmaXJzdFJ1bikge1xyXG4gICAgICB2YXIgVGh1bWJzID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuVGh1bWJzO1xyXG5cclxuICAgICAgaWYgKFRodW1icyAmJiBUaHVtYnMuaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgVGh1bWJzLmZvY3VzKGZpcnN0UnVuID8gMCA6IDI1MCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgXCJhZnRlcktleWRvd24uZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlLCBjdXJyZW50LCBrZXlwcmVzcywga2V5Y29kZSkge1xyXG4gICAgICB2YXIgVGh1bWJzID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuVGh1bWJzO1xyXG5cclxuICAgICAgLy8gXCJHXCJcclxuICAgICAgaWYgKFRodW1icyAmJiBUaHVtYnMuaXNBY3RpdmUgJiYga2V5Y29kZSA9PT0gNzEpIHtcclxuICAgICAgICBrZXlwcmVzcy5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBUaHVtYnMudG9nZ2xlKCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgXCJiZWZvcmVDbG9zZS5mYlwiOiBmdW5jdGlvbiAoZSwgaW5zdGFuY2UpIHtcclxuICAgICAgdmFyIFRodW1icyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlRodW1icztcclxuXHJcbiAgICAgIGlmIChUaHVtYnMgJiYgVGh1bWJzLmlzVmlzaWJsZSAmJiBUaHVtYnMub3B0cy5oaWRlT25DbG9zZSAhPT0gZmFsc2UpIHtcclxuICAgICAgICBUaHVtYnMuJGdyaWQuaGlkZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pKGRvY3VtZW50LCBqUXVlcnkpO1xuLy8vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBTaGFyZVxyXG4vLyBEaXNwbGF5cyBzaW1wbGUgZm9ybSBmb3Igc2hhcmluZyBjdXJyZW50IHVybFxyXG4vL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4oZnVuY3Rpb24gKGRvY3VtZW50LCAkKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICQuZXh0ZW5kKHRydWUsICQuZmFuY3lib3guZGVmYXVsdHMsIHtcclxuICAgIGJ0blRwbDoge1xyXG4gICAgICBzaGFyZTogJzxidXR0b24gZGF0YS1mYW5jeWJveC1zaGFyZSBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLXNoYXJlXCIgdGl0bGU9XCJ7e1NIQVJFfX1cIj4nICtcclxuICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMi41NSAxOWMxLjQtOC40IDkuMS05LjggMTEuOS05LjhWNWw3IDctNyA2LjN2LTMuNWMtMi44IDAtMTAuNSAyLjEtMTEuOSA0LjJ6XCIvPjwvc3ZnPicgK1xyXG4gICAgICAgIFwiPC9idXR0b24+XCJcclxuICAgIH0sXHJcbiAgICBzaGFyZToge1xyXG4gICAgICB1cmw6IGZ1bmN0aW9uIChpbnN0YW5jZSwgaXRlbSkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAoIWluc3RhbmNlLmN1cnJlbnRIYXNoICYmICEoaXRlbS50eXBlID09PSBcImlubGluZVwiIHx8IGl0ZW0udHlwZSA9PT0gXCJodG1sXCIpID8gaXRlbS5vcmlnU3JjIHx8IGl0ZW0uc3JjIDogZmFsc2UpIHx8IHdpbmRvdy5sb2NhdGlvblxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHRwbDogJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1zaGFyZVwiPicgK1xyXG4gICAgICAgIFwiPGgxPnt7U0hBUkV9fTwvaDE+XCIgK1xyXG4gICAgICAgIFwiPHA+XCIgK1xyXG4gICAgICAgICc8YSBjbGFzcz1cImZhbmN5Ym94LXNoYXJlX19idXR0b24gZmFuY3lib3gtc2hhcmVfX2J1dHRvbi0tZmJcIiBocmVmPVwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9e3t1cmx9fVwiPicgK1xyXG4gICAgICAgICc8c3ZnIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwibTI4NyA0NTZ2LTI5OWMwLTIxIDYtMzUgMzUtMzVoMzh2LTYzYy03LTEtMjktMy01NS0zLTU0IDAtOTEgMzMtOTEgOTR2MzA2bTE0My0yNTRoLTIwNXY3MmgxOTZcIiAvPjwvc3ZnPicgK1xyXG4gICAgICAgIFwiPHNwYW4+RmFjZWJvb2s8L3NwYW4+XCIgK1xyXG4gICAgICAgIFwiPC9hPlwiICtcclxuICAgICAgICAnPGEgY2xhc3M9XCJmYW5jeWJveC1zaGFyZV9fYnV0dG9uIGZhbmN5Ym94LXNoYXJlX19idXR0b24tLXR3XCIgaHJlZj1cImh0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P3VybD17e3VybH19JnRleHQ9e3tkZXNjcn19XCI+JyArXHJcbiAgICAgICAgJzxzdmcgdmlld0JveD1cIjAgMCA1MTIgNTEyXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJtNDU2IDEzM2MtMTQgNy0zMSAxMS00NyAxMyAxNy0xMCAzMC0yNyAzNy00Ni0xNSAxMC0zNCAxNi01MiAyMC02MS02Mi0xNTctNy0xNDEgNzUtNjgtMy0xMjktMzUtMTY5LTg1LTIyIDM3LTExIDg2IDI2IDEwOS0xMyAwLTI2LTQtMzctOSAwIDM5IDI4IDcyIDY1IDgwLTEyIDMtMjUgNC0zNyAyIDEwIDMzIDQxIDU3IDc3IDU3LTQyIDMwLTc3IDM4LTEyMiAzNCAxNzAgMTExIDM3OC0zMiAzNTktMjA4IDE2LTExIDMwLTI1IDQxLTQyelwiIC8+PC9zdmc+JyArXHJcbiAgICAgICAgXCI8c3Bhbj5Ud2l0dGVyPC9zcGFuPlwiICtcclxuICAgICAgICBcIjwvYT5cIiArXHJcbiAgICAgICAgJzxhIGNsYXNzPVwiZmFuY3lib3gtc2hhcmVfX2J1dHRvbiBmYW5jeWJveC1zaGFyZV9fYnV0dG9uLS1wdFwiIGhyZWY9XCJodHRwczovL3d3dy5waW50ZXJlc3QuY29tL3Bpbi9jcmVhdGUvYnV0dG9uLz91cmw9e3t1cmx9fSZkZXNjcmlwdGlvbj17e2Rlc2NyfX0mbWVkaWE9e3ttZWRpYX19XCI+JyArXHJcbiAgICAgICAgJzxzdmcgdmlld0JveD1cIjAgMCA1MTIgNTEyXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJtMjY1IDU2Yy0xMDkgMC0xNjQgNzgtMTY0IDE0NCAwIDM5IDE1IDc0IDQ3IDg3IDUgMiAxMCAwIDEyLTVsNC0xOWMyLTYgMS04LTMtMTMtOS0xMS0xNS0yNS0xNS00NSAwLTU4IDQzLTExMCAxMTMtMTEwIDYyIDAgOTYgMzggOTYgODggMCA2Ny0zMCAxMjItNzMgMTIyLTI0IDAtNDItMTktMzYtNDQgNi0yOSAyMC02MCAyMC04MSAwLTE5LTEwLTM1LTMxLTM1LTI1IDAtNDQgMjYtNDQgNjAgMCAyMSA3IDM2IDcgMzZsLTMwIDEyNWMtOCAzNy0xIDgzIDAgODcgMCAzIDQgNCA1IDIgMi0zIDMyLTM5IDQyLTc1bDE2LTY0YzggMTYgMzEgMjkgNTYgMjkgNzQgMCAxMjQtNjcgMTI0LTE1NyAwLTY5LTU4LTEzMi0xNDYtMTMyelwiIGZpbGw9XCIjZmZmXCIvPjwvc3ZnPicgK1xyXG4gICAgICAgIFwiPHNwYW4+UGludGVyZXN0PC9zcGFuPlwiICtcclxuICAgICAgICBcIjwvYT5cIiArXHJcbiAgICAgICAgXCI8L3A+XCIgK1xyXG4gICAgICAgICc8cD48aW5wdXQgY2xhc3M9XCJmYW5jeWJveC1zaGFyZV9faW5wdXRcIiB0eXBlPVwidGV4dFwiIHZhbHVlPVwie3t1cmxfcmF3fX1cIiBvbmNsaWNrPVwic2VsZWN0KClcIiAvPjwvcD4nICtcclxuICAgICAgICBcIjwvZGl2PlwiXHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyaW5nKSB7XHJcbiAgICB2YXIgZW50aXR5TWFwID0ge1xyXG4gICAgICBcIiZcIjogXCImYW1wO1wiLFxyXG4gICAgICBcIjxcIjogXCImbHQ7XCIsXHJcbiAgICAgIFwiPlwiOiBcIiZndDtcIixcclxuICAgICAgJ1wiJzogXCImcXVvdDtcIixcclxuICAgICAgXCInXCI6IFwiJiMzOTtcIixcclxuICAgICAgXCIvXCI6IFwiJiN4MkY7XCIsXHJcbiAgICAgIFwiYFwiOiBcIiYjeDYwO1wiLFxyXG4gICAgICBcIj1cIjogXCImI3gzRDtcIlxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZSgvWyY8PlwiJ2A9XFwvXS9nLCBmdW5jdGlvbiAocykge1xyXG4gICAgICByZXR1cm4gZW50aXR5TWFwW3NdO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAkKGRvY3VtZW50KS5vbihcImNsaWNrXCIsIFwiW2RhdGEtZmFuY3lib3gtc2hhcmVdXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBpbnN0YW5jZSA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKSxcclxuICAgICAgY3VycmVudCA9IGluc3RhbmNlLmN1cnJlbnQgfHwgbnVsbCxcclxuICAgICAgdXJsLFxyXG4gICAgICB0cGw7XHJcblxyXG4gICAgaWYgKCFjdXJyZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoJC50eXBlKGN1cnJlbnQub3B0cy5zaGFyZS51cmwpID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgdXJsID0gY3VycmVudC5vcHRzLnNoYXJlLnVybC5hcHBseShjdXJyZW50LCBbaW5zdGFuY2UsIGN1cnJlbnRdKTtcclxuICAgIH1cclxuXHJcbiAgICB0cGwgPSBjdXJyZW50Lm9wdHMuc2hhcmUudHBsXHJcbiAgICAgIC5yZXBsYWNlKC9cXHtcXHttZWRpYVxcfVxcfS9nLCBjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiA/IGVuY29kZVVSSUNvbXBvbmVudChjdXJyZW50LnNyYykgOiBcIlwiKVxyXG4gICAgICAucmVwbGFjZSgvXFx7XFx7dXJsXFx9XFx9L2csIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpKVxyXG4gICAgICAucmVwbGFjZSgvXFx7XFx7dXJsX3Jhd1xcfVxcfS9nLCBlc2NhcGVIdG1sKHVybCkpXHJcbiAgICAgIC5yZXBsYWNlKC9cXHtcXHtkZXNjclxcfVxcfS9nLCBpbnN0YW5jZS4kY2FwdGlvbiA/IGVuY29kZVVSSUNvbXBvbmVudChpbnN0YW5jZS4kY2FwdGlvbi50ZXh0KCkpIDogXCJcIik7XHJcblxyXG4gICAgJC5mYW5jeWJveC5vcGVuKHtcclxuICAgICAgc3JjOiBpbnN0YW5jZS50cmFuc2xhdGUoaW5zdGFuY2UsIHRwbCksXHJcbiAgICAgIHR5cGU6IFwiaHRtbFwiLFxyXG4gICAgICBvcHRzOiB7XHJcbiAgICAgICAgdG91Y2g6IGZhbHNlLFxyXG4gICAgICAgIGFuaW1hdGlvbkVmZmVjdDogZmFsc2UsXHJcbiAgICAgICAgYWZ0ZXJMb2FkOiBmdW5jdGlvbiAoc2hhcmVJbnN0YW5jZSwgc2hhcmVDdXJyZW50KSB7XHJcbiAgICAgICAgICAvLyBDbG9zZSBzZWxmIGlmIHBhcmVudCBpbnN0YW5jZSBpcyBjbG9zaW5nXHJcbiAgICAgICAgICBpbnN0YW5jZS4kcmVmcy5jb250YWluZXIub25lKFwiYmVmb3JlQ2xvc2UuZmJcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzaGFyZUluc3RhbmNlLmNsb3NlKG51bGwsIDApO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgLy8gT3BlbmluZyBsaW5rcyBpbiBhIHBvcHVwIHdpbmRvd1xyXG4gICAgICAgICAgc2hhcmVDdXJyZW50LiRjb250ZW50LmZpbmQoXCIuZmFuY3lib3gtc2hhcmVfX2J1dHRvblwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHRoaXMuaHJlZiwgXCJTaGFyZVwiLCBcIndpZHRoPTU1MCwgaGVpZ2h0PTQ1MFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb2JpbGU6IHtcclxuICAgICAgICAgIGF1dG9Gb2N1czogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KShkb2N1bWVudCwgalF1ZXJ5KTtcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vXHJcbi8vIEhhc2hcclxuLy8gRW5hYmxlcyBsaW5raW5nIHRvIGVhY2ggbW9kYWxcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuKGZ1bmN0aW9uICh3aW5kb3csIGRvY3VtZW50LCAkKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIC8vIFNpbXBsZSAkLmVzY2FwZVNlbGVjdG9yIHBvbHlmaWxsIChmb3IgalF1ZXJ5IHByaW9yIHYzKVxyXG4gIGlmICghJC5lc2NhcGVTZWxlY3Rvcikge1xyXG4gICAgJC5lc2NhcGVTZWxlY3RvciA9IGZ1bmN0aW9uIChzZWwpIHtcclxuICAgICAgdmFyIHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXHg4MC1cXHVGRkZGXFx3LV0vZztcclxuICAgICAgdmFyIGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiAoY2gsIGFzQ29kZVBvaW50KSB7XHJcbiAgICAgICAgaWYgKGFzQ29kZVBvaW50KSB7XHJcbiAgICAgICAgICAvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcclxuICAgICAgICAgIGlmIChjaCA9PT0gXCJcXDBcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJcXHVGRkZEXCI7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcclxuICAgICAgICAgIHJldHVybiBjaC5zbGljZSgwLCAtMSkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoY2gubGVuZ3RoIC0gMSkudG9TdHJpbmcoMTYpICsgXCIgXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXHJcbiAgICAgICAgcmV0dXJuIFwiXFxcXFwiICsgY2g7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UocmNzc2VzY2FwZSwgZmNzc2VzY2FwZSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IGluZm8gYWJvdXQgZ2FsbGVyeSBuYW1lIGFuZCBjdXJyZW50IGluZGV4IGZyb20gdXJsXHJcbiAgZnVuY3Rpb24gcGFyc2VVcmwoKSB7XHJcbiAgICB2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKSxcclxuICAgICAgcmV6ID0gaGFzaC5zcGxpdChcIi1cIiksXHJcbiAgICAgIGluZGV4ID0gcmV6Lmxlbmd0aCA+IDEgJiYgL15cXCs/XFxkKyQvLnRlc3QocmV6W3Jlei5sZW5ndGggLSAxXSkgPyBwYXJzZUludChyZXoucG9wKC0xKSwgMTApIHx8IDEgOiAxLFxyXG4gICAgICBnYWxsZXJ5ID0gcmV6LmpvaW4oXCItXCIpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGhhc2g6IGhhc2gsXHJcbiAgICAgIC8qIEluZGV4IGlzIHN0YXJ0aW5nIGZyb20gMSAqL1xyXG4gICAgICBpbmRleDogaW5kZXggPCAxID8gMSA6IGluZGV4LFxyXG4gICAgICBnYWxsZXJ5OiBnYWxsZXJ5XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gVHJpZ2dlciBjbGljayBldm50IG9uIGxpbmtzIHRvIG9wZW4gbmV3IGZhbmN5Qm94IGluc3RhbmNlXHJcbiAgZnVuY3Rpb24gdHJpZ2dlckZyb21VcmwodXJsKSB7XHJcbiAgICBpZiAodXJsLmdhbGxlcnkgIT09IFwiXCIpIHtcclxuICAgICAgLy8gSWYgd2UgY2FuIGZpbmQgZWxlbWVudCBtYXRjaGluZyAnZGF0YS1mYW5jeWJveCcgYXRyaWJ1dGUsXHJcbiAgICAgIC8vIHRoZW4gdHJpZ2dlcmluZyBjbGljayBldmVudCBzaG91bGQgc3RhcnQgZmFuY3lCb3hcclxuICAgICAgJChcIltkYXRhLWZhbmN5Ym94PSdcIiArICQuZXNjYXBlU2VsZWN0b3IodXJsLmdhbGxlcnkpICsgXCInXVwiKVxyXG4gICAgICAgIC5lcSh1cmwuaW5kZXggLSAxKVxyXG4gICAgICAgIC5mb2N1cygpXHJcbiAgICAgICAgLnRyaWdnZXIoXCJjbGljay5mYi1zdGFydFwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEdldCBnYWxsZXJ5IG5hbWUgZnJvbSBjdXJyZW50IGluc3RhbmNlXHJcbiAgZnVuY3Rpb24gZ2V0R2FsbGVyeUlEKGluc3RhbmNlKSB7XHJcbiAgICB2YXIgb3B0cywgcmV0O1xyXG5cclxuICAgIGlmICghaW5zdGFuY2UpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIG9wdHMgPSBpbnN0YW5jZS5jdXJyZW50ID8gaW5zdGFuY2UuY3VycmVudC5vcHRzIDogaW5zdGFuY2Uub3B0cztcclxuICAgIHJldCA9IG9wdHMuaGFzaCB8fCAob3B0cy4kb3JpZyA/IG9wdHMuJG9yaWcuZGF0YShcImZhbmN5Ym94XCIpIHx8IG9wdHMuJG9yaWcuZGF0YShcImZhbmN5Ym94LXRyaWdnZXJcIikgOiBcIlwiKTtcclxuXHJcbiAgICByZXR1cm4gcmV0ID09PSBcIlwiID8gZmFsc2UgOiByZXQ7XHJcbiAgfVxyXG5cclxuICAvLyBTdGFydCB3aGVuIERPTSBiZWNvbWVzIHJlYWR5XHJcbiAgJChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBDaGVjayBpZiB1c2VyIGhhcyBkaXNhYmxlZCB0aGlzIG1vZHVsZVxyXG4gICAgaWYgKCQuZmFuY3lib3guZGVmYXVsdHMuaGFzaCA9PT0gZmFsc2UpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFVwZGF0ZSBoYXNoIHdoZW4gb3BlbmluZy9jbG9zaW5nIGZhbmN5Qm94XHJcbiAgICAkKGRvY3VtZW50KS5vbih7XHJcbiAgICAgIFwib25Jbml0LmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSkge1xyXG4gICAgICAgIHZhciB1cmwsIGdhbGxlcnk7XHJcblxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5ncm91cFtpbnN0YW5jZS5jdXJySW5kZXhdLm9wdHMuaGFzaCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVybCA9IHBhcnNlVXJsKCk7XHJcbiAgICAgICAgZ2FsbGVyeSA9IGdldEdhbGxlcnlJRChpbnN0YW5jZSk7XHJcblxyXG4gICAgICAgIC8vIE1ha2Ugc3VyZSBnYWxsZXJ5IHN0YXJ0IGluZGV4IG1hdGNoZXMgaW5kZXggZnJvbSBoYXNoXHJcbiAgICAgICAgaWYgKGdhbGxlcnkgJiYgdXJsLmdhbGxlcnkgJiYgZ2FsbGVyeSA9PSB1cmwuZ2FsbGVyeSkge1xyXG4gICAgICAgICAgaW5zdGFuY2UuY3VyckluZGV4ID0gdXJsLmluZGV4IC0gMTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBcImJlZm9yZVNob3cuZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlLCBjdXJyZW50LCBmaXJzdFJ1bikge1xyXG4gICAgICAgIHZhciBnYWxsZXJ5O1xyXG5cclxuICAgICAgICBpZiAoIWN1cnJlbnQgfHwgY3VycmVudC5vcHRzLmhhc2ggPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiBuZWVkIHRvIHVwZGF0ZSB3aW5kb3cgaGFzaFxyXG4gICAgICAgIGdhbGxlcnkgPSBnZXRHYWxsZXJ5SUQoaW5zdGFuY2UpO1xyXG5cclxuICAgICAgICBpZiAoIWdhbGxlcnkpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFZhcmlhYmxlIGNvbnRhaW5pbmcgbGFzdCBoYXNoIHZhbHVlIHNldCBieSBmYW5jeUJveFxyXG4gICAgICAgIC8vIEl0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgaWYgZmFuY3lCb3ggbmVlZHMgdG8gY2xvc2UgYWZ0ZXIgaGFzaCBjaGFuZ2UgaXMgZGV0ZWN0ZWRcclxuICAgICAgICBpbnN0YW5jZS5jdXJyZW50SGFzaCA9IGdhbGxlcnkgKyAoaW5zdGFuY2UuZ3JvdXAubGVuZ3RoID4gMSA/IFwiLVwiICsgKGN1cnJlbnQuaW5kZXggKyAxKSA6IFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBJZiBjdXJyZW50IGhhc2ggaXMgdGhlIHNhbWUgKHRoaXMgaW5zdGFuY2UgbW9zdCBsaWtlbHkgaXMgb3BlbmVkIGJ5IGhhc2hjaGFuZ2UpLCB0aGVuIGRvIG5vdGhpbmdcclxuICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2ggPT09IFwiI1wiICsgaW5zdGFuY2UuY3VycmVudEhhc2gpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChmaXJzdFJ1biAmJiAhaW5zdGFuY2Uub3JpZ0hhc2gpIHtcclxuICAgICAgICAgIGluc3RhbmNlLm9yaWdIYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaW5zdGFuY2UuaGFzaFRpbWVyKSB7XHJcbiAgICAgICAgICBjbGVhclRpbWVvdXQoaW5zdGFuY2UuaGFzaFRpbWVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBoYXNoXHJcbiAgICAgICAgaW5zdGFuY2UuaGFzaFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBpZiAoXCJyZXBsYWNlU3RhdGVcIiBpbiB3aW5kb3cuaGlzdG9yeSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeVtmaXJzdFJ1biA/IFwicHVzaFN0YXRlXCIgOiBcInJlcGxhY2VTdGF0ZVwiXSh7fSxcclxuICAgICAgICAgICAgICBkb2N1bWVudC50aXRsZSxcclxuICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgXCIjXCIgKyBpbnN0YW5jZS5jdXJyZW50SGFzaFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZpcnN0UnVuKSB7XHJcbiAgICAgICAgICAgICAgaW5zdGFuY2UuaGFzQ3JlYXRlZEhpc3RvcnkgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGluc3RhbmNlLmN1cnJlbnRIYXNoO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGluc3RhbmNlLmhhc2hUaW1lciA9IG51bGw7XHJcbiAgICAgICAgfSwgMzAwKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIFwiYmVmb3JlQ2xvc2UuZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlLCBjdXJyZW50KSB7XHJcbiAgICAgICAgaWYgKCFjdXJyZW50IHx8IGN1cnJlbnQub3B0cy5oYXNoID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KGluc3RhbmNlLmhhc2hUaW1lcik7XHJcblxyXG4gICAgICAgIC8vIEdvdG8gcHJldmlvdXMgaGlzdG9yeSBlbnRyeVxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5jdXJyZW50SGFzaCAmJiBpbnN0YW5jZS5oYXNDcmVhdGVkSGlzdG9yeSkge1xyXG4gICAgICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UuY3VycmVudEhhc2gpIHtcclxuICAgICAgICAgIGlmIChcInJlcGxhY2VTdGF0ZVwiIGluIHdpbmRvdy5oaXN0b3J5KSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgZG9jdW1lbnQudGl0bGUsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyAoaW5zdGFuY2Uub3JpZ0hhc2ggfHwgXCJcIikpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBpbnN0YW5jZS5vcmlnSGFzaDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluc3RhbmNlLmN1cnJlbnRIYXNoID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgbmVlZCB0byBzdGFydC9jbG9zZSBhZnRlciB1cmwgaGFzIGNoYW5nZWRcclxuICAgICQod2luZG93KS5vbihcImhhc2hjaGFuZ2UuZmJcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgdXJsID0gcGFyc2VVcmwoKSxcclxuICAgICAgICBmYiA9IG51bGw7XHJcblxyXG4gICAgICAvLyBGaW5kIGxhc3QgZmFuY3lCb3ggaW5zdGFuY2UgdGhhdCBoYXMgXCJoYXNoXCJcclxuICAgICAgJC5lYWNoKFxyXG4gICAgICAgICQoXCIuZmFuY3lib3gtY29udGFpbmVyXCIpXHJcbiAgICAgICAgLmdldCgpXHJcbiAgICAgICAgLnJldmVyc2UoKSxcclxuICAgICAgICBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XHJcbiAgICAgICAgICB2YXIgdG1wID0gJCh2YWx1ZSkuZGF0YShcIkZhbmN5Qm94XCIpO1xyXG5cclxuICAgICAgICAgIGlmICh0bXAgJiYgdG1wLmN1cnJlbnRIYXNoKSB7XHJcbiAgICAgICAgICAgIGZiID0gdG1wO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKGZiKSB7XHJcbiAgICAgICAgLy8gTm93LCBjb21wYXJlIGhhc2ggdmFsdWVzXHJcbiAgICAgICAgaWYgKGZiLmN1cnJlbnRIYXNoICE9PSB1cmwuZ2FsbGVyeSArIFwiLVwiICsgdXJsLmluZGV4ICYmICEodXJsLmluZGV4ID09PSAxICYmIGZiLmN1cnJlbnRIYXNoID09IHVybC5nYWxsZXJ5KSkge1xyXG4gICAgICAgICAgZmIuY3VycmVudEhhc2ggPSBudWxsO1xyXG5cclxuICAgICAgICAgIGZiLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHVybC5nYWxsZXJ5ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgdHJpZ2dlckZyb21VcmwodXJsKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ2hlY2sgY3VycmVudCBoYXNoIGFuZCB0cmlnZ2VyIGNsaWNrIGV2ZW50IG9uIG1hdGNoaW5nIGVsZW1lbnQgdG8gc3RhcnQgZmFuY3lCb3gsIGlmIG5lZWRlZFxyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICghJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpKSB7XHJcbiAgICAgICAgdHJpZ2dlckZyb21VcmwocGFyc2VVcmwoKSk7XHJcbiAgICAgIH1cclxuICAgIH0sIDUwKTtcclxuICB9KTtcclxufSkod2luZG93LCBkb2N1bWVudCwgalF1ZXJ5KTtcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vXHJcbi8vIFdoZWVsXHJcbi8vIEJhc2ljIG1vdXNlIHdlaGVlbCBzdXBwb3J0IGZvciBnYWxsZXJ5IG5hdmlnYXRpb25cclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuKGZ1bmN0aW9uIChkb2N1bWVudCwgJCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICB2YXIgcHJldlRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHJcbiAgJChkb2N1bWVudCkub24oe1xyXG4gICAgXCJvbkluaXQuZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlLCBjdXJyZW50KSB7XHJcbiAgICAgIGluc3RhbmNlLiRyZWZzLnN0YWdlLm9uKFwibW91c2V3aGVlbCBET01Nb3VzZVNjcm9sbCB3aGVlbCBNb3pNb3VzZVBpeGVsU2Nyb2xsXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBpbnN0YW5jZS5jdXJyZW50LFxyXG4gICAgICAgICAgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmdyb3VwLmxlbmd0aCA8IDIgfHwgY3VycmVudC5vcHRzLndoZWVsID09PSBmYWxzZSB8fCAoY3VycmVudC5vcHRzLndoZWVsID09PSBcImF1dG9cIiAmJiBjdXJyZW50LnR5cGUgIT09IFwiaW1hZ2VcIikpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudC4kc2xpZGUuaGFzQ2xhc3MoXCJmYW5jeWJveC1hbmltYXRlZFwiKSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZSA9IGUub3JpZ2luYWxFdmVudCB8fCBlO1xyXG5cclxuICAgICAgICBpZiAoY3VyclRpbWUgLSBwcmV2VGltZSA8IDI1MCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJldlRpbWUgPSBjdXJyVGltZTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2VbKC1lLmRlbHRhWSB8fCAtZS5kZWx0YVggfHwgZS53aGVlbERlbHRhIHx8IC1lLmRldGFpbCkgPCAwID8gXCJuZXh0XCIgOiBcInByZXZpb3VzXCJdKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KShkb2N1bWVudCwgalF1ZXJ5KTsiLCIvKiFcclxuICogZnVsbFBhZ2UgMy4wLjlcclxuICogaHR0cHM6Ly9naXRodWIuY29tL2FsdmFyb3RyaWdvL2Z1bGxQYWdlLmpzXHJcbiAqXHJcbiAqIEBsaWNlbnNlIEdQTHYzIGZvciBvcGVuIHNvdXJjZSB1c2Ugb25seVxyXG4gKiBvciBGdWxscGFnZSBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXHJcbiAqIGh0dHA6Ly9hbHZhcm90cmlnby5jb20vZnVsbFBhZ2UvcHJpY2luZy9cclxuICpcclxuICogQ29weXJpZ2h0IChDKSAyMDE4IGh0dHA6Ly9hbHZhcm90cmlnby5jb20vZnVsbFBhZ2UgLSBBIHByb2plY3QgYnkgQWx2YXJvIFRyaWdvXHJcbiAqL1xyXG4oZnVuY3Rpb24oIHJvb3QsIHdpbmRvdywgZG9jdW1lbnQsIGZhY3RvcnksIHVuZGVmaW5lZCkge1xyXG4gICAgaWYoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXHJcbiAgICAgICAgZGVmaW5lKCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcm9vdC5mdWxscGFnZSA9IGZhY3Rvcnkod2luZG93LCBkb2N1bWVudCk7XHJcbiAgICAgICAgICAgIHJldHVybiByb290LmZ1bGxwYWdlO1xyXG4gICAgICAgIH0gKTtcclxuICAgIH0gZWxzZSBpZiggdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICkge1xyXG4gICAgICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMuXHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHdpbmRvdywgZG9jdW1lbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMuXHJcbiAgICAgICAgd2luZG93LmZ1bGxwYWdlID0gZmFjdG9yeSh3aW5kb3csIGRvY3VtZW50KTtcclxuICAgIH1cclxufSh0aGlzLCB3aW5kb3csIGRvY3VtZW50LCBmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50KXtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAvLyBrZWVwaW5nIGNlbnRyYWwgc2V0IG9mIGNsYXNzbmFtZXMgYW5kIHNlbGVjdG9yc1xyXG4gICAgdmFyIFdSQVBQRVIgPSAgICAgICAgICAgICAgICdmdWxscGFnZS13cmFwcGVyJztcclxuICAgIHZhciBXUkFQUEVSX1NFTCA9ICAgICAgICAgICAnLicgKyBXUkFQUEVSO1xyXG5cclxuICAgIC8vIHNsaW1zY3JvbGxcclxuICAgIHZhciBTQ1JPTExBQkxFID0gICAgICAgICAgICAnZnAtc2Nyb2xsYWJsZSc7XHJcbiAgICB2YXIgU0NST0xMQUJMRV9TRUwgPSAgICAgICAgJy4nICsgU0NST0xMQUJMRTtcclxuXHJcbiAgICAvLyB1dGlsXHJcbiAgICB2YXIgUkVTUE9OU0lWRSA9ICAgICAgICAgICAgJ2ZwLXJlc3BvbnNpdmUnO1xyXG4gICAgdmFyIE5PX1RSQU5TSVRJT04gPSAgICAgICAgICdmcC1ub3RyYW5zaXRpb24nO1xyXG4gICAgdmFyIERFU1RST1lFRCA9ICAgICAgICAgICAgICdmcC1kZXN0cm95ZWQnO1xyXG4gICAgdmFyIEVOQUJMRUQgPSAgICAgICAgICAgICAgICdmcC1lbmFibGVkJztcclxuICAgIHZhciBWSUVXSU5HX1BSRUZJWCA9ICAgICAgICAnZnAtdmlld2luZyc7XHJcbiAgICB2YXIgQUNUSVZFID0gICAgICAgICAgICAgICAgJ2FjdGl2ZSc7XHJcbiAgICB2YXIgQUNUSVZFX1NFTCA9ICAgICAgICAgICAgJy4nICsgQUNUSVZFO1xyXG4gICAgdmFyIENPTVBMRVRFTFkgPSAgICAgICAgICAgICdmcC1jb21wbGV0ZWx5JztcclxuICAgIHZhciBDT01QTEVURUxZX1NFTCA9ICAgICAgICAnLicgKyBDT01QTEVURUxZO1xyXG5cclxuICAgIC8vIHNlY3Rpb25cclxuICAgIHZhciBTRUNUSU9OX0RFRkFVTFRfU0VMID0gICAnLnNlY3Rpb24nO1xyXG4gICAgdmFyIFNFQ1RJT04gPSAgICAgICAgICAgICAgICdmcC1zZWN0aW9uJztcclxuICAgIHZhciBTRUNUSU9OX1NFTCA9ICAgICAgICAgICAnLicgKyBTRUNUSU9OO1xyXG4gICAgdmFyIFNFQ1RJT05fQUNUSVZFX1NFTCA9ICAgIFNFQ1RJT05fU0VMICsgQUNUSVZFX1NFTDtcclxuICAgIHZhciBUQUJMRV9DRUxMID0gICAgICAgICAgICAnZnAtdGFibGVDZWxsJztcclxuICAgIHZhciBUQUJMRV9DRUxMX1NFTCA9ICAgICAgICAnLicgKyBUQUJMRV9DRUxMO1xyXG4gICAgdmFyIEFVVE9fSEVJR0hUID0gICAgICAgICAgICdmcC1hdXRvLWhlaWdodCc7XHJcbiAgICB2YXIgQVVUT19IRUlHSFRfU0VMID0gICAgICAgJy4nICsgQVVUT19IRUlHSFQ7XHJcbiAgICB2YXIgQVVUT19IRUlHSFRfUkVTUE9OU0lWRSA9ICdmcC1hdXRvLWhlaWdodC1yZXNwb25zaXZlJztcclxuICAgIHZhciBBVVRPX0hFSUdIVF9SRVNQT05TSVZFX1NFTCA9ICcuJyArIEFVVE9fSEVJR0hUX1JFU1BPTlNJVkU7XHJcbiAgICB2YXIgTk9STUFMX1NDUk9MTCA9ICAgICAgICAgJ2ZwLW5vcm1hbC1zY3JvbGwnO1xyXG4gICAgdmFyIE5PUk1BTF9TQ1JPTExfU0VMID0gICAgICcuJyArIE5PUk1BTF9TQ1JPTEw7XHJcblxyXG4gICAgLy8gc2VjdGlvbiBuYXZcclxuICAgIHZhciBTRUNUSU9OX05BViA9ICAgICAgICAgICAnZnAtbmF2JztcclxuICAgIHZhciBTRUNUSU9OX05BVl9TRUwgPSAgICAgICAnIycgKyBTRUNUSU9OX05BVjtcclxuICAgIHZhciBTRUNUSU9OX05BVl9UT09MVElQID0gICAnZnAtdG9vbHRpcCc7XHJcbiAgICB2YXIgU0VDVElPTl9OQVZfVE9PTFRJUF9TRUw9Jy4nK1NFQ1RJT05fTkFWX1RPT0xUSVA7XHJcbiAgICB2YXIgU0hPV19BQ1RJVkVfVE9PTFRJUCA9ICAgJ2ZwLXNob3ctYWN0aXZlJztcclxuXHJcbiAgICAvLyBzbGlkZVxyXG4gICAgdmFyIFNMSURFX0RFRkFVTFRfU0VMID0gICAgICcuc2xpZGUnO1xyXG4gICAgdmFyIFNMSURFID0gICAgICAgICAgICAgICAgICdmcC1zbGlkZSc7XHJcbiAgICB2YXIgU0xJREVfU0VMID0gICAgICAgICAgICAgJy4nICsgU0xJREU7XHJcbiAgICB2YXIgU0xJREVfQUNUSVZFX1NFTCA9ICAgICAgU0xJREVfU0VMICsgQUNUSVZFX1NFTDtcclxuICAgIHZhciBTTElERVNfV1JBUFBFUiA9ICAgICAgICAnZnAtc2xpZGVzJztcclxuICAgIHZhciBTTElERVNfV1JBUFBFUl9TRUwgPSAgICAnLicgKyBTTElERVNfV1JBUFBFUjtcclxuICAgIHZhciBTTElERVNfQ09OVEFJTkVSID0gICAgICAnZnAtc2xpZGVzQ29udGFpbmVyJztcclxuICAgIHZhciBTTElERVNfQ09OVEFJTkVSX1NFTCA9ICAnLicgKyBTTElERVNfQ09OVEFJTkVSO1xyXG4gICAgdmFyIFRBQkxFID0gICAgICAgICAgICAgICAgICdmcC10YWJsZSc7XHJcblxyXG4gICAgLy8gc2xpZGUgbmF2XHJcbiAgICB2YXIgU0xJREVTX05BViA9ICAgICAgICAgICAgJ2ZwLXNsaWRlc05hdic7XHJcbiAgICB2YXIgU0xJREVTX05BVl9TRUwgPSAgICAgICAgJy4nICsgU0xJREVTX05BVjtcclxuICAgIHZhciBTTElERVNfTkFWX0xJTktfU0VMID0gICBTTElERVNfTkFWX1NFTCArICcgYSc7XHJcbiAgICB2YXIgU0xJREVTX0FSUk9XID0gICAgICAgICAgJ2ZwLWNvbnRyb2xBcnJvdyc7XHJcbiAgICB2YXIgU0xJREVTX0FSUk9XX1NFTCA9ICAgICAgJy4nICsgU0xJREVTX0FSUk9XO1xyXG4gICAgdmFyIFNMSURFU19QUkVWID0gICAgICAgICAgICdmcC1wcmV2JztcclxuICAgIHZhciBTTElERVNfUFJFVl9TRUwgPSAgICAgICAnLicgKyBTTElERVNfUFJFVjtcclxuICAgIHZhciBTTElERVNfQVJST1dfUFJFViA9ICAgICBTTElERVNfQVJST1cgKyAnICcgKyBTTElERVNfUFJFVjtcclxuICAgIHZhciBTTElERVNfQVJST1dfUFJFVl9TRUwgPSBTTElERVNfQVJST1dfU0VMICsgU0xJREVTX1BSRVZfU0VMO1xyXG4gICAgdmFyIFNMSURFU19ORVhUID0gICAgICAgICAgICdmcC1uZXh0JztcclxuICAgIHZhciBTTElERVNfTkVYVF9TRUwgPSAgICAgICAnLicgKyBTTElERVNfTkVYVDtcclxuICAgIHZhciBTTElERVNfQVJST1dfTkVYVCA9ICAgICBTTElERVNfQVJST1cgKyAnICcgKyBTTElERVNfTkVYVDtcclxuICAgIHZhciBTTElERVNfQVJST1dfTkVYVF9TRUwgPSBTTElERVNfQVJST1dfU0VMICsgU0xJREVTX05FWFRfU0VMO1xyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpc2UoY29udGFpbmVyU2VsZWN0b3IsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgaXNPSyA9IG9wdGlvbnMgJiYgbmV3IFJlZ0V4cCgnKFtcXFxcZFxcXFx3XXs4fS0pezN9W1xcXFxkXFxcXHddezh9fF4oPz0uKj9bQS1ZXSkoPz0uKj9bYS15XSkoPz0uKj9bMC04XSkoPz0uKj9bIz8hQCQlXiYqLV0pLns4LH0kJykudGVzdChvcHRpb25zWydsaScrJ2NlbicrJ3NlSycgKyAnZScgKyAneSddKSB8fCBkb2N1bWVudC5kb21haW4uaW5kZXhPZignYWwnKyd2YXJvdHJpJyArJ2dvJyArICcuJyArICdjb20nKSA+IC0xO1xyXG5cclxuICAgICAgICAvLyBjYWNoZSBjb21tb24gZWxlbWVudHNcclxuICAgICAgICB2YXIgJGh0bWxCb2R5ID0gJCgnaHRtbCwgYm9keScpO1xyXG4gICAgICAgIHZhciAkaHRtbCA9ICQoJ2h0bWwnKVswXTtcclxuICAgICAgICB2YXIgJGJvZHkgPSAkKCdib2R5JylbMF07XHJcblxyXG4gICAgICAgIC8vb25seSBvbmNlIG15IGZyaWVuZCFcclxuICAgICAgICBpZihoYXNDbGFzcygkaHRtbCwgRU5BQkxFRCkpeyBkaXNwbGF5V2FybmluZ3MoKTsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAgIHZhciBGUCA9IHt9O1xyXG5cclxuICAgICAgICAvLyBDcmVhdGluZyBzb21lIGRlZmF1bHRzLCBleHRlbmRpbmcgdGhlbSB3aXRoIGFueSBvcHRpb25zIHRoYXQgd2VyZSBwcm92aWRlZFxyXG4gICAgICAgIG9wdGlvbnMgPSBkZWVwRXh0ZW5kKHtcclxuICAgICAgICAgICAgLy9uYXZpZ2F0aW9uXHJcbiAgICAgICAgICAgIG1lbnU6IGZhbHNlLFxyXG4gICAgICAgICAgICBhbmNob3JzOltdLFxyXG4gICAgICAgICAgICBsb2NrQW5jaG9yczogZmFsc2UsXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb246IGZhbHNlLFxyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uUG9zaXRpb246ICdyaWdodCcsXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb25Ub29sdGlwczogW10sXHJcbiAgICAgICAgICAgIHNob3dBY3RpdmVUb29sdGlwOiBmYWxzZSxcclxuICAgICAgICAgICAgc2xpZGVzTmF2aWdhdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgIHNsaWRlc05hdlBvc2l0aW9uOiAnYm90dG9tJyxcclxuICAgICAgICAgICAgc2Nyb2xsQmFyOiBmYWxzZSxcclxuICAgICAgICAgICAgaHlicmlkOiBmYWxzZSxcclxuXHJcbiAgICAgICAgICAgIC8vc2Nyb2xsaW5nXHJcbiAgICAgICAgICAgIGNzczM6IHRydWUsXHJcbiAgICAgICAgICAgIHNjcm9sbGluZ1NwZWVkOiA3MDAsXHJcbiAgICAgICAgICAgIGF1dG9TY3JvbGxpbmc6IHRydWUsXHJcbiAgICAgICAgICAgIGZpdFRvU2VjdGlvbjogdHJ1ZSxcclxuICAgICAgICAgICAgZml0VG9TZWN0aW9uRGVsYXk6IDEwMDAsXHJcbiAgICAgICAgICAgIGVhc2luZzogJ2Vhc2VJbk91dEN1YmljJyxcclxuICAgICAgICAgICAgZWFzaW5nY3NzMzogJ2Vhc2UnLFxyXG4gICAgICAgICAgICBsb29wQm90dG9tOiBmYWxzZSxcclxuICAgICAgICAgICAgbG9vcFRvcDogZmFsc2UsXHJcbiAgICAgICAgICAgIGxvb3BIb3Jpem9udGFsOiB0cnVlLFxyXG4gICAgICAgICAgICBjb250aW51b3VzVmVydGljYWw6IGZhbHNlLFxyXG4gICAgICAgICAgICBjb250aW51b3VzSG9yaXpvbnRhbDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNjcm9sbEhvcml6b250YWxseTogZmFsc2UsXHJcbiAgICAgICAgICAgIGludGVybG9ja2VkU2xpZGVzOiBmYWxzZSxcclxuICAgICAgICAgICAgZHJhZ0FuZE1vdmU6IGZhbHNlLFxyXG4gICAgICAgICAgICBvZmZzZXRTZWN0aW9uczogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlc2V0U2xpZGVyczogZmFsc2UsXHJcbiAgICAgICAgICAgIGZhZGluZ0VmZmVjdDogZmFsc2UsXHJcbiAgICAgICAgICAgIG5vcm1hbFNjcm9sbEVsZW1lbnRzOiBudWxsLFxyXG4gICAgICAgICAgICBzY3JvbGxPdmVyZmxvdzogZmFsc2UsXHJcbiAgICAgICAgICAgIHNjcm9sbE92ZXJmbG93UmVzZXQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBzY3JvbGxPdmVyZmxvd0hhbmRsZXI6IHdpbmRvdy5mcF9zY3JvbGxvdmVyZmxvdyA/IHdpbmRvdy5mcF9zY3JvbGxvdmVyZmxvdy5pc2Nyb2xsSGFuZGxlciA6IG51bGwsXHJcbiAgICAgICAgICAgIHNjcm9sbE92ZXJmbG93T3B0aW9uczogbnVsbCxcclxuICAgICAgICAgICAgdG91Y2hTZW5zaXRpdml0eTogNSxcclxuICAgICAgICAgICAgdG91Y2hXcmFwcGVyOiB0eXBlb2YgY29udGFpbmVyU2VsZWN0b3IgPT09ICdzdHJpbmcnID8gJChjb250YWluZXJTZWxlY3RvcilbMF0gOiBjb250YWluZXJTZWxlY3RvcixcclxuICAgICAgICAgICAgYmlnU2VjdGlvbnNEZXN0aW5hdGlvbjogbnVsbCxcclxuXHJcbiAgICAgICAgICAgIC8vQWNjZXNzaWJpbGl0eVxyXG4gICAgICAgICAgICBrZXlib2FyZFNjcm9sbGluZzogdHJ1ZSxcclxuICAgICAgICAgICAgYW5pbWF0ZUFuY2hvcjogdHJ1ZSxcclxuICAgICAgICAgICAgcmVjb3JkSGlzdG9yeTogdHJ1ZSxcclxuXHJcbiAgICAgICAgICAgIC8vZGVzaWduXHJcbiAgICAgICAgICAgIGNvbnRyb2xBcnJvd3M6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbnRyb2xBcnJvd0NvbG9yOiAnI2ZmZicsXHJcbiAgICAgICAgICAgIHZlcnRpY2FsQ2VudGVyZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIHNlY3Rpb25zQ29sb3IgOiBbXSxcclxuICAgICAgICAgICAgcGFkZGluZ1RvcDogMCxcclxuICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogMCxcclxuICAgICAgICAgICAgZml4ZWRFbGVtZW50czogbnVsbCxcclxuICAgICAgICAgICAgcmVzcG9uc2l2ZTogMCwgLy9iYWNrd2FyZHMgY29tcGFiaXRpbGl0eSB3aXRoIHJlc3BvbnNpdmVXaWRkdGhcclxuICAgICAgICAgICAgcmVzcG9uc2l2ZVdpZHRoOiAwLFxyXG4gICAgICAgICAgICByZXNwb25zaXZlSGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICByZXNwb25zaXZlU2xpZGVzOiBmYWxzZSxcclxuICAgICAgICAgICAgcGFyYWxsYXg6IGZhbHNlLFxyXG4gICAgICAgICAgICBwYXJhbGxheE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdyZXZlYWwnLFxyXG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZTogNjIsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogJ3RyYW5zbGF0ZSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2FyZHM6IGZhbHNlLFxyXG4gICAgICAgICAgICBjYXJkc09wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIHBlcnNwZWN0aXZlOiAxMDAsXHJcbiAgICAgICAgICAgICAgICBmYWRlQ29udGVudDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGZhZGVCYWNrZ3JvdW5kOiB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvL0N1c3RvbSBzZWxlY3RvcnNcclxuICAgICAgICAgICAgc2VjdGlvblNlbGVjdG9yOiBTRUNUSU9OX0RFRkFVTFRfU0VMLFxyXG4gICAgICAgICAgICBzbGlkZVNlbGVjdG9yOiBTTElERV9ERUZBVUxUX1NFTCxcclxuXHJcbiAgICAgICAgICAgIC8vZXZlbnRzXHJcbiAgICAgICAgICAgIHYyY29tcGF0aWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGFmdGVyTG9hZDogbnVsbCxcclxuICAgICAgICAgICAgb25MZWF2ZTogbnVsbCxcclxuICAgICAgICAgICAgYWZ0ZXJSZW5kZXI6IG51bGwsXHJcbiAgICAgICAgICAgIGFmdGVyUmVzaXplOiBudWxsLFxyXG4gICAgICAgICAgICBhZnRlclJlQnVpbGQ6IG51bGwsXHJcbiAgICAgICAgICAgIGFmdGVyU2xpZGVMb2FkOiBudWxsLFxyXG4gICAgICAgICAgICBvblNsaWRlTGVhdmU6IG51bGwsXHJcbiAgICAgICAgICAgIGFmdGVyUmVzcG9uc2l2ZTogbnVsbCxcclxuXHJcbiAgICAgICAgICAgIGxhenlMb2FkaW5nOiB0cnVlXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIC8vZmxhZyB0byBhdm9pZCB2ZXJ5IGZhc3Qgc2xpZGluZyBmb3IgbGFuZHNjYXBlIHNsaWRlcnNcclxuICAgICAgICB2YXIgc2xpZGVNb3ZpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdmFyIGlzVG91Y2hEZXZpY2UgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC8oaVBob25lfGlQb2R8aVBhZHxBbmRyb2lkfHBsYXlib29rfHNpbGt8QmxhY2tCZXJyeXxCQjEwfFdpbmRvd3MgUGhvbmV8VGl6ZW58QmFkYXx3ZWJPU3xJRU1vYmlsZXxPcGVyYSBNaW5pKS8pO1xyXG4gICAgICAgIHZhciBpc1RvdWNoID0gKCgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpIHx8IChuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyA+IDApIHx8IChuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMpKTtcclxuICAgICAgICB2YXIgY29udGFpbmVyID0gdHlwZW9mIGNvbnRhaW5lclNlbGVjdG9yID09PSAnc3RyaW5nJyA/ICQoY29udGFpbmVyU2VsZWN0b3IpWzBdIDogY29udGFpbmVyU2VsZWN0b3I7XHJcbiAgICAgICAgdmFyIHdpbmRvd3NIZWlnaHQgPSBnZXRXaW5kb3dIZWlnaHQoKTtcclxuICAgICAgICB2YXIgd2luZG93c1dpZHRoID0gZ2V0V2luZG93V2lkdGgoKTtcclxuICAgICAgICB2YXIgaXNSZXNpemluZyA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBpc1dpbmRvd0ZvY3VzZWQgPSB0cnVlO1xyXG4gICAgICAgIHZhciBsYXN0U2Nyb2xsZWREZXN0aW55O1xyXG4gICAgICAgIHZhciBsYXN0U2Nyb2xsZWRTbGlkZTtcclxuICAgICAgICB2YXIgY2FuU2Nyb2xsID0gdHJ1ZTtcclxuICAgICAgICB2YXIgc2Nyb2xsaW5ncyA9IFtdO1xyXG4gICAgICAgIHZhciBjb250cm9sUHJlc3NlZDtcclxuICAgICAgICB2YXIgc3RhcnRpbmdTZWN0aW9uO1xyXG4gICAgICAgIHZhciBpc1Njcm9sbEFsbG93ZWQgPSB7fTtcclxuICAgICAgICBpc1Njcm9sbEFsbG93ZWQubSA9IHsgICd1cCc6dHJ1ZSwgJ2Rvd24nOnRydWUsICdsZWZ0Jzp0cnVlLCAncmlnaHQnOnRydWUgfTtcclxuICAgICAgICBpc1Njcm9sbEFsbG93ZWQuayA9IGRlZXBFeHRlbmQoe30sIGlzU2Nyb2xsQWxsb3dlZC5tKTtcclxuICAgICAgICB2YXIgTVNQb2ludGVyID0gZ2V0TVNQb2ludGVyKCk7XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IHtcclxuICAgICAgICAgICAgdG91Y2htb3ZlOiAnb250b3VjaG1vdmUnIGluIHdpbmRvdyA/ICd0b3VjaG1vdmUnIDogIE1TUG9pbnRlci5tb3ZlLFxyXG4gICAgICAgICAgICB0b3VjaHN0YXJ0OiAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgPyAndG91Y2hzdGFydCcgOiAgTVNQb2ludGVyLmRvd25cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBzY3JvbGxCYXJIYW5kbGVyO1xyXG5cclxuICAgICAgICAvLyB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS91ZGFjaXR5L3VkODkxL2Jsb2IvZ2gtcGFnZXMvbGVzc29uMi1mb2N1cy8wNy1tb2RhbHMtYW5kLWtleWJvYXJkLXRyYXBzL3NvbHV0aW9uL21vZGFsLmpzXHJcbiAgICAgICAgdmFyIGZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nID0gJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsIFt0YWJpbmRleD1cIjBcIl0sIFtjb250ZW50ZWRpdGFibGVdJztcclxuXHJcbiAgICAgICAgLy9jaGVrcyBmb3IgcGFzc2l2ZSBldmVudCBzdXBwb3J0XHJcbiAgICAgICAgdmFyIGdfc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICBnX3N1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0UGFzc2l2ZVwiLCBudWxsLCBvcHRzKTtcclxuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFBhc3NpdmVcIiwgbnVsbCwgb3B0cyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge31cclxuXHJcbiAgICAgICAgLy90aW1lb3V0c1xyXG4gICAgICAgIHZhciByZXNpemVJZDtcclxuICAgICAgICB2YXIgcmVzaXplSGFuZGxlcklkO1xyXG4gICAgICAgIHZhciBhZnRlclNlY3Rpb25Mb2Fkc0lkO1xyXG4gICAgICAgIHZhciBhZnRlclNsaWRlTG9hZHNJZDtcclxuICAgICAgICB2YXIgc2Nyb2xsSWQ7XHJcbiAgICAgICAgdmFyIHNjcm9sbElkMjtcclxuICAgICAgICB2YXIga2V5ZG93bklkO1xyXG4gICAgICAgIHZhciBnX2RvdWJsZUNoZWNrSGVpZ2h0SWQ7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFscyA9IGRlZXBFeHRlbmQoe30sIG9wdGlvbnMpOyAvL2RlZXAgY29weVxyXG4gICAgICAgIHZhciBhY3RpdmVBbmltYXRpb247XHJcbiAgICAgICAgdmFyIGdfaW5pdGlhbEFuY2hvcnNJbkRvbSA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBnX2NhbkZpcmVNb3VzZUVudGVyTm9ybWFsU2Nyb2xsID0gdHJ1ZTtcclxuICAgICAgICB2YXIgZ19tZWRpYUxvYWRlZElkO1xyXG4gICAgICAgIHZhciBnX3RyYW5zaXRpb25MYXBzZUlkO1xyXG4gICAgICAgIHZhciBleHRlbnNpb25zID0gW1xyXG4gICAgICAgICAgICAncGFyYWxsYXgnLFxyXG4gICAgICAgICAgICAnc2Nyb2xsT3ZlcmZsb3dSZXNldCcsXHJcbiAgICAgICAgICAgICdkcmFnQW5kTW92ZScsXHJcbiAgICAgICAgICAgICdvZmZzZXRTZWN0aW9ucycsXHJcbiAgICAgICAgICAgICdmYWRpbmdFZmZlY3QnLFxyXG4gICAgICAgICAgICAncmVzcG9uc2l2ZVNsaWRlcycsXHJcbiAgICAgICAgICAgICdjb250aW51b3VzSG9yaXpvbnRhbCcsXHJcbiAgICAgICAgICAgICdpbnRlcmxvY2tlZFNsaWRlcycsXHJcbiAgICAgICAgICAgICdzY3JvbGxIb3Jpem9udGFsbHknLFxyXG4gICAgICAgICAgICAncmVzZXRTbGlkZXJzJyxcclxuICAgICAgICAgICAgJ2NhcmRzJ1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGRpc3BsYXlXYXJuaW5ncygpO1xyXG5cclxuICAgICAgICAvL2Vhc2VJbk91dEN1YmljIGFuaW1hdGlvbiBpbmNsdWRlZCBpbiB0aGUgcGx1Z2luXHJcbiAgICAgICAgd2luZG93LmZwX2Vhc2luZ3MgPSBkZWVwRXh0ZW5kKHdpbmRvdy5mcF9lYXNpbmdzLCB7XHJcbiAgICAgICAgICAgIGVhc2VJbk91dEN1YmljOiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCh0Lz1kLzIpIDwgMSkgcmV0dXJuIGMvMip0KnQqdCArIGI7cmV0dXJuIGMvMiooKHQtPTIpKnQqdCArIDIpICsgYjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFNldHMgdGhlIGF1dG9TY3JvbGwgb3B0aW9uLlxyXG4gICAgICAgICogSXQgY2hhbmdlcyB0aGUgc2Nyb2xsIGJhciB2aXNpYmlsaXR5IGFuZCB0aGUgaGlzdG9yeSBvZiB0aGUgc2l0ZSBhcyBhIHJlc3VsdC5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNldEF1dG9TY3JvbGxpbmcodmFsdWUsIHR5cGUpe1xyXG4gICAgICAgICAgICAvL3JlbW92aW5nIHRoZSB0cmFuc2Zvcm1hdGlvblxyXG4gICAgICAgICAgICBpZighdmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgc2lsZW50U2Nyb2xsKDApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRWYXJpYWJsZVN0YXRlKCdhdXRvU2Nyb2xsaW5nJywgdmFsdWUsIHR5cGUpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSAkKFNFQ1RJT05fQUNUSVZFX1NFTClbMF07XHJcblxyXG4gICAgICAgICAgICBpZihvcHRpb25zLmF1dG9TY3JvbGxpbmcgJiYgIW9wdGlvbnMuc2Nyb2xsQmFyKXtcclxuICAgICAgICAgICAgICAgIGNzcygkaHRtbEJvZHksIHtcclxuICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOiAnaGlkZGVuJyxcclxuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRSZWNvcmRIaXN0b3J5KG9yaWdpbmFscy5yZWNvcmRIaXN0b3J5LCAnaW50ZXJuYWwnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2ZvciBJRSB0b3VjaCBkZXZpY2VzXHJcbiAgICAgICAgICAgICAgICBjc3MoY29udGFpbmVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJy1tcy10b3VjaC1hY3Rpb24nOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3RvdWNoLWFjdGlvbic6ICdub25lJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoZWxlbWVudCAhPSBudWxsKXtcclxuICAgICAgICAgICAgICAgICAgICAvL21vdmluZyB0aGUgY29udGFpbmVyIHVwXHJcbiAgICAgICAgICAgICAgICAgICAgc2lsZW50U2Nyb2xsKGVsZW1lbnQub2Zmc2V0VG9wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBjc3MoJGh0bWxCb2R5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93JyA6ICd2aXNpYmxlJyxcclxuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JyA6ICdpbml0aWFsJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJlY29yZEhpc3RvcnkgPSAhb3B0aW9ucy5hdXRvU2Nyb2xsaW5nID8gZmFsc2UgOiBvcmlnaW5hbHMucmVjb3JkSGlzdG9yeTtcclxuICAgICAgICAgICAgICAgIHNldFJlY29yZEhpc3RvcnkocmVjb3JkSGlzdG9yeSwgJ2ludGVybmFsJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9mb3IgSUUgdG91Y2ggZGV2aWNlc1xyXG4gICAgICAgICAgICAgICAgY3NzKGNvbnRhaW5lciwge1xyXG4gICAgICAgICAgICAgICAgICAgICctbXMtdG91Y2gtYWN0aW9uJzogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3RvdWNoLWFjdGlvbic6ICcnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Njcm9sbGluZyB0aGUgcGFnZSB0byB0aGUgc2VjdGlvbiB3aXRoIG5vIGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxTZXR0aW5ncyA9IGdldFNjcm9sbFNldHRpbmdzKGVsZW1lbnQub2Zmc2V0VG9wKTtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxTZXR0aW5ncy5lbGVtZW50LnNjcm9sbFRvKDAsIHNjcm9sbFNldHRpbmdzLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIERlZmluZXMgd2hldGVyIHRvIHJlY29yZCB0aGUgaGlzdG9yeSBmb3IgZWFjaCBoYXNoIGNoYW5nZSBpbiB0aGUgVVJMLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0UmVjb3JkSGlzdG9yeSh2YWx1ZSwgdHlwZSl7XHJcbiAgICAgICAgICAgIHNldFZhcmlhYmxlU3RhdGUoJ3JlY29yZEhpc3RvcnknLCB2YWx1ZSwgdHlwZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIERlZmluZXMgdGhlIHNjcm9sbGluZyBzcGVlZFxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0U2Nyb2xsaW5nU3BlZWQodmFsdWUsIHR5cGUpe1xyXG4gICAgICAgICAgICBzZXRWYXJpYWJsZVN0YXRlKCdzY3JvbGxpbmdTcGVlZCcsIHZhbHVlLCB0eXBlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU2V0cyBmaXRUb1NlY3Rpb25cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNldEZpdFRvU2VjdGlvbih2YWx1ZSwgdHlwZSl7XHJcbiAgICAgICAgICAgIHNldFZhcmlhYmxlU3RhdGUoJ2ZpdFRvU2VjdGlvbicsIHZhbHVlLCB0eXBlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU2V0cyBsb2NrQW5jaG9yc1xyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0TG9ja0FuY2hvcnModmFsdWUpe1xyXG4gICAgICAgICAgICBvcHRpb25zLmxvY2tBbmNob3JzID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEFkZHMgb3IgcmVtb3ZlIHRoZSBwb3NzaWJpbGl0eSBvZiBzY3JvbGxpbmcgdGhyb3VnaCBzZWN0aW9ucyBieSB1c2luZyB0aGUgbW91c2Ugd2hlZWwgb3IgdGhlIHRyYWNrcGFkLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0TW91c2VXaGVlbFNjcm9sbGluZyh2YWx1ZSl7XHJcbiAgICAgICAgICAgIGlmKHZhbHVlKXtcclxuICAgICAgICAgICAgICAgIGFkZE1vdXNlV2hlZWxIYW5kbGVyKCk7XHJcbiAgICAgICAgICAgICAgICBhZGRNaWRkbGVXaGVlbEhhbmRsZXIoKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVNb3VzZVdoZWVsSGFuZGxlcigpO1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlTWlkZGxlV2hlZWxIYW5kbGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogQWRkcyBvciByZW1vdmUgdGhlIHBvc3NpYmlsaXR5IG9mIHNjcm9sbGluZyB0aHJvdWdoIHNlY3Rpb25zIGJ5IHVzaW5nIHRoZSBtb3VzZSB3aGVlbC90cmFja3BhZCBvciB0b3VjaCBnZXN0dXJlcy5cclxuICAgICAgICAqIE9wdGlvbmFsbHkgYSBzZWNvbmQgcGFyYW1ldGVyIGNhbiBiZSB1c2VkIHRvIHNwZWNpZnkgdGhlIGRpcmVjdGlvbiBmb3Igd2hpY2ggdGhlIGFjdGlvbiB3aWxsIGJlIGFwcGxpZWQuXHJcbiAgICAgICAgKlxyXG4gICAgICAgICogQHBhcmFtIGRpcmVjdGlvbnMgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGRpcmVjdGlvbiBvciBkaXJlY3Rpb25zIHNlcGFyYXRlZCBieSBjb21tYS5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNldEFsbG93U2Nyb2xsaW5nKHZhbHVlLCBkaXJlY3Rpb25zKXtcclxuICAgICAgICAgICAgaWYodHlwZW9mIGRpcmVjdGlvbnMgIT09ICd1bmRlZmluZWQnKXtcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMgPSBkaXJlY3Rpb25zLnJlcGxhY2UoLyAvZywnJykuc3BsaXQoJywnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGRpcmVjdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0SXNTY3JvbGxBbGxvd2VkKHZhbHVlLCBkaXJlY3Rpb24sICdtJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgc2V0SXNTY3JvbGxBbGxvd2VkKHZhbHVlLCAnYWxsJywgJ20nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBBZGRzIG9yIHJlbW92ZSB0aGUgbW91c2Ugd2hlZWwgaGlqYWNraW5nXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBzZXRNb3VzZUhpamFjayh2YWx1ZSl7XHJcbiAgICAgICAgICAgIGlmKHZhbHVlKXtcclxuICAgICAgICAgICAgICAgIHNldE1vdXNlV2hlZWxTY3JvbGxpbmcodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBhZGRUb3VjaEhhbmRsZXIoKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBzZXRNb3VzZVdoZWVsU2Nyb2xsaW5nKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHJlbW92ZVRvdWNoSGFuZGxlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEFkZHMgb3IgcmVtb3ZlIHRoZSBwb3NzaWJpbGl0eSBvZiBzY3JvbGxpbmcgdGhyb3VnaCBzZWN0aW9ucyBieSB1c2luZyB0aGUga2V5Ym9hcmQgYXJyb3cga2V5c1xyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0S2V5Ym9hcmRTY3JvbGxpbmcodmFsdWUsIGRpcmVjdGlvbnMpe1xyXG4gICAgICAgICAgICBpZih0eXBlb2YgZGlyZWN0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpe1xyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9ucyA9IGRpcmVjdGlvbnMucmVwbGFjZSgvIC9nLCcnKS5zcGxpdCgnLCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihkaXJlY3Rpb24pe1xyXG4gICAgICAgICAgICAgICAgICAgIHNldElzU2Nyb2xsQWxsb3dlZCh2YWx1ZSwgZGlyZWN0aW9uLCAnaycpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgc2V0SXNTY3JvbGxBbGxvd2VkKHZhbHVlLCAnYWxsJywgJ2snKTtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMua2V5Ym9hcmRTY3JvbGxpbmcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBNb3ZlcyB0aGUgcGFnZSB1cCBvbmUgc2VjdGlvbi5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIG1vdmVTZWN0aW9uVXAoKXtcclxuICAgICAgICAgICAgdmFyIHByZXYgPSBwcmV2VW50aWwoJChTRUNUSU9OX0FDVElWRV9TRUwpWzBdLCBTRUNUSU9OX1NFTCk7XHJcblxyXG4gICAgICAgICAgICAvL2xvb3BpbmcgdG8gdGhlIGJvdHRvbSBpZiB0aGVyZSdzIG5vIG1vcmUgc2VjdGlvbnMgYWJvdmVcclxuICAgICAgICAgICAgaWYgKCFwcmV2ICYmIChvcHRpb25zLmxvb3BUb3AgfHwgb3B0aW9ucy5jb250aW51b3VzVmVydGljYWwpKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2ID0gbGFzdCgkKFNFQ1RJT05fU0VMKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwcmV2ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHNjcm9sbFBhZ2UocHJldiwgbnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogTW92ZXMgdGhlIHBhZ2UgZG93biBvbmUgc2VjdGlvbi5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIG1vdmVTZWN0aW9uRG93bigpe1xyXG4gICAgICAgICAgICB2YXIgbmV4dCA9IG5leHRVbnRpbCgkKFNFQ1RJT05fQUNUSVZFX1NFTClbMF0sIFNFQ1RJT05fU0VMKTtcclxuXHJcbiAgICAgICAgICAgIC8vbG9vcGluZyB0byB0aGUgdG9wIGlmIHRoZXJlJ3Mgbm8gbW9yZSBzZWN0aW9ucyBiZWxvd1xyXG4gICAgICAgICAgICBpZighbmV4dCAmJlxyXG4gICAgICAgICAgICAgICAgKG9wdGlvbnMubG9vcEJvdHRvbSB8fCBvcHRpb25zLmNvbnRpbnVvdXNWZXJ0aWNhbCkpe1xyXG4gICAgICAgICAgICAgICAgbmV4dCA9ICQoU0VDVElPTl9TRUwpWzBdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihuZXh0ICE9IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsUGFnZShuZXh0LCBudWxsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogTW92ZXMgdGhlIHBhZ2UgdG8gdGhlIGdpdmVuIHNlY3Rpb24gYW5kIHNsaWRlIHdpdGggbm8gYW5pbWF0aW9uLlxyXG4gICAgICAgICogQW5jaG9ycyBvciBpbmRleCBwb3NpdGlvbnMgY2FuIGJlIHVzZWQgYXMgcGFyYW1zLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2lsZW50TW92ZVRvKHNlY3Rpb25BbmNob3IsIHNsaWRlQW5jaG9yKXtcclxuICAgICAgICAgICAgc2V0U2Nyb2xsaW5nU3BlZWQgKDAsICdpbnRlcm5hbCcpO1xyXG4gICAgICAgICAgICBtb3ZlVG8oc2VjdGlvbkFuY2hvciwgc2xpZGVBbmNob3IpO1xyXG4gICAgICAgICAgICBzZXRTY3JvbGxpbmdTcGVlZCAob3JpZ2luYWxzLnNjcm9sbGluZ1NwZWVkLCAnaW50ZXJuYWwnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogTW92ZXMgdGhlIHBhZ2UgdG8gdGhlIGdpdmVuIHNlY3Rpb24gYW5kIHNsaWRlLlxyXG4gICAgICAgICogQW5jaG9ycyBvciBpbmRleCBwb3NpdGlvbnMgY2FuIGJlIHVzZWQgYXMgcGFyYW1zLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gbW92ZVRvKHNlY3Rpb25BbmNob3IsIHNsaWRlQW5jaG9yKXtcclxuICAgICAgICAgICAgdmFyIGRlc3RpbnkgPSBnZXRTZWN0aW9uQnlBbmNob3Ioc2VjdGlvbkFuY2hvcik7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNsaWRlQW5jaG9yICE9PSAndW5kZWZpbmVkJyl7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGxQYWdlQW5kU2xpZGUoc2VjdGlvbkFuY2hvciwgc2xpZGVBbmNob3IpO1xyXG4gICAgICAgICAgICB9ZWxzZSBpZihkZXN0aW55ICE9IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsUGFnZShkZXN0aW55KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBTbGlkZXMgcmlnaHQgdGhlIHNsaWRlciBvZiB0aGUgYWN0aXZlIHNlY3Rpb24uXHJcbiAgICAgICAgKiBPcHRpb25hbCBgc2VjdGlvbmAgcGFyYW0uXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBtb3ZlU2xpZGVSaWdodChzZWN0aW9uKXtcclxuICAgICAgICAgICAgbW92ZVNsaWRlKCdyaWdodCcsIHNlY3Rpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBTbGlkZXMgbGVmdCB0aGUgc2xpZGVyIG9mIHRoZSBhY3RpdmUgc2VjdGlvbi5cclxuICAgICAgICAqIE9wdGlvbmFsIGBzZWN0aW9uYCBwYXJhbS5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIG1vdmVTbGlkZUxlZnQoc2VjdGlvbil7XHJcbiAgICAgICAgICAgIG1vdmVTbGlkZSgnbGVmdCcsIHNlY3Rpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV2hlbiByZXNpemluZyBpcyBmaW5pc2hlZCwgd2UgYWRqdXN0IHRoZSBzbGlkZXMgc2l6ZXMgYW5kIHBvc2l0aW9uc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHJlQnVpbGQocmVzaXppbmcpe1xyXG4gICAgICAgICAgICBpZihoYXNDbGFzcyhjb250YWluZXIsIERFU1RST1lFRCkpeyByZXR1cm47IH0gIC8vbm90aGluZyB0byBkbyBpZiB0aGUgcGx1Z2luIHdhcyBkZXN0cm95ZWRcclxuXHJcbiAgICAgICAgICAgIGlzUmVzaXppbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy91cGRhdGluZyBnbG9iYWwgdmFyc1xyXG4gICAgICAgICAgICB3aW5kb3dzSGVpZ2h0ID0gZ2V0V2luZG93SGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIHdpbmRvd3NXaWR0aCA9IGdldFdpbmRvd1dpZHRoKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VjdGlvbnMgPSAkKFNFQ1RJT05fU0VMKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWN0aW9ucy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlY3Rpb24gPSBzZWN0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciBzbGlkZXNXcmFwID0gJChTTElERVNfV1JBUFBFUl9TRUwsIHNlY3Rpb24pWzBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlcyA9ICQoU0xJREVfU0VMLCBzZWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2FkanVzdGluZyB0aGUgaGVpZ2h0IG9mIHRoZSB0YWJsZS1jZWxsIGZvciBJRSBhbmQgRmlyZWZveFxyXG4gICAgICAgICAgICAgICAgaWYob3B0aW9ucy52ZXJ0aWNhbENlbnRlcmVkKXtcclxuICAgICAgICAgICAgICAgICAgICBjc3MoJChUQUJMRV9DRUxMX1NFTCwgc2VjdGlvbiksIHsnaGVpZ2h0JzogZ2V0VGFibGVIZWlnaHQoc2VjdGlvbikgKyAncHgnfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY3NzKHNlY3Rpb24sIHsnaGVpZ2h0Jzogd2luZG93c0hlaWdodCArICdweCd9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2FkanVzdGluZyB0aGUgcG9zaXRpb24gZm8gdGhlIEZVTEwgV0lEVEggc2xpZGVzLi4uXHJcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYW5kc2NhcGVTY3JvbGwoc2xpZGVzV3JhcCwgJChTTElERV9BQ1RJVkVfU0VMLCBzbGlkZXNXcmFwKVswXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3cpe1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsQmFySGFuZGxlci5jcmVhdGVTY3JvbGxCYXJGb3JBbGwoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGFjdGl2ZVNlY3Rpb24gPSAkKFNFQ1RJT05fQUNUSVZFX1NFTClbMF07XHJcbiAgICAgICAgICAgIHZhciBzZWN0aW9uSW5kZXggPSBpbmRleChhY3RpdmVTZWN0aW9uLCBTRUNUSU9OX1NFTCk7XHJcblxyXG4gICAgICAgICAgICAvL2lzbid0IGl0IHRoZSBmaXJzdCBzZWN0aW9uP1xyXG4gICAgICAgICAgICBpZihzZWN0aW9uSW5kZXgpe1xyXG4gICAgICAgICAgICAgICAgLy9hZGp1c3RpbmcgdGhlIHBvc2l0aW9uIGZvciB0aGUgY3VycmVudCBzZWN0aW9uXHJcbiAgICAgICAgICAgICAgICBzaWxlbnRNb3ZlVG8oc2VjdGlvbkluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzUmVzaXppbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYoaXNGdW5jdGlvbiggb3B0aW9ucy5hZnRlclJlc2l6ZSApICYmIHJlc2l6aW5nKXtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYWZ0ZXJSZXNpemUuY2FsbChjb250YWluZXIsIHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGlzRnVuY3Rpb24oIG9wdGlvbnMuYWZ0ZXJSZUJ1aWxkICkgJiYgIXJlc2l6aW5nKXtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYWZ0ZXJSZUJ1aWxkLmNhbGwoY29udGFpbmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgZnVsbHBhZ2UuanMgaXMgaW4gcmVzcG9uc2l2ZSBtb2RlIG9yIG5vdC5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGlzUmVzcG9uc2l2ZU1vZGUoKXtcclxuICAgICAgICAgICByZXR1cm4gaGFzQ2xhc3MoJGJvZHksIFJFU1BPTlNJVkUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBUdXJucyBmdWxsUGFnZS5qcyB0byBub3JtYWwgc2Nyb2xsaW5nIG1vZGUgd2hlbiB0aGUgdmlld3BvcnQgYHdpZHRoYCBvciBgaGVpZ2h0YFxyXG4gICAgICAgICogYXJlIHNtYWxsZXIgdGhhbiB0aGUgc2V0IGxpbWl0IHZhbHVlcy5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNldFJlc3BvbnNpdmUoYWN0aXZlKXtcclxuICAgICAgICAgICAgdmFyIGlzUmVzcG9uc2l2ZSA9IGlzUmVzcG9uc2l2ZU1vZGUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmKGFjdGl2ZSl7XHJcbiAgICAgICAgICAgICAgICBpZighaXNSZXNwb25zaXZlKXtcclxuICAgICAgICAgICAgICAgICAgICBzZXRBdXRvU2Nyb2xsaW5nKGZhbHNlLCAnaW50ZXJuYWwnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRGaXRUb1NlY3Rpb24oZmFsc2UsICdpbnRlcm5hbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhpZGUoJChTRUNUSU9OX05BVl9TRUwpKTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcygkYm9keSwgUkVTUE9OU0lWRSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXNGdW5jdGlvbiggb3B0aW9ucy5hZnRlclJlc3BvbnNpdmUgKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuYWZ0ZXJSZXNwb25zaXZlLmNhbGwoIGNvbnRhaW5lciwgYWN0aXZlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vd2hlbiBvbiBwYWdlIGxvYWQsIHdlIHdpbGwgcmVtb3ZlIHNjcm9sbG92ZXJmbG93IGlmIG5lY2Vzc2FyeVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3cpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxCYXJIYW5kbGVyLmNyZWF0ZVNjcm9sbEJhckZvckFsbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGlzUmVzcG9uc2l2ZSl7XHJcbiAgICAgICAgICAgICAgICBzZXRBdXRvU2Nyb2xsaW5nKG9yaWdpbmFscy5hdXRvU2Nyb2xsaW5nLCAnaW50ZXJuYWwnKTtcclxuICAgICAgICAgICAgICAgIHNldEZpdFRvU2VjdGlvbihvcmlnaW5hbHMuYXV0b1Njcm9sbGluZywgJ2ludGVybmFsJyk7XHJcbiAgICAgICAgICAgICAgICBzaG93KCQoU0VDVElPTl9OQVZfU0VMKSk7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcygkYm9keSwgUkVTUE9OU0lWRSk7XHJcbiAgICAgICAgICAgICAgICBpZihpc0Z1bmN0aW9uKCBvcHRpb25zLmFmdGVyUmVzcG9uc2l2ZSApKXtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmFmdGVyUmVzcG9uc2l2ZS5jYWxsKCBjb250YWluZXIsIGFjdGl2ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKGNvbnRhaW5lcil7XHJcbiAgICAgICAgICAgIC8vcHVibGljIGZ1bmN0aW9uc1xyXG4gICAgICAgICAgICBGUC52ZXJzaW9uID0gJzMuMC44JztcclxuICAgICAgICAgICAgRlAuc2V0QXV0b1Njcm9sbGluZyA9IHNldEF1dG9TY3JvbGxpbmc7XHJcbiAgICAgICAgICAgIEZQLnNldFJlY29yZEhpc3RvcnkgPSBzZXRSZWNvcmRIaXN0b3J5O1xyXG4gICAgICAgICAgICBGUC5zZXRTY3JvbGxpbmdTcGVlZCA9IHNldFNjcm9sbGluZ1NwZWVkO1xyXG4gICAgICAgICAgICBGUC5zZXRGaXRUb1NlY3Rpb24gPSBzZXRGaXRUb1NlY3Rpb247XHJcbiAgICAgICAgICAgIEZQLnNldExvY2tBbmNob3JzID0gc2V0TG9ja0FuY2hvcnM7XHJcbiAgICAgICAgICAgIEZQLnNldE1vdXNlV2hlZWxTY3JvbGxpbmcgPSBzZXRNb3VzZVdoZWVsU2Nyb2xsaW5nO1xyXG4gICAgICAgICAgICBGUC5zZXRBbGxvd1Njcm9sbGluZyA9IHNldEFsbG93U2Nyb2xsaW5nO1xyXG4gICAgICAgICAgICBGUC5zZXRLZXlib2FyZFNjcm9sbGluZyA9IHNldEtleWJvYXJkU2Nyb2xsaW5nO1xyXG4gICAgICAgICAgICBGUC5tb3ZlU2VjdGlvblVwID0gbW92ZVNlY3Rpb25VcDtcclxuICAgICAgICAgICAgRlAubW92ZVNlY3Rpb25Eb3duID0gbW92ZVNlY3Rpb25Eb3duO1xyXG4gICAgICAgICAgICBGUC5zaWxlbnRNb3ZlVG8gPSBzaWxlbnRNb3ZlVG87XHJcbiAgICAgICAgICAgIEZQLm1vdmVUbyA9IG1vdmVUbztcclxuICAgICAgICAgICAgRlAubW92ZVNsaWRlUmlnaHQgPSBtb3ZlU2xpZGVSaWdodDtcclxuICAgICAgICAgICAgRlAubW92ZVNsaWRlTGVmdCA9IG1vdmVTbGlkZUxlZnQ7XHJcbiAgICAgICAgICAgIEZQLmZpdFRvU2VjdGlvbiA9IGZpdFRvU2VjdGlvbjtcclxuICAgICAgICAgICAgRlAucmVCdWlsZCA9IHJlQnVpbGQ7XHJcbiAgICAgICAgICAgIEZQLnNldFJlc3BvbnNpdmUgPSBzZXRSZXNwb25zaXZlO1xyXG4gICAgICAgICAgICBGUC5nZXRGdWxscGFnZURhdGEgPSBmdW5jdGlvbigpeyByZXR1cm4gb3B0aW9uczsgfTtcclxuICAgICAgICAgICAgRlAuZGVzdHJveSA9IGRlc3Ryb3k7XHJcbiAgICAgICAgICAgIEZQLmdldEFjdGl2ZVNlY3Rpb24gPSBnZXRBY3RpdmVTZWN0aW9uO1xyXG4gICAgICAgICAgICBGUC5nZXRBY3RpdmVTbGlkZSA9IGdldEFjdGl2ZVNsaWRlO1xyXG5cclxuICAgICAgICAgICAgRlAudGVzdCA9IHtcclxuICAgICAgICAgICAgICAgIHRvcDogJzBweCcsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGUzZDogJ3RyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpJyxcclxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZTNkSDogKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgJChvcHRpb25zLnNlY3Rpb25TZWxlY3RvciwgY29udGFpbmVyKS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGEucHVzaCgndHJhbnNsYXRlM2QoMHB4LCAwcHgsIDBweCknKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgICAgICAgICB9KSgpLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgJChvcHRpb25zLnNlY3Rpb25TZWxlY3RvciwgY29udGFpbmVyKS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGEucHVzaCgwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgICAgICAgICB9KSgpLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcclxuICAgICAgICAgICAgICAgIHNldEF1dG9TY3JvbGxpbmc6IHNldEF1dG9TY3JvbGxpbmdcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vZnVuY3Rpb25zIHdlIHdhbnQgdG8gc2hhcmUgYWNyb3NzIGZpbGVzIGJ1dCB3aGljaCBhcmUgbm90XHJcbiAgICAgICAgICAgIC8vbWVhbiB0byBiZSB1c2VkIG9uIHRoZWlyIG93biBieSBkZXZlbG9wZXJzXHJcbiAgICAgICAgICAgIEZQLnNoYXJlZCA9IHtcclxuICAgICAgICAgICAgICAgIGFmdGVyUmVuZGVyQWN0aW9uczogYWZ0ZXJSZW5kZXJBY3Rpb25zLFxyXG4gICAgICAgICAgICAgICAgaXNOb3JtYWxTY3JvbGxFbGVtZW50OiBmYWxzZVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgd2luZG93LmZ1bGxwYWdlX2FwaSA9IEZQO1xyXG5cclxuICAgICAgICAgICAgLy91c2luZyBqUXVlcnkgaW5pdGlhbGl6YXRpb24/IENyZWF0aW5nIHRoZSAkLmZuLmZ1bGxwYWdlIG9iamVjdFxyXG4gICAgICAgICAgICBpZihvcHRpb25zLiQpe1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoRlApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAgICBcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLiQuZm4uZnVsbHBhZ2Vba2V5XSA9IEZQW2tleV07ICAgXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpO1xyXG5cclxuICAgICAgICAgICAgYmluZEV2ZW50cygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaW5pdCgpe1xyXG4gICAgICAgICAgICAvL2lmIGNzczMgaXMgbm90IHN1cHBvcnRlZCwgaXQgd2lsbCB1c2UgalF1ZXJ5IGFuaW1hdGlvbnNcclxuICAgICAgICAgICAgaWYob3B0aW9ucy5jc3MzKXtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuY3NzMyA9IHN1cHBvcnQzZCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvcHRpb25zLnNjcm9sbEJhciA9IG9wdGlvbnMuc2Nyb2xsQmFyIHx8IG9wdGlvbnMuaHlicmlkO1xyXG5cclxuICAgICAgICAgICAgc2V0T3B0aW9uc0Zyb21ET00oKTtcclxuICAgICAgICAgICAgcHJlcGFyZURvbSgpO1xyXG4gICAgICAgICAgICBzZXRBbGxvd1Njcm9sbGluZyh0cnVlKTtcclxuICAgICAgICAgICAgc2V0TW91c2VIaWphY2sodHJ1ZSk7XHJcbiAgICAgICAgICAgIHNldEF1dG9TY3JvbGxpbmcob3B0aW9ucy5hdXRvU2Nyb2xsaW5nLCAnaW50ZXJuYWwnKTtcclxuICAgICAgICAgICAgcmVzcG9uc2l2ZSgpO1xyXG5cclxuICAgICAgICAgICAgLy9zZXR0aW5nIHRoZSBjbGFzcyBmb3IgdGhlIGJvZHkgZWxlbWVudFxyXG4gICAgICAgICAgICBzZXRCb2R5Q2xhc3MoKTtcclxuXHJcbiAgICAgICAgICAgIGlmKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpe1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsVG9BbmNob3IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHNjcm9sbFRvQW5jaG9yKTtcclxuXHJcbiAgICAgICAgICAgIC8vaWYgd2UgdXNlIHNjcm9sbE92ZXJmbG93IHdlJ2xsIGZpcmUgYWZ0ZXJSZW5kZXIgaW4gdGhlIHNjcm9sbG92ZXJmbG93IGZpbGVcclxuICAgICAgICAgICAgaWYoIW9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3cpe1xyXG4gICAgICAgICAgICAgICAgYWZ0ZXJSZW5kZXJBY3Rpb25zKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRvdWJsZUNoZWNrSGVpZ2h0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBiaW5kRXZlbnRzKCl7XHJcblxyXG4gICAgICAgICAgICAvL3doZW4gc2Nyb2xsaW5nLi4uXHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGxIYW5kbGVyKTtcclxuXHJcbiAgICAgICAgICAgIC8vZGV0ZWN0aW5nIGFueSBjaGFuZ2Ugb24gdGhlIFVSTCB0byBzY3JvbGwgdG8gdGhlIGdpdmVuIGFuY2hvciBsaW5rXHJcbiAgICAgICAgICAgIC8vKGEgd2F5IHRvIGRldGVjdCBiYWNrIGhpc3RvcnkgYnV0dG9uIGFzIHdlIHBsYXkgd2l0aCB0aGUgaGFzaGVzIG9uIHRoZSBVUkwpXHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgaGFzaENoYW5nZUhhbmRsZXIpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gb24gd2luZG93IGZvY3VzXHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZvY3VzSGFuZGxlcik7XHJcblxyXG4gICAgICAgICAgICAvL3doZW4gb3BlbmluZyBhIG5ldyB0YWIgKGN0cmwgKyB0KSwgYGNvbnRyb2xgIHdvbid0IGJlIHByZXNzZWQgd2hlbiBjb21pbmcgYmFjay5cclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBibHVySGFuZGxlcik7XHJcblxyXG4gICAgICAgICAgICAvL3doZW4gcmVzaXppbmcgdGhlIHNpdGUsIHdlIGFkanVzdCB0aGUgaGVpZ2h0cyBvZiB0aGUgc2VjdGlvbnMsIHNsaW1TY3JvbGwuLi5cclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xyXG5cclxuICAgICAgICAgICAgLy9TbGlkaW5nIHdpdGggYXJyb3cga2V5cywgYm90aCwgdmVydGljYWwgYW5kIGhvcml6b250YWxcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGtleWRvd25IYW5kbGVyKTtcclxuXHJcbiAgICAgICAgICAgIC8vdG8gcHJldmVudCBzY3JvbGxpbmcgd2hpbGUgem9vbWluZ1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGtleVVwSGFuZGxlcik7XHJcblxyXG4gICAgICAgICAgICAvL1Njcm9sbHMgdG8gdGhlIHNlY3Rpb24gd2hlbiBjbGlja2luZyB0aGUgbmF2aWdhdGlvbiBidWxsZXRcclxuICAgICAgICAgICAgLy9zaW11bGF0aW5nIHRoZSBqUXVlcnkgLm9uKCdjbGljaycpIGV2ZW50IHVzaW5nIGRlbGVnYXRpb25cclxuICAgICAgICAgICAgWydjbGljaycsICd0b3VjaHN0YXJ0J10uZm9yRWFjaChmdW5jdGlvbihldmVudE5hbWUpe1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGRlbGVnYXRlZEV2ZW50cyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICogQXBwbHlpbmcgbm9ybWFsU2Nyb2xsIGVsZW1lbnRzLlxyXG4gICAgICAgICAgICAqIElnbm9yaW5nIHRoZSBzY3JvbGxzIG92ZXIgdGhlIHNwZWNpZmllZCBzZWxlY3RvcnMuXHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMubm9ybWFsU2Nyb2xsRWxlbWVudHMpe1xyXG4gICAgICAgICAgICAgICAgWydtb3VzZWVudGVyJywgJ3RvdWNoc3RhcnQnXS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50TmFtZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yTW91c2VMZWF2ZU9yVG91Y2goZXZlbnROYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBbJ21vdXNlbGVhdmUnLCAndG91Y2hlbmQnXS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50TmFtZSl7XHJcbiAgICAgICAgICAgICAgICAgICBmb3JNb3VzZUxlYXZlT3JUb3VjaChldmVudE5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRlbGVnYXRlZEV2ZW50cyhlKXtcclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xyXG5cclxuICAgICAgICAgICAgaWYodGFyZ2V0ICYmIGNsb3Nlc3QodGFyZ2V0LCBTRUNUSU9OX05BVl9TRUwgKyAnIGEnKSl7XHJcbiAgICAgICAgICAgICAgICBzZWN0aW9uQnVsbGV0SGFuZGxlci5jYWxsKHRhcmdldCwgZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihtYXRjaGVzKHRhcmdldCwgU0VDVElPTl9OQVZfVE9PTFRJUF9TRUwpKXtcclxuICAgICAgICAgICAgICAgIHRvb2x0aXBUZXh0SGFuZGxlci5jYWxsKHRhcmdldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihtYXRjaGVzKHRhcmdldCwgU0xJREVTX0FSUk9XX1NFTCkpe1xyXG4gICAgICAgICAgICAgICAgc2xpZGVBcnJvd0hhbmRsZXIuY2FsbCh0YXJnZXQsIGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYobWF0Y2hlcyh0YXJnZXQsIFNMSURFU19OQVZfTElOS19TRUwpIHx8IGNsb3Nlc3QodGFyZ2V0LCBTTElERVNfTkFWX0xJTktfU0VMKSAhPSBudWxsKXtcclxuICAgICAgICAgICAgICAgIHNsaWRlQnVsbGV0SGFuZGxlci5jYWxsKHRhcmdldCwgZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihjbG9zZXN0KHRhcmdldCwgb3B0aW9ucy5tZW51ICsgJyBbZGF0YS1tZW51YW5jaG9yXScpKXtcclxuICAgICAgICAgICAgICAgIG1lbnVJdGVtc0hhbmRsZXIuY2FsbCh0YXJnZXQsIGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBmb3JNb3VzZUxlYXZlT3JUb3VjaChldmVudE5hbWUsIGFsbG93U2Nyb2xsaW5nKXtcclxuICAgICAgICAgICAgLy9hIHdheSB0byBwYXNzIGFyZ3VtZW50cyB0byB0aGUgb25Nb3VzZUVudGVyT3JMZWF2ZSBmdW5jdGlvblxyXG4gICAgICAgICAgICBkb2N1bWVudFsnZnBfJyArIGV2ZW50TmFtZV0gPSBhbGxvd1Njcm9sbGluZztcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uTW91c2VFbnRlck9yTGVhdmUsIHRydWUpOyAvL2NhcHR1cmluZyBwaGFzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25Nb3VzZUVudGVyT3JMZWF2ZShlKSB7XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gZS50eXBlO1xyXG4gICAgICAgICAgICB2YXIgaXNJbnNpZGVPbmVOb3JtYWxTY3JvbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGlzVXNpbmdTY3JvbGxPdmVyZmxvdyA9IG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3c7XHJcblxyXG4gICAgICAgICAgICAvL29uTW91c2VMZWF2ZSB3aWxsIHVzZSB0aGUgZGVzdGluYXRpb24gdGFyZ2V0LCBub3QgdGhlIG9uZSB3ZSBhcmUgbW92aW5nIGF3YXkgZnJvbVxyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdHlwZSA9PT0gJ21vdXNlbGVhdmUnID8gZS50b0VsZW1lbnQgfHwgZS5yZWxhdGVkVGFyZ2V0IDogZS50YXJnZXQ7XHJcblxyXG4gICAgICAgICAgICAvL2NvbWluZyBmcm9tIGNsb3NpbmcgYSBub3JtYWxTY3JvbGxFbGVtZW50cyBtb2RhbCBvciBtb3Zpbmcgb3V0c2lkZSB2aWV3cG9ydD9cclxuICAgICAgICAgICAgaWYodGFyZ2V0ID09IGRvY3VtZW50IHx8ICF0YXJnZXQpe1xyXG4gICAgICAgICAgICAgICAgc2V0TW91c2VIaWphY2sodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoaXNVc2luZ1Njcm9sbE92ZXJmbG93KXtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNjcm9sbE92ZXJmbG93SGFuZGxlci5zZXRJc2Nyb2xsKHRhcmdldCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHR5cGUgPT09ICd0b3VjaGVuZCcpe1xyXG4gICAgICAgICAgICAgICAgZ19jYW5GaXJlTW91c2VFbnRlck5vcm1hbFNjcm9sbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIGdfY2FuRmlyZU1vdXNlRW50ZXJOb3JtYWxTY3JvbGwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSwgODAwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9wcmV2ZW50aW5nIG1vdXNlZW50ZXIgZXZlbnQgdG8gZG8gYW55dGhpbmcgd2hlbiBjb21pbmcgZnJvbSBhIHRvdWNoRW5kIGV2ZW50XHJcbiAgICAgICAgICAgIC8vZml4aW5nIGlzc3VlICMzNTc2XHJcbiAgICAgICAgICAgIGlmKHR5cGUgPT09ICdtb3VzZWVudGVyJyAmJiAhZ19jYW5GaXJlTW91c2VFbnRlck5vcm1hbFNjcm9sbCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBub3JtYWxTZWxlY3RvcnMgPSBvcHRpb25zLm5vcm1hbFNjcm9sbEVsZW1lbnRzLnNwbGl0KCcsJyk7XHJcblxyXG4gICAgICAgICAgICBub3JtYWxTZWxlY3RvcnMuZm9yRWFjaChmdW5jdGlvbihub3JtYWxTZWxlY3Rvcil7XHJcbiAgICAgICAgICAgICAgICBpZighaXNJbnNpZGVPbmVOb3JtYWxTY3JvbGwpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc05vcm1hbFNjcm9sbFRhcmdldCA9IG1hdGNoZXModGFyZ2V0LCBub3JtYWxTZWxlY3Rvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vbGVhdmluZyBhIGNoaWxkIGluc2lkZSB0aGUgbm9ybWFsU2NvbGwgZWxlbWVudCBpcyBub3QgbGVhdmluZyB0aGUgbm9ybWFsU2Nyb2xsICMzNjYxXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzTm9ybWFsU2Nyb2xsQ2hpbGRGb2N1c2VkID0gY2xvc2VzdCh0YXJnZXQsIG5vcm1hbFNlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXNOb3JtYWxTY3JvbGxUYXJnZXQgfHzCoGlzTm9ybWFsU2Nyb2xsQ2hpbGRGb2N1c2VkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIUZQLnNoYXJlZC5pc05vcm1hbFNjcm9sbEVsZW1lbnQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TW91c2VIaWphY2soZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzVXNpbmdTY3JvbGxPdmVyZmxvdyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zY3JvbGxPdmVyZmxvd0hhbmRsZXIuc2V0SXNjcm9sbCh0YXJnZXQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBGUC5zaGFyZWQuaXNOb3JtYWxTY3JvbGxFbGVtZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNJbnNpZGVPbmVOb3JtYWxTY3JvbGwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL25vdCBpbnNpZGUgYSBzaW5nbGUgbm9ybWFsIHNjcm9sbCBlbGVtZW50IGFueW1vcmU/XHJcbiAgICAgICAgICAgIGlmKCFpc0luc2lkZU9uZU5vcm1hbFNjcm9sbCAmJiBGUC5zaGFyZWQuaXNOb3JtYWxTY3JvbGxFbGVtZW50KXtcclxuICAgICAgICAgICAgICAgIHNldE1vdXNlSGlqYWNrKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZihpc1VzaW5nU2Nyb2xsT3ZlcmZsb3cpe1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLnNldElzY3JvbGwodGFyZ2V0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBGUC5zaGFyZWQuaXNOb3JtYWxTY3JvbGxFbGVtZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogQ2hlY2tzIHRoZSB2aWV3cG9ydCBhIGZldyB0aW1lcyBvbiBhIGRlZmluZSBpbnRlcnZhbCBvZiB0aW1lIHRvIFxyXG4gICAgICAgICogc2VlIGlmIGl0IGhhcyBjaGFuZ2VkIGluIGFueSBvZiB0aG9zZS4gSWYgdGhhdCdzIHRoZSBjYXNlLCBpdCByZXNpemVzLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gZG91YmxlQ2hlY2tIZWlnaHQoKXtcclxuICAgICAgICAgICAgZm9yKHZhciBpID0gMTsgaSA8IDQ7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBnX2RvdWJsZUNoZWNrSGVpZ2h0SWQgPSBzZXRUaW1lb3V0KGFkanVzdFRvTmV3Vmlld3BvcnQsIDM1MCAqIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEFkanVzdHMgYSBzZWN0aW9uIHRvIHRoZSB2aWV3cG9ydCBpZiBpdCBoYXMgY2hhbmdlZC5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGFkanVzdFRvTmV3Vmlld3BvcnQoKXtcclxuICAgICAgICAgICAgdmFyIG5ld1dpbmRvd0hlaWdodCA9IGdldFdpbmRvd0hlaWdodCgpO1xyXG4gICAgICAgICAgICB2YXIgbmV3V2luZG93V2lkdGggPSBnZXRXaW5kb3dXaWR0aCgpO1xyXG5cclxuICAgICAgICAgICAgaWYod2luZG93c0hlaWdodCAhPT0gbmV3V2luZG93SGVpZ2h0IHx8IHdpbmRvd3NXaWR0aCAhPT0gbmV3V2luZG93V2lkdGgpe1xyXG4gICAgICAgICAgICAgICAgd2luZG93c0hlaWdodCA9IG5ld1dpbmRvd0hlaWdodDtcclxuICAgICAgICAgICAgICAgIHdpbmRvd3NXaWR0aCA9IG5ld1dpbmRvd1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgcmVCdWlsZCh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBTZXR0aW5nIG9wdGlvbnMgZnJvbSBET00gZWxlbWVudHMgaWYgdGhleSBhcmUgbm90IHByb3ZpZGVkLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0T3B0aW9uc0Zyb21ET00oKXtcclxuXHJcbiAgICAgICAgICAgIC8vbm8gYW5jaG9ycyBvcHRpb24/IENoZWNraW5nIGZvciB0aGVtIGluIHRoZSBET00gYXR0cmlidXRlc1xyXG4gICAgICAgICAgICBpZighb3B0aW9ucy5hbmNob3JzLmxlbmd0aCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgYW5jaG9yc0F0dHJpYnV0ZSA9ICdbZGF0YS1hbmNob3JdJztcclxuICAgICAgICAgICAgICAgIHZhciBhbmNob3JzID0gJChvcHRpb25zLnNlY3Rpb25TZWxlY3Rvci5zcGxpdCgnLCcpLmpvaW4oYW5jaG9yc0F0dHJpYnV0ZSArICcsJykgKyBhbmNob3JzQXR0cmlidXRlLCBjb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYoYW5jaG9ycy5sZW5ndGggJiYgYW5jaG9ycy5sZW5ndGggPT09ICQoU0VDVElPTl9TRUwpLmxlbmd0aCl7XHJcbiAgICAgICAgICAgICAgICAgICAgZ19pbml0aWFsQW5jaG9yc0luRG9tID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhbmNob3JzLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuYW5jaG9ycy5wdXNoKGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWFuY2hvcicpLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL25vIHRvb2x0aXBzIG9wdGlvbj8gQ2hlY2tpbmcgZm9yIHRoZW0gaW4gdGhlIERPTSBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGlmKCFvcHRpb25zLm5hdmlnYXRpb25Ub29sdGlwcy5sZW5ndGgpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHRvb2x0aXBzQXR0cmlidXRlID0gJ1tkYXRhLXRvb2x0aXBdJztcclxuICAgICAgICAgICAgICAgIHZhciB0b29sdGlwcyA9ICQob3B0aW9ucy5zZWN0aW9uU2VsZWN0b3Iuc3BsaXQoJywnKS5qb2luKHRvb2x0aXBzQXR0cmlidXRlICsgJywnKSArIHRvb2x0aXBzQXR0cmlidXRlLCBjb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYodG9vbHRpcHMubGVuZ3RoKXtcclxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm5hdmlnYXRpb25Ub29sdGlwcy5wdXNoKGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXAnKS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBXb3JrcyBvdmVyIHRoZSBET00gc3RydWN0dXJlIHRvIHNldCBpdCB1cCBmb3IgdGhlIGN1cnJlbnQgZnVsbHBhZ2Ugb3B0aW9ucy5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHByZXBhcmVEb20oKXtcclxuICAgICAgICAgICAgY3NzKGNvbnRhaW5lciwge1xyXG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDAlJyxcclxuICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICdyZWxhdGl2ZSdcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL2FkZGluZyBhIGNsYXNzIHRvIHJlY29nbml6ZSB0aGUgY29udGFpbmVyIGludGVybmFsbHkgaW4gdGhlIGNvZGVcclxuICAgICAgICAgICAgYWRkQ2xhc3MoY29udGFpbmVyLCBXUkFQUEVSKTtcclxuICAgICAgICAgICAgYWRkQ2xhc3MoJGh0bWwsIEVOQUJMRUQpO1xyXG5cclxuICAgICAgICAgICAgLy9kdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL2FsdmFyb3RyaWdvL2Z1bGxQYWdlLmpzL2lzc3Vlcy8xNTAyXHJcbiAgICAgICAgICAgIHdpbmRvd3NIZWlnaHQgPSBnZXRXaW5kb3dIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKGNvbnRhaW5lciwgREVTVFJPWUVEKTsgLy9pbiBjYXNlIGl0IHdhcyBkZXN0cm95ZWQgYmVmb3JlIGluaXRpYWxpemluZyBpdCBhZ2FpblxyXG5cclxuICAgICAgICAgICAgYWRkSW50ZXJuYWxTZWxlY3RvcnMoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWN0aW9ucyA9ICQoU0VDVElPTl9TRUwpO1xyXG5cclxuICAgICAgICAgICAgLy9zdHlsaW5nIHRoZSBzZWN0aW9ucyAvIHNsaWRlcyAvIG1lbnVcclxuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaTxzZWN0aW9ucy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VjdGlvbkluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgIHZhciBzZWN0aW9uID0gc2VjdGlvbnNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVzID0gJChTTElERV9TRUwsIHNlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgdmFyIG51bVNsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jYWNoaW5nIHRoZSBvcmlnaW5hbCBzdHlsZXMgdG8gYWRkIHRoZW0gYmFjayBvbiBkZXN0cm95KCdhbGwnKVxyXG4gICAgICAgICAgICAgICAgc2VjdGlvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtZnAtc3R5bGVzJywgc2VjdGlvbi5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0eWxlU2VjdGlvbihzZWN0aW9uLCBzZWN0aW9uSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgc3R5bGVNZW51KHNlY3Rpb24sIHNlY3Rpb25JbmRleCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBhbnkgc2xpZGVcclxuICAgICAgICAgICAgICAgIGlmIChudW1TbGlkZXMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTbGlkZXMoc2VjdGlvbiwgc2xpZGVzLCBudW1TbGlkZXMpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYob3B0aW9ucy52ZXJ0aWNhbENlbnRlcmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkVGFibGVDbGFzcyhzZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vZml4ZWQgZWxlbWVudHMgbmVlZCB0byBiZSBtb3ZlZCBvdXQgb2YgdGhlIHBsdWdpbiBjb250YWluZXIgZHVlIHRvIHByb2JsZW1zIHdpdGggQ1NTMy5cclxuICAgICAgICAgICAgaWYob3B0aW9ucy5maXhlZEVsZW1lbnRzICYmIG9wdGlvbnMuY3NzMyl7XHJcbiAgICAgICAgICAgICAgICAkKG9wdGlvbnMuZml4ZWRFbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcclxuICAgICAgICAgICAgICAgICAgICAkYm9keS5hcHBlbmRDaGlsZChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL3ZlcnRpY2FsIGNlbnRlcmVkIG9mIHRoZSBuYXZpZ2F0aW9uICsgYWN0aXZlIGJ1bGxldFxyXG4gICAgICAgICAgICBpZihvcHRpb25zLm5hdmlnYXRpb24pe1xyXG4gICAgICAgICAgICAgICAgYWRkVmVydGljYWxOYXZpZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVuYWJsZVlvdXR1YmVBUEkoKTtcclxuXHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3cpe1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsQmFySGFuZGxlciA9IG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLmluaXQob3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU3R5bGVzIHRoZSBob3Jpem9udGFsIHNsaWRlcyBmb3IgYSBzZWN0aW9uLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc3R5bGVTbGlkZXMoc2VjdGlvbiwgc2xpZGVzLCBudW1TbGlkZXMpe1xyXG4gICAgICAgICAgICB2YXIgc2xpZGVyV2lkdGggPSBudW1TbGlkZXMgKiAxMDA7XHJcbiAgICAgICAgICAgIHZhciBzbGlkZVdpZHRoID0gMTAwIC8gbnVtU2xpZGVzO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNsaWRlc1dyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgc2xpZGVzV3JhcHBlci5jbGFzc05hbWUgPSBTTElERVNfV1JBUFBFUjsgLy9mcC1zbGlkZXNcclxuICAgICAgICAgICAgd3JhcEFsbChzbGlkZXMsIHNsaWRlc1dyYXBwZXIpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNsaWRlc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBzbGlkZXNDb250YWluZXIuY2xhc3NOYW1lID0gU0xJREVTX0NPTlRBSU5FUjsgLy9mcC1zbGlkZXNDb250YWluZXJcclxuICAgICAgICAgICAgd3JhcEFsbChzbGlkZXMsIHNsaWRlc0NvbnRhaW5lcik7XHJcblxyXG4gICAgICAgICAgICBjc3MoJChTTElERVNfQ09OVEFJTkVSX1NFTCwgc2VjdGlvbiksIHsnd2lkdGgnOiBzbGlkZXJXaWR0aCArICclJ30pO1xyXG5cclxuICAgICAgICAgICAgaWYobnVtU2xpZGVzID4gMSl7XHJcbiAgICAgICAgICAgICAgICBpZihvcHRpb25zLmNvbnRyb2xBcnJvd3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVNsaWRlQXJyb3dzKHNlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuc2xpZGVzTmF2aWdhdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkU2xpZGVzTmF2aWdhdGlvbihzZWN0aW9uLCBudW1TbGlkZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzbGlkZXMuZm9yRWFjaChmdW5jdGlvbihzbGlkZSkge1xyXG4gICAgICAgICAgICAgICAgY3NzKHNsaWRlLCB7J3dpZHRoJzogc2xpZGVXaWR0aCArICclJ30pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMudmVydGljYWxDZW50ZXJlZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkVGFibGVDbGFzcyhzbGlkZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0YXJ0aW5nU2xpZGUgPSAkKFNMSURFX0FDVElWRV9TRUwsIHNlY3Rpb24pWzBdO1xyXG5cclxuICAgICAgICAgICAgLy9pZiB0aGUgc2xpZGUgd29uJ3QgYmUgYW4gc3RhcnRpbmcgcG9pbnQsIHRoZSBkZWZhdWx0IHdpbGwgYmUgdGhlIGZpcnN0IG9uZVxyXG4gICAgICAgICAgICAvL3RoZSBhY3RpdmUgc2VjdGlvbiBpc24ndCB0aGUgZmlyc3Qgb25lPyBJcyBub3QgdGhlIGZpcnN0IHNsaWRlIG9mIHRoZSBmaXJzdCBzZWN0aW9uPyBUaGVuIHdlIGxvYWQgdGhhdCBzZWN0aW9uL3NsaWRlIGJ5IGRlZmF1bHQuXHJcbiAgICAgICAgICAgIGlmKCBzdGFydGluZ1NsaWRlICE9IG51bGwgJiYgKGluZGV4KCQoU0VDVElPTl9BQ1RJVkVfU0VMKSwgU0VDVElPTl9TRUwpICE9PSAwIHx8IChpbmRleCgkKFNFQ1RJT05fQUNUSVZFX1NFTCksIFNFQ1RJT05fU0VMKSA9PT0gMCAmJiBpbmRleChzdGFydGluZ1NsaWRlKSAhPT0gMCkpKXtcclxuICAgICAgICAgICAgICAgIHNpbGVudExhbmRzY2FwZVNjcm9sbChzdGFydGluZ1NsaWRlLCAnaW50ZXJuYWwnKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhzbGlkZXNbMF0sIEFDVElWRSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU3R5bGluZyB2ZXJ0aWNhbCBzZWN0aW9uc1xyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc3R5bGVTZWN0aW9uKHNlY3Rpb24sIGluZGV4KXtcclxuICAgICAgICAgICAgLy9pZiBubyBhY3RpdmUgc2VjdGlvbiBpcyBkZWZpbmVkLCB0aGUgMXN0IG9uZSB3aWxsIGJlIHRoZSBkZWZhdWx0IG9uZVxyXG4gICAgICAgICAgICBpZighaW5kZXggJiYgJChTRUNUSU9OX0FDVElWRV9TRUwpWzBdID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHNlY3Rpb24sIEFDVElWRSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RhcnRpbmdTZWN0aW9uID0gJChTRUNUSU9OX0FDVElWRV9TRUwpWzBdO1xyXG5cclxuICAgICAgICAgICAgY3NzKHNlY3Rpb24sIHsnaGVpZ2h0Jzogd2luZG93c0hlaWdodCArICdweCd9KTtcclxuXHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMucGFkZGluZ1RvcCl7XHJcbiAgICAgICAgICAgICAgICBjc3Moc2VjdGlvbiwgeydwYWRkaW5nLXRvcCc6IG9wdGlvbnMucGFkZGluZ1RvcH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihvcHRpb25zLnBhZGRpbmdCb3R0b20pe1xyXG4gICAgICAgICAgICAgICAgY3NzKHNlY3Rpb24sIHsncGFkZGluZy1ib3R0b20nOiBvcHRpb25zLnBhZGRpbmdCb3R0b219KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnNlY3Rpb25zQ29sb3JbaW5kZXhdICE9PSAgJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGNzcyhzZWN0aW9uLCB7J2JhY2tncm91bmQtY29sb3InOiBvcHRpb25zLnNlY3Rpb25zQ29sb3JbaW5kZXhdfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hbmNob3JzW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHNlY3Rpb24uc2V0QXR0cmlidXRlKCdkYXRhLWFuY2hvcicsIG9wdGlvbnMuYW5jaG9yc1tpbmRleF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFNldHMgdGhlIGRhdGEtYW5jaG9yIGF0dHJpYnV0ZXMgdG8gdGhlIG1lbnUgZWxlbWVudHMgYW5kIGFjdGl2YXRlcyB0aGUgY3VycmVudCBvbmUuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBzdHlsZU1lbnUoc2VjdGlvbiwgaW5kZXgpe1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYW5jaG9yc1tpbmRleF0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAvL2FjdGl2YXRpbmcgdGhlIG1lbnUgLyBuYXYgZWxlbWVudCBvbiBsb2FkXHJcbiAgICAgICAgICAgICAgICBpZihoYXNDbGFzcyhzZWN0aW9uLCBBQ1RJVkUpKXtcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZU1lbnVBbmROYXYob3B0aW9ucy5hbmNob3JzW2luZGV4XSwgaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL21vdmluZyB0aGUgbWVudSBvdXRzaWRlIHRoZSBtYWluIGNvbnRhaW5lciBpZiBpdCBpcyBpbnNpZGUgKGF2b2lkIHByb2JsZW1zIHdpdGggZml4ZWQgcG9zaXRpb25zIHdoZW4gdXNpbmcgQ1NTMyB0cmFuZm9ybXMpXHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMubWVudSAmJiBvcHRpb25zLmNzczMgJiYgY2xvc2VzdCgkKG9wdGlvbnMubWVudSlbMF0sIFdSQVBQRVJfU0VMKSAhPSBudWxsKXtcclxuICAgICAgICAgICAgICAgICQob3B0aW9ucy5tZW51KS5mb3JFYWNoKGZ1bmN0aW9uKG1lbnUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkYm9keS5hcHBlbmRDaGlsZChtZW51KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEFkZHMgaW50ZXJuYWwgY2xhc3NlcyB0byBiZSBhYmxlIHRvIHByb3ZpZGUgY3VzdG9taXphYmxlIHNlbGVjdG9yc1xyXG4gICAgICAgICoga2VlcGluZyB0aGUgbGluayB3aXRoIHRoZSBzdHlsZSBzaGVldC5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGFkZEludGVybmFsU2VsZWN0b3JzKCl7XHJcbiAgICAgICAgICAgIGFkZENsYXNzKCQob3B0aW9ucy5zZWN0aW9uU2VsZWN0b3IsIGNvbnRhaW5lciksIFNFQ1RJT04pO1xyXG4gICAgICAgICAgICBhZGRDbGFzcygkKG9wdGlvbnMuc2xpZGVTZWxlY3RvciwgY29udGFpbmVyKSwgU0xJREUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBDcmVhdGVzIHRoZSBjb250cm9sIGFycm93cyBmb3IgdGhlIGdpdmVuIHNlY3Rpb25cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVNsaWRlQXJyb3dzKHNlY3Rpb24pe1xyXG4gICAgICAgICAgICB2YXIgYXJyb3dzID0gW2NyZWF0ZUVsZW1lbnRGcm9tSFRNTCgnPGRpdiBjbGFzcz1cIicgKyBTTElERVNfQVJST1dfUFJFViArICdcIj48L2Rpdj4nKSwgY3JlYXRlRWxlbWVudEZyb21IVE1MKCc8ZGl2IGNsYXNzPVwiJyArIFNMSURFU19BUlJPV19ORVhUICsgJ1wiPjwvZGl2PicpXTtcclxuICAgICAgICAgICAgYWZ0ZXIoJChTTElERVNfV1JBUFBFUl9TRUwsIHNlY3Rpb24pWzBdLCBhcnJvd3MpO1xyXG5cclxuICAgICAgICAgICAgaWYob3B0aW9ucy5jb250cm9sQXJyb3dDb2xvciAhPT0gJyNmZmYnKXtcclxuICAgICAgICAgICAgICAgIGNzcygkKFNMSURFU19BUlJPV19ORVhUX1NFTCwgc2VjdGlvbiksIHsnYm9yZGVyLWNvbG9yJzogJ3RyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICcrb3B0aW9ucy5jb250cm9sQXJyb3dDb2xvcn0pO1xyXG4gICAgICAgICAgICAgICAgY3NzKCQoU0xJREVTX0FSUk9XX1BSRVZfU0VMLCBzZWN0aW9uKSwgeydib3JkZXItY29sb3InOiAndHJhbnNwYXJlbnQgJysgb3B0aW9ucy5jb250cm9sQXJyb3dDb2xvciArICcgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQnfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKCFvcHRpb25zLmxvb3BIb3Jpem9udGFsKXtcclxuICAgICAgICAgICAgICAgIGhpZGUoJChTTElERVNfQVJST1dfUFJFVl9TRUwsIHNlY3Rpb24pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBDcmVhdGVzIGEgdmVydGljYWwgbmF2aWdhdGlvbiBiYXIuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBhZGRWZXJ0aWNhbE5hdmlnYXRpb24oKXtcclxuICAgICAgICAgICAgdmFyIG5hdmlnYXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgbmF2aWdhdGlvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgU0VDVElPTl9OQVYpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRpdlVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcclxuICAgICAgICAgICAgbmF2aWdhdGlvbi5hcHBlbmRDaGlsZChkaXZVbCk7XHJcblxyXG4gICAgICAgICAgICBhcHBlbmRUbyhuYXZpZ2F0aW9uLCAkYm9keSk7XHJcbiAgICAgICAgICAgIHZhciBuYXYgPSAkKFNFQ1RJT05fTkFWX1NFTClbMF07XHJcblxyXG4gICAgICAgICAgICBhZGRDbGFzcyhuYXYsICdmcC0nICsgb3B0aW9ucy5uYXZpZ2F0aW9uUG9zaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgaWYob3B0aW9ucy5zaG93QWN0aXZlVG9vbHRpcCl7XHJcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhuYXYsIFNIT1dfQUNUSVZFX1RPT0xUSVApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgbGkgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJChTRUNUSU9OX1NFTCkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBsaW5rID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5hbmNob3JzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmsgPSBvcHRpb25zLmFuY2hvcnNbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGkgKz0gJzxsaT48YSBocmVmPVwiIycgKyBsaW5rICsgJ1wiPjxzcGFuIGNsYXNzPVwiZnAtc3Itb25seVwiPicgKyBnZXRCdWxsZXRMaW5rTmFtZShpLCAnU2VjdGlvbicpICsgJzwvc3Bhbj48c3Bhbj48L3NwYW4+PC9hPic7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gT25seSBhZGQgdG9vbHRpcCBpZiBuZWVkZWQgKGRlZmluZWQgYnkgdXNlcilcclxuICAgICAgICAgICAgICAgIHZhciB0b29sdGlwID0gb3B0aW9ucy5uYXZpZ2F0aW9uVG9vbHRpcHNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0b29sdGlwICE9PSAndW5kZWZpbmVkJyAmJiB0b29sdGlwICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpICs9ICc8ZGl2IGNsYXNzPVwiJyArIFNFQ1RJT05fTkFWX1RPT0xUSVAgKyAnIGZwLScgKyBvcHRpb25zLm5hdmlnYXRpb25Qb3NpdGlvbiArICdcIj4nICsgdG9vbHRpcCArICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxpICs9ICc8L2xpPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJCgndWwnLCBuYXYpWzBdLmlubmVySFRNTCA9IGxpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9hY3RpdmF0aW5nIHRoZSBjdXJyZW50IGFjdGl2ZSBzZWN0aW9uXHJcblxyXG4gICAgICAgICAgICB2YXIgYnVsbGV0ID0gJCgnbGknLCAkKFNFQ1RJT05fTkFWX1NFTClbMF0pW2luZGV4KCQoU0VDVElPTl9BQ1RJVkVfU0VMKVswXSwgU0VDVElPTl9TRUwpXTtcclxuICAgICAgICAgICAgYWRkQ2xhc3MoJCgnYScsIGJ1bGxldCksIEFDVElWRSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEdldHMgdGhlIG5hbWUgZm9yIHNjcmVlbiByZWFkZXJzIGZvciBhIHNlY3Rpb24vc2xpZGUgbmF2aWdhdGlvbiBidWxsZXQuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBnZXRCdWxsZXRMaW5rTmFtZShpLCBkZWZhdWx0TmFtZSwgaXRlbSl7XHJcbiAgICAgICAgICAgIHZhciBhbmNob3IgPSBkZWZhdWx0TmFtZSA9PT0gJ1NlY3Rpb24nID8gb3B0aW9ucy5hbmNob3JzW2ldIDogaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtYW5jaG9yJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLm5hdmlnYXRpb25Ub29sdGlwc1tpXVxyXG4gICAgICAgICAgICAgICAgfHwgYW5jaG9yXHJcbiAgICAgICAgICAgICAgICB8fCBkZWZhdWx0TmFtZSArICcgJyArIChpKzEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAqIEVuYWJsZXMgdGhlIFlvdXR1YmUgdmlkZW9zIEFQSSBzbyB3ZSBjYW4gY29udHJvbCB0aGVpciBmbG93IGlmIG5lY2Vzc2FyeS5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGVuYWJsZVlvdXR1YmVBUEkoKXtcclxuICAgICAgICAgICAgJCgnaWZyYW1lW3NyYyo9XCJ5b3V0dWJlLmNvbS9lbWJlZC9cIl0nLCBjb250YWluZXIpLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XHJcbiAgICAgICAgICAgICAgICBhZGRVUkxQYXJhbShpdGVtLCAnZW5hYmxlanNhcGk9MScpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogQWRkcyBhIG5ldyBwYXJhbWV0ZXIgYW5kIGl0cyB2YWx1ZSB0byB0aGUgYHNyY2Agb2YgYSBnaXZlbiBlbGVtZW50XHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBhZGRVUkxQYXJhbShlbGVtZW50LCBuZXdQYXJhbSl7XHJcbiAgICAgICAgICAgIHZhciBvcmlnaW5hbFNyYyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzcmMnKTtcclxuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NyYycsIG9yaWdpbmFsU3JjICsgZ2V0VXJsUGFyYW1TaWduKG9yaWdpbmFsU3JjKSArIG5ld1BhcmFtKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgKiBSZXR1cm5zIHRoZSBwcmVmaXggc2lnbiB0byB1c2UgZm9yIGEgbmV3IHBhcmFtZXRlciBpbiBhbiBleGlzdGVuIFVSTC5cclxuICAgICAgICAqXHJcbiAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9ICA/IHwgJlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0VXJsUGFyYW1TaWduKHVybCl7XHJcbiAgICAgICAgICAgIHJldHVybiAoICEvXFw/Ly50ZXN0KCB1cmwgKSApID8gJz8nIDogJyYnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBBY3Rpb25zIGFuZCBjYWxsYmFja3MgdG8gZmlyZSBhZnRlclJlbmRlclxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gYWZ0ZXJSZW5kZXJBY3Rpb25zKCl7XHJcbiAgICAgICAgICAgIHZhciBzZWN0aW9uID0gJChTRUNUSU9OX0FDVElWRV9TRUwpWzBdO1xyXG5cclxuICAgICAgICAgICAgYWRkQ2xhc3Moc2VjdGlvbiwgQ09NUExFVEVMWSk7XHJcblxyXG4gICAgICAgICAgICBsYXp5TG9hZChzZWN0aW9uKTtcclxuICAgICAgICAgICAgbGF6eUxvYWRPdGhlcnMoKTtcclxuICAgICAgICAgICAgcGxheU1lZGlhKHNlY3Rpb24pO1xyXG5cclxuICAgICAgICAgICAgaWYob3B0aW9ucy5zY3JvbGxPdmVyZmxvdyl7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLnNjcm9sbE92ZXJmbG93SGFuZGxlci5hZnRlckxvYWQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoaXNEZXN0aW55VGhlU3RhcnRpbmdTZWN0aW9uKCkgJiYgaXNGdW5jdGlvbihvcHRpb25zLmFmdGVyTG9hZCkgKXtcclxuICAgICAgICAgICAgICAgIGZpcmVDYWxsYmFjaygnYWZ0ZXJMb2FkJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVNlY3Rpb246IHNlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogc2VjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IG51bGwsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGNhbGxiYWNrICh0byBiZSByZW1vdmVkIGluIGEgZnV0dXJlISlcclxuICAgICAgICAgICAgICAgICAgICBhbmNob3JMaW5rOiBzZWN0aW9uLmdldEF0dHJpYnV0ZSgnZGF0YS1hbmNob3InKSxcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uSW5kZXg6IGluZGV4KHNlY3Rpb24sIFNFQ1RJT05fU0VMKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKGlzRnVuY3Rpb24ob3B0aW9ucy5hZnRlclJlbmRlcikpe1xyXG4gICAgICAgICAgICAgICAgZmlyZUNhbGxiYWNrKCdhZnRlclJlbmRlcicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIERldGVybWluZXMgaWYgdGhlIFVSTCBhbmNob3IgZGVzdGlueSBpcyB0aGUgc3RhcnRpbmcgc2VjdGlvbiAodGhlIG9uZSB1c2luZyAnYWN0aXZlJyBjbGFzcyBiZWZvcmUgaW5pdGlhbGl6YXRpb24pXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBpc0Rlc3RpbnlUaGVTdGFydGluZ1NlY3Rpb24oKXtcclxuICAgICAgICAgICAgdmFyIGFuY2hvciA9IGdldEFuY2hvcnNVUkwoKTtcclxuICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uU2VjdGlvbiA9IGdldFNlY3Rpb25CeUFuY2hvcihhbmNob3Iuc2VjdGlvbik7XHJcbiAgICAgICAgICAgIHJldHVybiAhYW5jaG9yLnNlY3Rpb24gfHwgIWRlc3RpbmF0aW9uU2VjdGlvbiB8fCB0eXBlb2YgZGVzdGluYXRpb25TZWN0aW9uICE9PSd1bmRlZmluZWQnICYmIGluZGV4KGRlc3RpbmF0aW9uU2VjdGlvbikgPT09IGluZGV4KHN0YXJ0aW5nU2VjdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaXNTY3JvbGxpbmcgPSBmYWxzZTtcclxuICAgICAgICB2YXIgbGFzdFNjcm9sbCA9IDA7XHJcblxyXG4gICAgICAgIC8vd2hlbiBzY3JvbGxpbmcuLi5cclxuICAgICAgICBmdW5jdGlvbiBzY3JvbGxIYW5kbGVyKCl7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50U2VjdGlvbjtcclxuXHJcbiAgICAgICAgICAgIGlmKGlzUmVzaXppbmcpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZighb3B0aW9ucy5hdXRvU2Nyb2xsaW5nIHx8IG9wdGlvbnMuc2Nyb2xsQmFyKXtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U2Nyb2xsID0gZ2V0U2Nyb2xsVG9wKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsRGlyZWN0aW9uID0gZ2V0U2Nyb2xsRGlyZWN0aW9uKGN1cnJlbnRTY3JvbGwpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZpc2libGVTZWN0aW9uSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjcmVlbl9taWQgPSBjdXJyZW50U2Nyb2xsICsgKGdldFdpbmRvd0hlaWdodCgpIC8gMi4wKTtcclxuICAgICAgICAgICAgICAgIHZhciBpc0F0Qm90dG9tID0gJGJvZHkub2Zmc2V0SGVpZ2h0IC0gZ2V0V2luZG93SGVpZ2h0KCkgPT09IGN1cnJlbnRTY3JvbGw7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VjdGlvbnMgPSAgJChTRUNUSU9OX1NFTCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy93aGVuIHVzaW5nIGBhdXRvLWhlaWdodGAgZm9yIGEgc21hbGwgbGFzdCBzZWN0aW9uIGl0IHdvbid0IGJlIGNlbnRlcmVkIGluIHRoZSB2aWV3cG9ydFxyXG4gICAgICAgICAgICAgICAgaWYoaXNBdEJvdHRvbSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZVNlY3Rpb25JbmRleCA9IHNlY3Rpb25zLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2lzIGF0IHRvcD8gd2hlbiB1c2luZyBgYXV0by1oZWlnaHRgIGZvciBhIHNtYWxsIGZpcnN0IHNlY3Rpb24gaXQgd29uJ3QgYmUgY2VudGVyZWQgaW4gdGhlIHZpZXdwb3J0XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKCFjdXJyZW50U2Nyb2xsKXtcclxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlU2VjdGlvbkluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL3Rha2luZyB0aGUgc2VjdGlvbiB3aGljaCBpcyBzaG93aW5nIG1vcmUgY29udGVudCBpbiB0aGUgdmlld3BvcnRcclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWN0aW9ucy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VjdGlvbiA9IHNlY3Rpb25zW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGljayB0aGUgdGhlIGxhc3Qgc2VjdGlvbiB3aGljaCBwYXNzZXMgdGhlIG1pZGRsZSBsaW5lIG9mIHRoZSBzY3JlZW4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWN0aW9uLm9mZnNldFRvcCA8PSBzY3JlZW5fbWlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlU2VjdGlvbkluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZihpc0NvbXBsZXRlbHlJblZpZXdQb3J0KHNjcm9sbERpcmVjdGlvbikpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFoYXNDbGFzcygkKFNFQ1RJT05fQUNUSVZFX1NFTClbMF0sIENPTVBMRVRFTFkpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoJChTRUNUSU9OX0FDVElWRV9TRUwpWzBdLCBDT01QTEVURUxZKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3Moc2libGluZ3MoJChTRUNUSU9OX0FDVElWRV9TRUwpWzBdKSwgQ09NUExFVEVMWSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vZ2V0aW5nIHRoZSBsYXN0IG9uZSwgdGhlIGN1cnJlbnQgb25lIG9uIHRoZSBzY3JlZW5cclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTZWN0aW9uID0gc2VjdGlvbnNbdmlzaWJsZVNlY3Rpb25JbmRleF07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zZXR0aW5nIHRoZSB2aXNpYmxlIHNlY3Rpb24gYXMgYWN0aXZlIHdoZW4gbWFudWFsbHkgc2Nyb2xsaW5nXHJcbiAgICAgICAgICAgICAgICAvL2V4ZWN1dGluZyBvbmx5IG9uY2UgdGhlIGZpcnN0IHRpbWUgd2UgcmVhY2ggdGhlIHNlY3Rpb25cclxuICAgICAgICAgICAgICAgIGlmKCFoYXNDbGFzcyhjdXJyZW50U2VjdGlvbiwgQUNUSVZFKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNTY3JvbGxpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsZWF2aW5nU2VjdGlvbiA9ICQoU0VDVElPTl9BQ1RJVkVfU0VMKVswXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGVhdmluZ1NlY3Rpb25JbmRleCA9IGluZGV4KGxlYXZpbmdTZWN0aW9uLCBTRUNUSU9OX1NFTCkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB5TW92ZW1lbnQgPSBnZXRZbW92ZW1lbnQoY3VycmVudFNlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmNob3JMaW5rICA9IGN1cnJlbnRTZWN0aW9uLmdldEF0dHJpYnV0ZSgnZGF0YS1hbmNob3InKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VjdGlvbkluZGV4ID0gaW5kZXgoY3VycmVudFNlY3Rpb24sIFNFQ1RJT05fU0VMKSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2ZVNsaWRlID0gJChTTElERV9BQ1RJVkVfU0VMLCBjdXJyZW50U2VjdGlvbilbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlQW5jaG9yTGluaztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2tzUGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVTZWN0aW9uOiBsZWF2aW5nU2VjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbkluZGV4OiBzZWN0aW9uSW5kZXggLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvckxpbms6IGFuY2hvckxpbmssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGN1cnJlbnRTZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWF2aW5nU2VjdGlvbjogbGVhdmluZ1NlY3Rpb25JbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiB5TW92ZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihhY3RpdmVTbGlkZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlQW5jaG9yTGluayA9IGFjdGl2ZVNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1hbmNob3InKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGluZGV4KGFjdGl2ZVNsaWRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGNhblNjcm9sbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGN1cnJlbnRTZWN0aW9uLCBBQ1RJVkUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhzaWJsaW5ncyhjdXJyZW50U2VjdGlvbiksIEFDVElWRSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpc0Z1bmN0aW9uKCBvcHRpb25zLm9uTGVhdmUgKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJlQ2FsbGJhY2soJ29uTGVhdmUnLCBjYWxsYmFja3NQYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzRnVuY3Rpb24oIG9wdGlvbnMuYWZ0ZXJMb2FkICkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyZUNhbGxiYWNrKCdhZnRlckxvYWQnLCBjYWxsYmFja3NQYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wTWVkaWEobGVhdmluZ1NlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXp5TG9hZChjdXJyZW50U2VjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlNZWRpYShjdXJyZW50U2VjdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZU1lbnVBbmROYXYoYW5jaG9yTGluaywgc2VjdGlvbkluZGV4IC0gMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihvcHRpb25zLmFuY2hvcnMubGVuZ3RoKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbmVlZGVkIHRvIGVudGVyIGluIGhhc2hDaGFuZ2UgZXZlbnQgd2hlbiB1c2luZyB0aGUgbWVudSB3aXRoIGFuY2hvciBsaW5rc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNjcm9sbGVkRGVzdGlueSA9IGFuY2hvckxpbms7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0U3RhdGUoc2xpZGVJbmRleCwgc2xpZGVBbmNob3JMaW5rLCBhbmNob3JMaW5rLCBzZWN0aW9uSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9zbWFsbCB0aW1lb3V0IGluIG9yZGVyIHRvIGF2b2lkIGVudGVyaW5nIGluIGhhc2hDaGFuZ2UgZXZlbnQgd2hlbiBzY3JvbGxpbmcgaXMgbm90IGZpbmlzaGVkIHlldFxyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzY3JvbGxJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2Nyb2xsaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZihvcHRpb25zLmZpdFRvU2VjdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9mb3IgdGhlIGF1dG8gYWRqdXN0IG9mIHRoZSB2aWV3cG9ydCB0byBmaXQgYSB3aG9sZSBzZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbElkMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbElkMiA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVja2luZyBpdCBhZ2FpbiBpbiBjYXNlIGl0IGNoYW5nZWQgZHVyaW5nIHRoZSBkZWxheVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihvcHRpb25zLmZpdFRvU2VjdGlvbiAmJlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaXMgdGhlIGRlc3RpbmF0aW9uIGVsZW1lbnQgYmlnZ2VyIHRoYW4gdGhlIHZpZXdwb3J0P1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChTRUNUSU9OX0FDVElWRV9TRUwpWzBdLm9mZnNldEhlaWdodCA8PSB3aW5kb3dzSGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXRUb1NlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMuZml0VG9TZWN0aW9uRGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEZpdHMgdGhlIHNpdGUgdG8gdGhlIG5lYXJlc3QgYWN0aXZlIHNlY3Rpb25cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGZpdFRvU2VjdGlvbigpe1xyXG4gICAgICAgICAgICAvL2NoZWNraW5nIGZpdFRvU2VjdGlvbiBhZ2FpbiBpbiBjYXNlIGl0IHdhcyBzZXQgdG8gZmFsc2UgYmVmb3JlIHRoZSB0aW1lb3V0IGRlbGF5XHJcbiAgICAgICAgICAgIGlmKGNhblNjcm9sbCl7XHJcbiAgICAgICAgICAgICAgICAvL2FsbG93cyB0byBzY3JvbGwgdG8gYW4gYWN0aXZlIHNlY3Rpb24gYW5kXHJcbiAgICAgICAgICAgICAgICAvL2lmIHRoZSBzZWN0aW9uIGlzIGFscmVhZHkgYWN0aXZlLCB3ZSBwcmV2ZW50IGZpcmluZyBjYWxsYmFja3NcclxuICAgICAgICAgICAgICAgIGlzUmVzaXppbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHNjcm9sbFBhZ2UoJChTRUNUSU9OX0FDVElWRV9TRUwpWzBdKTtcclxuICAgICAgICAgICAgICAgIGlzUmVzaXppbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGFjdGl2ZSBzZWN0aW9uIGhhcyBzZWVuIGluIGl0cyB3aG9sZSBvciBub3QuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBpc0NvbXBsZXRlbHlJblZpZXdQb3J0KG1vdmVtZW50KXtcclxuICAgICAgICAgICAgdmFyIHRvcCA9ICQoU0VDVElPTl9BQ1RJVkVfU0VMKVswXS5vZmZzZXRUb3A7XHJcbiAgICAgICAgICAgIHZhciBib3R0b20gPSB0b3AgKyBnZXRXaW5kb3dIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmKG1vdmVtZW50ID09ICd1cCcpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvdHRvbSA+PSAoZ2V0U2Nyb2xsVG9wKCkgKyBnZXRXaW5kb3dIZWlnaHQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRvcCA8PSBnZXRTY3JvbGxUb3AoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc2VjdGlvbiBpcyBpbiB0aGUgdmlld3BvcnQgb3Igbm90LlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gaXNTZWN0aW9uSW5WaWV3cG9ydCAoZWwpIHtcclxuICAgICAgICAgICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgdmFyIHRvcCA9IHJlY3QudG9wO1xyXG4gICAgICAgICAgICB2YXIgYm90dG9tID0gcmVjdC5ib3R0b207XHJcblxyXG4gICAgICAgICAgICAvL3NvbWV0aW1lcyB0aGVyZSdzIGEgMXB4IG9mZnNldCBvbiB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gZXZlbiB3aGVuIHRoZSBcclxuICAgICAgICAgICAgLy9zZWN0aW9uJ3MgaGVpZ2h0IGlzIHRoZSB3aW5kb3cuaW5uZXJIZWlnaHQgb25lLiBJIGd1ZXNzIGJlY2F1c2UgcGl4ZWxzIHdvbid0IGFsbG93IGRlY2ltYWxzLlxyXG4gICAgICAgICAgICAvL3VzaW5nIHRoaXMgcHJldmVudHMgZnJvbSBsYXp5TG9hZGluZyB0aGUgc2VjdGlvbiB0aGF0IGlzIG5vdCB5ZXQgdmlzaWJsZSBcclxuICAgICAgICAgICAgLy8ob25seSAxIHBpeGVsIG9mZnNldCBpcylcclxuICAgICAgICAgICAgdmFyIHBpeGVsT2Zmc2V0ID0gMjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBpc1RvcEluVmlldyA9IHRvcCArIHBpeGVsT2Zmc2V0IDwgd2luZG93c0hlaWdodCAmJiB0b3AgPiAwO1xyXG4gICAgICAgICAgICB2YXIgaXNCb3R0b21JblZpZXcgPSBib3R0b20gPiBwaXhlbE9mZnNldCAmJiBib3R0b20gPCB3aW5kb3dzSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGlzVG9wSW5WaWV3IHx8IGlzQm90dG9tSW5WaWV3O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBHZXRzIHRoZSBkaXJlY3RvbiBvZiB0aGUgdGhlIHNjcm9sbGluZyBmaXJlZCBieSB0aGUgc2Nyb2xsIGV2ZW50LlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0U2Nyb2xsRGlyZWN0aW9uKGN1cnJlbnRTY3JvbGwpe1xyXG4gICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gY3VycmVudFNjcm9sbCA+IGxhc3RTY3JvbGwgPyAnZG93bicgOiAndXAnO1xyXG5cclxuICAgICAgICAgICAgbGFzdFNjcm9sbCA9IGN1cnJlbnRTY3JvbGw7XHJcblxyXG4gICAgICAgICAgICAvL25lZWRlZCBmb3IgYXV0by1oZWlnaHQgc2VjdGlvbnMgdG8gZGV0ZXJtaW5lIGlmIHdlIHdhbnQgdG8gc2Nyb2xsIHRvIHRoZSB0b3Agb3IgYm90dG9tIG9mIHRoZSBkZXN0aW5hdGlvblxyXG4gICAgICAgICAgICBwcmV2aW91c0Rlc3RUb3AgPSBjdXJyZW50U2Nyb2xsO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogRGV0ZXJtaW5lcyB0aGUgd2F5IG9mIHNjcm9sbGluZyB1cCBvciBkb3duOlxyXG4gICAgICAgICogYnkgJ2F1dG9tYXRpY2FsbHknIHNjcm9sbGluZyBhIHNlY3Rpb24gb3IgYnkgdXNpbmcgdGhlIGRlZmF1bHQgYW5kIG5vcm1hbCBzY3JvbGxpbmcuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBzY3JvbGxpbmcodHlwZSl7XHJcbiAgICAgICAgICAgIGlmICghaXNTY3JvbGxBbGxvd2VkLm1bdHlwZV0pe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgc2Nyb2xsU2VjdGlvbiA9ICh0eXBlID09PSAnZG93bicpID8gbW92ZVNlY3Rpb25Eb3duIDogbW92ZVNlY3Rpb25VcDtcclxuXHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3cpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbGFibGUgPSBvcHRpb25zLnNjcm9sbE92ZXJmbG93SGFuZGxlci5zY3JvbGxhYmxlKCQoU0VDVElPTl9BQ1RJVkVfU0VMKVswXSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hlY2sgPSAodHlwZSA9PT0gJ2Rvd24nKSA/ICdib3R0b20nIDogJ3RvcCc7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoc2Nyb2xsYWJsZSAhPSBudWxsICl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pcyB0aGUgc2Nyb2xsYmFyIGF0IHRoZSBzdGFydC9lbmQgb2YgdGhlIHNjcm9sbD9cclxuICAgICAgICAgICAgICAgICAgICBpZihvcHRpb25zLnNjcm9sbE92ZXJmbG93SGFuZGxlci5pc1Njcm9sbGVkKGNoZWNrLCBzY3JvbGxhYmxlKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFNlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZWQgdXAvZG93blxyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFNlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAvLyBtb3ZlZCB1cC9kb3duXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxTZWN0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgKiBQcmV2ZW50aW5nIGJvdW5jaW5nIGluIGlPUyAjMjI4NVxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gcHJldmVudEJvdW5jaW5nKGUpe1xyXG4gICAgICAgICAgICBpZihvcHRpb25zLmF1dG9TY3JvbGxpbmcgJiYgaXNSZWFsbHlUb3VjaChlKSAmJiBpc1Njcm9sbEFsbG93ZWQubS51cCl7XHJcbiAgICAgICAgICAgICAgICAvL3ByZXZlbnRpbmcgdGhlIGVhc2luZyBvbiBpT1MgZGV2aWNlc1xyXG4gICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB0b3VjaFN0YXJ0WSA9IDA7XHJcbiAgICAgICAgdmFyIHRvdWNoU3RhcnRYID0gMDtcclxuICAgICAgICB2YXIgdG91Y2hFbmRZID0gMDtcclxuICAgICAgICB2YXIgdG91Y2hFbmRYID0gMDtcclxuXHJcbiAgICAgICAgLyogRGV0ZWN0aW5nIHRvdWNoIGV2ZW50c1xyXG5cclxuICAgICAgICAqIEFzIHdlIGFyZSBjaGFuZ2luZyB0aGUgdG9wIHByb3BlcnR5IG9mIHRoZSBwYWdlIG9uIHNjcm9sbGluZywgd2UgY2FuIG5vdCB1c2UgdGhlIHRyYWRpdGlvbmFsIHdheSB0byBkZXRlY3QgaXQuXHJcbiAgICAgICAgKiBUaGlzIHdheSwgdGhlIHRvdWNoc3RhcnQgYW5kIHRoZSB0b3VjaCBtb3ZlcyBzaG93cyBhbiBzbWFsbCBkaWZmZXJlbmNlIGJldHdlZW4gdGhlbSB3aGljaCBpcyB0aGVcclxuICAgICAgICAqIHVzZWQgb25lIHRvIGRldGVybWluZSB0aGUgZGlyZWN0aW9uLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gdG91Y2hNb3ZlSGFuZGxlcihlKXtcclxuICAgICAgICAgICAgdmFyIGFjdGl2ZVNlY3Rpb24gPSBjbG9zZXN0KGUudGFyZ2V0LCBTRUNUSU9OX1NFTCkgfHzCoCQoU0VDVElPTl9BQ1RJVkVfU0VMKVswXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc1JlYWxseVRvdWNoKGUpICkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuYXV0b1Njcm9sbGluZyl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9wcmV2ZW50aW5nIHRoZSBlYXNpbmcgb24gaU9TIGRldmljZXNcclxuICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdChlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hFdmVudHMgPSBnZXRFdmVudHNQYWdlKGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRvdWNoRW5kWSA9IHRvdWNoRXZlbnRzLnk7XHJcbiAgICAgICAgICAgICAgICB0b3VjaEVuZFggPSB0b3VjaEV2ZW50cy54O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vaWYgbW92ZW1lbnQgaW4gdGhlIFggYXh5cyBpcyBncmVhdGVyIHRoYW4gaW4gdGhlIFkgYW5kIHRoZSBjdXJyZWN0IHNlY3Rpb24gaGFzIHNsaWRlcy4uLlxyXG4gICAgICAgICAgICAgICAgaWYgKCQoU0xJREVTX1dSQVBQRVJfU0VMLCBhY3RpdmVTZWN0aW9uKS5sZW5ndGggJiYgTWF0aC5hYnModG91Y2hTdGFydFggLSB0b3VjaEVuZFgpID4gKE1hdGguYWJzKHRvdWNoU3RhcnRZIC0gdG91Y2hFbmRZKSkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9pcyB0aGUgbW92ZW1lbnQgZ3JlYXRlciB0aGFuIHRoZSBtaW5pbXVtIHJlc2lzdGFuY2UgdG8gc2Nyb2xsP1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2xpZGVNb3ZpbmcgJiYgTWF0aC5hYnModG91Y2hTdGFydFggLSB0b3VjaEVuZFgpID4gKGdldFdpbmRvd1dpZHRoKCkgLyAxMDAgKiBvcHRpb25zLnRvdWNoU2Vuc2l0aXZpdHkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b3VjaFN0YXJ0WCA+IHRvdWNoRW5kWCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXNTY3JvbGxBbGxvd2VkLm0ucmlnaHQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVTbGlkZVJpZ2h0KGFjdGl2ZVNlY3Rpb24pOyAvL25leHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzU2Nyb2xsQWxsb3dlZC5tLmxlZnQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVTbGlkZUxlZnQoYWN0aXZlU2VjdGlvbik7IC8vcHJldlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vdmVydGljYWwgc2Nyb2xsaW5nIChvbmx5IHdoZW4gYXV0b1Njcm9sbGluZyBpcyBlbmFibGVkKVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihvcHRpb25zLmF1dG9TY3JvbGxpbmcgJiYgY2FuU2Nyb2xsKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9pcyB0aGUgbW92ZW1lbnQgZ3JlYXRlciB0aGFuIHRoZSBtaW5pbXVtIHJlc2lzdGFuY2UgdG8gc2Nyb2xsP1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0b3VjaFN0YXJ0WSAtIHRvdWNoRW5kWSkgPiAod2luZG93LmlubmVySGVpZ2h0IC8gMTAwICogb3B0aW9ucy50b3VjaFNlbnNpdGl2aXR5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG91Y2hTdGFydFkgPiB0b3VjaEVuZFkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGluZygnZG93bicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRvdWNoRW5kWSA+IHRvdWNoU3RhcnRZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxpbmcoJ3VwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogQXMgSUUgPj0gMTAgZmlyZXMgYm90aCB0b3VjaCBhbmQgbW91c2UgZXZlbnRzIHdoZW4gdXNpbmcgYSBtb3VzZSBpbiBhIHRvdWNoc2NyZWVuXHJcbiAgICAgICAgKiB0aGlzIHdheSB3ZSBtYWtlIHN1cmUgdGhhdCBpcyByZWFsbHkgYSB0b3VjaCBldmVudCB3aGF0IElFIGlzIGRldGVjdGluZy5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGlzUmVhbGx5VG91Y2goZSl7XHJcbiAgICAgICAgICAgIC8vaWYgaXMgbm90IElFICAgfHwgIElFIGlzIGRldGVjdGluZyBgdG91Y2hgIG9yIGBwZW5gXHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZS5wb2ludGVyVHlwZSA9PT0gJ3VuZGVmaW5lZCcgfHwgZS5wb2ludGVyVHlwZSAhPSAnbW91c2UnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBIYW5kbGVyIGZvciB0aGUgdG91Y2ggc3RhcnQgZXZlbnQuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiB0b3VjaFN0YXJ0SGFuZGxlcihlKXtcclxuXHJcbiAgICAgICAgICAgIC8vc3RvcHBpbmcgdGhlIGF1dG8gc2Nyb2xsIHRvIGFkanVzdCB0byBhIHNlY3Rpb25cclxuICAgICAgICAgICAgaWYob3B0aW9ucy5maXRUb1NlY3Rpb24pe1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlQW5pbWF0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKGlzUmVhbGx5VG91Y2goZSkpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHRvdWNoRXZlbnRzID0gZ2V0RXZlbnRzUGFnZShlKTtcclxuICAgICAgICAgICAgICAgIHRvdWNoU3RhcnRZID0gdG91Y2hFdmVudHMueTtcclxuICAgICAgICAgICAgICAgIHRvdWNoU3RhcnRYID0gdG91Y2hFdmVudHMueDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBHZXRzIHRoZSBhdmVyYWdlIG9mIHRoZSBsYXN0IGBudW1iZXJgIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheS5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldEF2ZXJhZ2UoZWxlbWVudHMsIG51bWJlcil7XHJcbiAgICAgICAgICAgIHZhciBzdW0gPSAwO1xyXG5cclxuICAgICAgICAgICAgLy90YWtpbmcgYG51bWJlcmAgZWxlbWVudHMgZnJvbSB0aGUgZW5kIHRvIG1ha2UgdGhlIGF2ZXJhZ2UsIGlmIHRoZXJlIGFyZSBub3QgZW5vdWdodCwgMVxyXG4gICAgICAgICAgICB2YXIgbGFzdEVsZW1lbnRzID0gZWxlbWVudHMuc2xpY2UoTWF0aC5tYXgoZWxlbWVudHMubGVuZ3RoIC0gbnVtYmVyLCAxKSk7XHJcblxyXG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbGFzdEVsZW1lbnRzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIHN1bSA9IHN1bSArIGxhc3RFbGVtZW50c1tpXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChzdW0vbnVtYmVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERldGVjdGluZyBtb3VzZXdoZWVsIHNjcm9sbGluZ1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogaHR0cDovL2Jsb2dzLnNpdGVwb2ludHN0YXRpYy5jb20vZXhhbXBsZXMvdGVjaC9tb3VzZS13aGVlbC9pbmRleC5odG1sXHJcbiAgICAgICAgICogaHR0cDovL3d3dy5zaXRlcG9pbnQuY29tL2h0bWw1LWphdmFzY3JpcHQtbW91c2Utd2hlZWwvXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIHByZXZUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE1vdXNlV2hlZWxIYW5kbGVyKGUpIHtcclxuICAgICAgICAgICAgdmFyIGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgdmFyIGlzTm9ybWFsU2Nyb2xsID0gaGFzQ2xhc3MoJChDT01QTEVURUxZX1NFTClbMF0sIE5PUk1BTF9TQ1JPTEwpO1xyXG5cclxuICAgICAgICAgICAgLy9pcyBzY3JvbGwgYWxsb3dlZD9cclxuICAgICAgICAgICAgaWYgKCFpc1Njcm9sbEFsbG93ZWQubS5kb3duICYmICFpc1Njcm9sbEFsbG93ZWQubS51cCkge1xyXG4gICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQoZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vYXV0b3Njcm9sbGluZyBhbmQgbm90IHpvb21pbmc/XHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMuYXV0b1Njcm9sbGluZyAmJiAhY29udHJvbFByZXNzZWQgJiYgIWlzTm9ybWFsU2Nyb2xsKXtcclxuICAgICAgICAgICAgICAgIC8vIGNyb3NzLWJyb3dzZXIgd2hlZWwgZGVsdGFcclxuICAgICAgICAgICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGUud2hlZWxEZWx0YSB8fCAtZS5kZWx0YVkgfHwgLWUuZGV0YWlsO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gTWF0aC5tYXgoLTEsIE1hdGgubWluKDEsIHZhbHVlKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGhvcml6b250YWxEZXRlY3Rpb24gPSB0eXBlb2YgZS53aGVlbERlbHRhWCAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGUuZGVsdGFYICE9PSAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgICAgIHZhciBpc1Njcm9sbGluZ1ZlcnRpY2FsbHkgPSAoTWF0aC5hYnMoZS53aGVlbERlbHRhWCkgPCBNYXRoLmFicyhlLndoZWVsRGVsdGEpKSB8fCAoTWF0aC5hYnMoZS5kZWx0YVggKSA8IE1hdGguYWJzKGUuZGVsdGFZKSB8fCAhaG9yaXpvbnRhbERldGVjdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9MaW1pdGluZyB0aGUgYXJyYXkgdG8gMTUwIChsZXRzIG5vdCB3YXN0ZSBtZW1vcnkhKVxyXG4gICAgICAgICAgICAgICAgaWYoc2Nyb2xsaW5ncy5sZW5ndGggPiAxNDkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbGluZ3Muc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL2tlZXBpbmcgcmVjb3JkIG9mIHRoZSBwcmV2aW91cyBzY3JvbGxpbmdzXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxpbmdzLnB1c2goTWF0aC5hYnModmFsdWUpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3ByZXZlbnRpbmcgdG8gc2Nyb2xsIHRoZSBzaXRlIG9uIG1vdXNlIHdoZWVsIHdoZW4gc2Nyb2xsYmFyIGlzIHByZXNlbnRcclxuICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuc2Nyb2xsQmFyKXtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdChlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL3RpbWUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBsYXN0IHNjcm9sbCBhbmQgdGhlIGN1cnJlbnQgb25lXHJcbiAgICAgICAgICAgICAgICB2YXIgdGltZURpZmYgPSBjdXJUaW1lLXByZXZUaW1lO1xyXG4gICAgICAgICAgICAgICAgcHJldlRpbWUgPSBjdXJUaW1lO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vaGF2ZW4ndCB0aGV5IHNjcm9sbGVkIGluIGEgd2hpbGU/XHJcbiAgICAgICAgICAgICAgICAvLyhlbm91Z2ggdG8gYmUgY29uc2lkZXIgYSBkaWZmZXJlbnQgc2Nyb2xsaW5nIGFjdGlvbiB0byBzY3JvbGwgYW5vdGhlciBzZWN0aW9uKVxyXG4gICAgICAgICAgICAgICAgaWYodGltZURpZmYgPiAyMDApe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZW1wdHlpbmcgdGhlIGFycmF5LCB3ZSBkb250IGNhcmUgYWJvdXQgb2xkIHNjcm9sbGluZ3MgZm9yIG91ciBhdmVyYWdlc1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbGluZ3MgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZihjYW5TY3JvbGwpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhdmVyYWdlRW5kID0gZ2V0QXZlcmFnZShzY3JvbGxpbmdzLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF2ZXJhZ2VNaWRkbGUgPSBnZXRBdmVyYWdlKHNjcm9sbGluZ3MsIDcwKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXNBY2NlbGVyYXRpbmcgPSBhdmVyYWdlRW5kID49IGF2ZXJhZ2VNaWRkbGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vdG8gYXZvaWQgZG91YmxlIHN3aXBlcy4uLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGlzQWNjZWxlcmF0aW5nICYmIGlzU2Nyb2xsaW5nVmVydGljYWxseSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2Nyb2xsaW5nIGRvd24/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWx0YSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGluZygnZG93bicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zY3JvbGxpbmcgdXA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGluZygndXAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMuZml0VG9TZWN0aW9uKXtcclxuICAgICAgICAgICAgICAgIC8vc3RvcHBpbmcgdGhlIGF1dG8gc2Nyb2xsIHRvIGFkanVzdCB0byBhIHNlY3Rpb25cclxuICAgICAgICAgICAgICAgIGFjdGl2ZUFuaW1hdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFNsaWRlcyBhIHNsaWRlciB0byB0aGUgZ2l2ZW4gZGlyZWN0aW9uLlxyXG4gICAgICAgICogT3B0aW9uYWwgYHNlY3Rpb25gIHBhcmFtLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gbW92ZVNsaWRlKGRpcmVjdGlvbiwgc2VjdGlvbil7XHJcbiAgICAgICAgICAgIHZhciBhY3RpdmVTZWN0aW9uID0gc2VjdGlvbiA9PSBudWxsID8gJChTRUNUSU9OX0FDVElWRV9TRUwpWzBdIDogc2VjdGlvbjtcclxuICAgICAgICAgICAgdmFyIHNsaWRlcyA9ICQoU0xJREVTX1dSQVBQRVJfU0VMLCBhY3RpdmVTZWN0aW9uKVswXTtcclxuXHJcbiAgICAgICAgICAgIC8vIG1vcmUgdGhhbiBvbmUgc2xpZGUgbmVlZGVkIGFuZCBub3RoaW5nIHNob3VsZCBiZSBzbGlkaW5nXHJcbiAgICAgICAgICAgIGlmIChzbGlkZXMgPT0gbnVsbCB8fCBzbGlkZU1vdmluZyB8fCAkKFNMSURFX1NFTCwgc2xpZGVzKS5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50U2xpZGUgPSAkKFNMSURFX0FDVElWRV9TRUwsIHNsaWRlcylbMF07XHJcbiAgICAgICAgICAgIHZhciBkZXN0aW55ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmKGRpcmVjdGlvbiA9PT0gJ2xlZnQnKXtcclxuICAgICAgICAgICAgICAgIGRlc3RpbnkgPSBwcmV2VW50aWwoY3VycmVudFNsaWRlLCBTTElERV9TRUwpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGRlc3RpbnkgPSBuZXh0VW50aWwoY3VycmVudFNsaWRlLCBTTElERV9TRUwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2lzbid0IHRoZXJlIGEgbmV4dCBzbGlkZSBpbiB0aGUgc2VjdWVuY2U/XHJcbiAgICAgICAgICAgIGlmKGRlc3RpbnkgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgICAgICAvL3Jlc3BlY3QgbG9vcEhvcml6b250YWwgc2V0dGluXHJcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMubG9vcEhvcml6b250YWwpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVTaWJsaW5ncyA9IHNpYmxpbmdzKGN1cnJlbnRTbGlkZSk7XHJcbiAgICAgICAgICAgICAgICBpZihkaXJlY3Rpb24gPT09ICdsZWZ0Jyl7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVzdGlueSA9IHNsaWRlU2libGluZ3Nbc2xpZGVTaWJsaW5ncy5sZW5ndGggLSAxXTsgLy9sYXN0XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBkZXN0aW55ID0gc2xpZGVTaWJsaW5nc1swXTsgLy9maXJzdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzbGlkZU1vdmluZyA9IHRydWUgJiYgIUZQLnRlc3QuaXNUZXN0aW5nO1xyXG4gICAgICAgICAgICBsYW5kc2NhcGVTY3JvbGwoc2xpZGVzLCBkZXN0aW55LCBkaXJlY3Rpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBNYWludGFpbnMgdGhlIGFjdGl2ZSBzbGlkZXMgaW4gdGhlIHZpZXdwb3J0XHJcbiAgICAgICAgKiAoQmVjYXVzZSB0aGUgYHNjcm9sbGAgYW5pbWF0aW9uIG1pZ2h0IGdldCBsb3N0IHdpdGggc29tZSBhY3Rpb25zLCBzdWNoIGFzIHdoZW4gdXNpbmcgY29udGludW91c1ZlcnRpY2FsKVxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24ga2VlcFNsaWRlc1Bvc2l0aW9uKCl7XHJcbiAgICAgICAgICAgIHZhciBhY3RpdmVTbGlkZXMgPSAkKFNMSURFX0FDVElWRV9TRUwpO1xyXG4gICAgICAgICAgICBmb3IoIHZhciBpID0wOyBpPGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBzaWxlbnRMYW5kc2NhcGVTY3JvbGwoYWN0aXZlU2xpZGVzW2ldLCAnaW50ZXJuYWwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHByZXZpb3VzRGVzdFRvcCA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBSZXR1cm5zIHRoZSBkZXN0aW5hdGlvbiBZIHBvc2l0aW9uIGJhc2VkIG9uIHRoZSBzY3JvbGxpbmcgZGlyZWN0aW9uIGFuZFxyXG4gICAgICAgICogdGhlIGhlaWdodCBvZiB0aGUgc2VjdGlvbi5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldERlc3RpbmF0aW9uUG9zaXRpb24oZWxlbWVudCl7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50SGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50VG9wID0gZWxlbWVudC5vZmZzZXRUb3A7XHJcblxyXG4gICAgICAgICAgICAvL3RvcCBvZiB0aGUgZGVzaW5hdGlvbiB3aWxsIGJlIGF0IHRoZSB0b3Agb2YgdGhlIHZpZXdwb3J0XHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IGVsZW1lbnRUb3A7XHJcbiAgICAgICAgICAgIHZhciBpc1Njcm9sbGluZ0Rvd24gPSAgZWxlbWVudFRvcCA+IHByZXZpb3VzRGVzdFRvcDtcclxuICAgICAgICAgICAgdmFyIHNlY3Rpb25Cb3R0b20gPSBwb3NpdGlvbiAtIHdpbmRvd3NIZWlnaHQgKyBlbGVtZW50SGVpZ2h0O1xyXG4gICAgICAgICAgICB2YXIgYmlnU2VjdGlvbnNEZXN0aW5hdGlvbiA9IG9wdGlvbnMuYmlnU2VjdGlvbnNEZXN0aW5hdGlvbjtcclxuXHJcbiAgICAgICAgICAgIC8vaXMgdGhlIGRlc3RpbmF0aW9uIGVsZW1lbnQgYmlnZ2VyIHRoYW4gdGhlIHZpZXdwb3J0P1xyXG4gICAgICAgICAgICBpZihlbGVtZW50SGVpZ2h0ID4gd2luZG93c0hlaWdodCl7XHJcbiAgICAgICAgICAgICAgICAvL3Njcm9sbGluZyB1cD9cclxuICAgICAgICAgICAgICAgIGlmKCFpc1Njcm9sbGluZ0Rvd24gJiYgIWJpZ1NlY3Rpb25zRGVzdGluYXRpb24gfHwgYmlnU2VjdGlvbnNEZXN0aW5hdGlvbiA9PT0gJ2JvdHRvbScgKXtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHNlY3Rpb25Cb3R0b207XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vc2VjdGlvbnMgZXF1YWwgb3Igc21hbGxlciB0aGFuIHRoZSB2aWV3cG9ydCBoZWlnaHQgJiYgc2Nyb2xsaW5nIGRvd24/IHx8ICBpcyByZXNpemluZyBhbmQgaXRzIGluIHRoZSBsYXN0IHNlY3Rpb25cclxuICAgICAgICAgICAgZWxzZSBpZihpc1Njcm9sbGluZ0Rvd24gfHwgKGlzUmVzaXppbmcgJiYgbmV4dChlbGVtZW50KSA9PSBudWxsKSApe1xyXG4gICAgICAgICAgICAgICAgLy9UaGUgYm90dG9tIG9mIHRoZSBkZXN0aW5hdGlvbiB3aWxsIGJlIGF0IHRoZSBib3R0b20gb2YgdGhlIHZpZXdwb3J0XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHNlY3Rpb25Cb3R0b207XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgIEtlZXBpbmcgcmVjb3JkIG9mIHRoZSBsYXN0IHNjcm9sbGVkIHBvc2l0aW9uIHRvIGRldGVybWluZSB0aGUgc2Nyb2xsaW5nIGRpcmVjdGlvbi5cclxuICAgICAgICAgICAgTm8gY29udmVudGlvbmFsIG1ldGhvZHMgY2FuIGJlIHVzZWQgYXMgdGhlIHNjcm9sbCBiYXIgbWlnaHQgbm90IGJlIHByZXNlbnRcclxuICAgICAgICAgICAgQU5EIHRoZSBzZWN0aW9uIG1pZ2h0IG5vdCBiZSBhY3RpdmUgaWYgaXQgaXMgYXV0by1oZWlnaHQgYW5kIGRpZG50IHJlYWNoIHRoZSBtaWRkbGVcclxuICAgICAgICAgICAgb2YgdGhlIHZpZXdwb3J0LlxyXG4gICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwcmV2aW91c0Rlc3RUb3AgPSBwb3NpdGlvbjtcclxuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBTY3JvbGxzIHRoZSBzaXRlIHRvIHRoZSBnaXZlbiBlbGVtZW50IGFuZCBzY3JvbGxzIHRvIHRoZSBzbGlkZSBpZiBhIGNhbGxiYWNrIGlzIGdpdmVuLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2Nyb2xsUGFnZShlbGVtZW50LCBjYWxsYmFjaywgaXNNb3ZlbWVudFVwKXtcclxuICAgICAgICAgICAgaWYoZWxlbWVudCA9PSBudWxsKXsgcmV0dXJuOyB9IC8vdGhlcmUncyBubyBlbGVtZW50IHRvIHNjcm9sbCwgbGVhdmluZyB0aGUgZnVuY3Rpb25cclxuXHJcbiAgICAgICAgICAgIHZhciBkdG9wID0gZ2V0RGVzdGluYXRpb25Qb3NpdGlvbihlbGVtZW50KTtcclxuICAgICAgICAgICAgdmFyIHNsaWRlQW5jaG9yTGluaztcclxuICAgICAgICAgICAgdmFyIHNsaWRlSW5kZXg7XHJcblxyXG4gICAgICAgICAgICAvL2xvY2FsIHZhcmlhYmxlc1xyXG4gICAgICAgICAgICB2YXIgdiA9IHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXHJcbiAgICAgICAgICAgICAgICBpc01vdmVtZW50VXA6IGlzTW92ZW1lbnRVcCxcclxuICAgICAgICAgICAgICAgIGR0b3A6IGR0b3AsXHJcbiAgICAgICAgICAgICAgICB5TW92ZW1lbnQ6IGdldFltb3ZlbWVudChlbGVtZW50KSxcclxuICAgICAgICAgICAgICAgIGFuY2hvckxpbms6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWFuY2hvcicpLFxyXG4gICAgICAgICAgICAgICAgc2VjdGlvbkluZGV4OiBpbmRleChlbGVtZW50LCBTRUNUSU9OX1NFTCksXHJcbiAgICAgICAgICAgICAgICBhY3RpdmVTbGlkZTogJChTTElERV9BQ1RJVkVfU0VMLCBlbGVtZW50KVswXSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZVNlY3Rpb246ICQoU0VDVElPTl9BQ1RJVkVfU0VMKVswXSxcclxuICAgICAgICAgICAgICAgIGxlYXZpbmdTZWN0aW9uOiBpbmRleCgkKFNFQ1RJT05fQUNUSVZFX1NFTCksIFNFQ1RJT05fU0VMKSArIDEsXHJcblxyXG4gICAgICAgICAgICAgICAgLy9jYWNoaW5nIHRoZSB2YWx1ZSBvZiBpc1Jlc2l6aW5nIGF0IHRoZSBtb21tZW50IHRoZSBmdW5jdGlvbiBpcyBjYWxsZWRcclxuICAgICAgICAgICAgICAgIC8vYmVjYXVzZSBpdCB3aWxsIGJlIGNoZWNrZWQgbGF0ZXIgaW5zaWRlIGEgc2V0VGltZW91dCBhbmQgdGhlIHZhbHVlIG1pZ2h0IGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgbG9jYWxJc1Jlc2l6aW5nOiBpc1Jlc2l6aW5nXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL3F1aXRpbmcgd2hlbiBkZXN0aW5hdGlvbiBzY3JvbGwgaXMgdGhlIHNhbWUgYXMgdGhlIGN1cnJlbnQgb25lXHJcbiAgICAgICAgICAgIGlmKCh2LmFjdGl2ZVNlY3Rpb24gPT0gZWxlbWVudCAmJiAhaXNSZXNpemluZykgfHwgKG9wdGlvbnMuc2Nyb2xsQmFyICYmIGdldFNjcm9sbFRvcCgpID09PSB2LmR0b3AgJiYgIWhhc0NsYXNzKGVsZW1lbnQsIEFVVE9fSEVJR0hUKSApKXsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAgICAgICBpZih2LmFjdGl2ZVNsaWRlICE9IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgc2xpZGVBbmNob3JMaW5rID0gdi5hY3RpdmVTbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtYW5jaG9yJyk7XHJcbiAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaW5kZXgodi5hY3RpdmVTbGlkZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vY2FsbGJhY2sgKG9uTGVhdmUpIGlmIHRoZSBzaXRlIGlzIG5vdCBqdXN0IHJlc2l6aW5nIGFuZCByZWFkanVzdGluZyB0aGUgc2xpZGVzXHJcbiAgICAgICAgICAgIGlmKCF2LmxvY2FsSXNSZXNpemluZyl7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gdi55TW92ZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9yZXF1aXJlZCBmb3IgY29udGlub3VzVmVydGljYWxcclxuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBpc01vdmVtZW50VXAgIT09ICd1bmRlZmluZWQnKXtcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBpc01vdmVtZW50VXAgPyAndXAnIDogJ2Rvd24nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vZm9yIHRoZSBjYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgdi5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoaXNGdW5jdGlvbihvcHRpb25zLm9uTGVhdmUpKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihmaXJlQ2FsbGJhY2soJ29uTGVhdmUnLCB2KSA9PT0gZmFsc2Upe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBjb250aW51b3VzVmVydGljYWwgJiYgd2UgbmVlZCB0byB3cmFwIGFyb3VuZFxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hdXRvU2Nyb2xsaW5nICYmIG9wdGlvbnMuY29udGludW91c1ZlcnRpY2FsICYmIHR5cGVvZiAodi5pc01vdmVtZW50VXApICE9PSBcInVuZGVmaW5lZFwiICYmXHJcbiAgICAgICAgICAgICAgICAoKCF2LmlzTW92ZW1lbnRVcCAmJiB2LnlNb3ZlbWVudCA9PSAndXAnKSB8fCAvLyBJbnRlbmRpbmcgdG8gc2Nyb2xsIGRvd24gYnV0IGFib3V0IHRvIGdvIHVwIG9yXHJcbiAgICAgICAgICAgICAgICAodi5pc01vdmVtZW50VXAgJiYgdi55TW92ZW1lbnQgPT0gJ2Rvd24nKSkpIHsgLy8gaW50ZW5kaW5nIHRvIHNjcm9sbCB1cCBidXQgYWJvdXQgdG8gZ28gZG93blxyXG5cclxuICAgICAgICAgICAgICAgIHYgPSBjcmVhdGVJbmZpbml0ZVNlY3Rpb25zKHYpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL3BhdXNpbmcgbWVkaWEgb2YgdGhlIGxlYXZpbmcgc2VjdGlvbiAoaWYgd2UgYXJlIG5vdCBqdXN0IHJlc2l6aW5nLCBhcyBkZXN0aW5hdGlubyB3aWxsIGJlIHRoZSBzYW1lIG9uZSlcclxuICAgICAgICAgICAgaWYoIXYubG9jYWxJc1Jlc2l6aW5nKXtcclxuICAgICAgICAgICAgICAgIHN0b3BNZWRpYSh2LmFjdGl2ZVNlY3Rpb24pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihvcHRpb25zLnNjcm9sbE92ZXJmbG93KXtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLmJlZm9yZUxlYXZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIEFDVElWRSk7XHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNpYmxpbmdzKGVsZW1lbnQpLCBBQ1RJVkUpO1xyXG4gICAgICAgICAgICBsYXp5TG9hZChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3cpe1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zY3JvbGxPdmVyZmxvd0hhbmRsZXIub25MZWF2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL3ByZXZlbnRpbmcgZnJvbSBhY3RpdmF0aW5nIHRoZSBNb3VzZVdoZWVsSGFuZGxlciBldmVudFxyXG4gICAgICAgICAgICAvL21vcmUgdGhhbiBvbmNlIGlmIHRoZSBwYWdlIGlzIHNjcm9sbGluZ1xyXG4gICAgICAgICAgICBjYW5TY3JvbGwgPSBmYWxzZSB8fCBGUC50ZXN0LmlzVGVzdGluZztcclxuXHJcbiAgICAgICAgICAgIHNldFN0YXRlKHNsaWRlSW5kZXgsIHNsaWRlQW5jaG9yTGluaywgdi5hbmNob3JMaW5rLCB2LnNlY3Rpb25JbmRleCk7XHJcblxyXG4gICAgICAgICAgICBwZXJmb3JtTW92ZW1lbnQodik7XHJcblxyXG4gICAgICAgICAgICAvL2ZsYWcgdG8gYXZvaWQgY2FsbGluZ24gYHNjcm9sbFBhZ2UoKWAgdHdpY2UgaW4gY2FzZSBvZiB1c2luZyBhbmNob3IgbGlua3NcclxuICAgICAgICAgICAgbGFzdFNjcm9sbGVkRGVzdGlueSA9IHYuYW5jaG9yTGluaztcclxuXHJcbiAgICAgICAgICAgIC8vYXZvaWQgZmlyaW5nIGl0IHR3aWNlIChhcyBpdCBkb2VzIGFsc28gb24gc2Nyb2xsKVxyXG4gICAgICAgICAgICBhY3RpdmF0ZU1lbnVBbmROYXYodi5hbmNob3JMaW5rLCB2LnNlY3Rpb25JbmRleCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIERpc3BhdGNoIGV2ZW50cyAmIGNhbGxiYWNrcyBtYWtpbmcgc3VyZSBpdCBkb2VzIGl0IG9uIHRoZSByaWdodCBmb3JtYXQsIGRlcGVuZGluZyBvblxyXG4gICAgICAgICogd2hldGhlciB2MmNvbXBhdGlibGUgaXMgYmVpbmcgdXNlZCBvciBub3QuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBmaXJlQ2FsbGJhY2soZXZlbnROYW1lLCB2KXtcclxuICAgICAgICAgICAgdmFyIGV2ZW50RGF0YSA9IGdldEV2ZW50RGF0YShldmVudE5hbWUsIHYpO1xyXG5cclxuICAgICAgICAgICAgaWYoIW9wdGlvbnMudjJjb21wYXRpYmxlKXtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXIoY29udGFpbmVyLCBldmVudE5hbWUsIGV2ZW50RGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYob3B0aW9uc1tldmVudE5hbWVdLmFwcGx5KGV2ZW50RGF0YVtPYmplY3Qua2V5cyhldmVudERhdGEpWzBdXSwgdG9BcnJheShldmVudERhdGEpKSA9PT0gZmFsc2Upe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgaWYob3B0aW9uc1tldmVudE5hbWVdLmFwcGx5KGV2ZW50RGF0YVswXSwgZXZlbnREYXRhLnNsaWNlKDEpKSA9PT0gZmFsc2Upe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIE1ha2VzIHN1cmUgdG8gb25seSBjcmVhdGUgYSBQYW5lbCBvYmplY3QgaWYgdGhlIGVsZW1lbnQgZXhpc3RcclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIG51bGxPclNlY3Rpb24oZWwpe1xyXG4gICAgICAgICAgICByZXR1cm4gZWwgPyBuZXcgU2VjdGlvbihlbCkgOiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbnVsbE9yU2xpZGUoZWwpe1xyXG4gICAgICAgICAgICByZXR1cm4gZWwgPyBuZXcgU2xpZGUoZWwpIDogbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogR2V0cyB0aGUgZXZlbnQncyBkYXRhIGZvciB0aGUgZ2l2ZW4gZXZlbnQgb24gdGhlIHJpZ2h0IGZvcm1hdC4gRGVwZW5kaW5nIG9uIHdoZXRoZXJcclxuICAgICAgICAqIHYyY29tcGF0aWJsZSBpcyBiZWluZyB1c2VkIG9yIG5vdC5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldEV2ZW50RGF0YShldmVudE5hbWUsIHYpe1xyXG4gICAgICAgICAgICB2YXIgcGFyYW1zUGVyRXZlbnQ7XHJcblxyXG4gICAgICAgICAgICBpZighb3B0aW9ucy52MmNvbXBhdGlibGUpe1xyXG5cclxuICAgICAgICAgICAgICAgIC8vdXNpbmcgZnVuY3Rpb25zIHRvIHJ1biBvbmx5IHRoZSBuZWNlc3NhcnkgYml0cyB3aXRoaW4gdGhlIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgcGFyYW1zUGVyRXZlbnQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJSZW5kZXI6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uOiBudWxsT3JTZWN0aW9uKCQoU0VDVElPTl9BQ1RJVkVfU0VMKVswXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZTogbnVsbE9yU2xpZGUoJChTTElERV9BQ1RJVkVfU0VMLCAkKFNFQ1RJT05fQUNUSVZFX1NFTClbMF0pWzBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb25MZWF2ZTogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjogbnVsbE9yU2VjdGlvbih2LmFjdGl2ZVNlY3Rpb24pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb246IG51bGxPclNlY3Rpb24odi5lbGVtZW50KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogdi5kaXJlY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBhZnRlckxvYWQ6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbXNQZXJFdmVudC5vbkxlYXZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJTbGlkZUxvYWQ6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uOiBudWxsT3JTZWN0aW9uKHYuc2VjdGlvbiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW46IG51bGxPclNsaWRlKHYucHJldlNsaWRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBudWxsT3JTbGlkZSh2LmRlc3RpbnkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiB2LmRpcmVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9uU2xpZGVMZWF2ZTogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtc1BlckV2ZW50LmFmdGVyU2xpZGVMb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zUGVyRXZlbnQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJSZW5kZXI6IGZ1bmN0aW9uKCl7IHJldHVybiBbY29udGFpbmVyXTsgfSxcclxuICAgICAgICAgICAgICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbigpeyByZXR1cm4gW3YuYWN0aXZlU2VjdGlvbiwgdi5sZWF2aW5nU2VjdGlvbiwgKHYuc2VjdGlvbkluZGV4ICsgMSksIHYuZGlyZWN0aW9uXTsgfSxcclxuICAgICAgICAgICAgICAgICAgICBhZnRlckxvYWQ6IGZ1bmN0aW9uKCl7IHJldHVybiBbdi5lbGVtZW50LCB2LmFuY2hvckxpbmssICh2LnNlY3Rpb25JbmRleCArIDEpXTsgfSxcclxuICAgICAgICAgICAgICAgICAgICBhZnRlclNsaWRlTG9hZDogZnVuY3Rpb24oKXsgcmV0dXJuIFt2LmRlc3RpbnksIHYuYW5jaG9yTGluaywgKHYuc2VjdGlvbkluZGV4ICsgMSksIHYuc2xpZGVBbmNob3IsIHYuc2xpZGVJbmRleF07IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb25TbGlkZUxlYXZlOiBmdW5jdGlvbigpeyByZXR1cm4gW3YucHJldlNsaWRlLCB2LmFuY2hvckxpbmssICh2LnNlY3Rpb25JbmRleCArIDEpLCB2LnByZXZTbGlkZUluZGV4LCB2LmRpcmVjdGlvbiwgdi5zbGlkZUluZGV4XTsgfSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXNQZXJFdmVudFtldmVudE5hbWVdKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFBlcmZvcm1zIHRoZSB2ZXJ0aWNhbCBtb3ZlbWVudCAoYnkgQ1NTMyBvciBieSBqUXVlcnkpXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBwZXJmb3JtTW92ZW1lbnQodil7XHJcbiAgICAgICAgICAgIHZhciBpc0Zhc3RTcGVlZCA9IG9wdGlvbnMuc2Nyb2xsaW5nU3BlZWQgPCA3MDA7XHJcbiAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uTGFwc2UgPSBpc0Zhc3RTcGVlZCA/IDcwMCA6IG9wdGlvbnMuc2Nyb2xsaW5nU3BlZWQ7IFxyXG5cclxuICAgICAgICAgICAgLy8gdXNpbmcgQ1NTMyB0cmFuc2xhdGUgZnVuY3Rpb25hbGl0eVxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jc3MzICYmIG9wdGlvbnMuYXV0b1Njcm9sbGluZyAmJiAhb3B0aW9ucy5zY3JvbGxCYXIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgZmlyc3Qgc2VjdGlvbiBjYW4gaGF2ZSBhIG5lZ2F0aXZlIHZhbHVlIGluIGlPUyAxMC4gTm90IHF1aXRlIHN1cmUgd2h5OiAtMC4wMTQyODIyMjY1NjI1XHJcbiAgICAgICAgICAgICAgICAvLyB0aGF0J3Mgd2h5IHdlIHJvdW5kIGl0IHRvIDAuXHJcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlM2QgPSAndHJhbnNsYXRlM2QoMHB4LCAtJyArIE1hdGgucm91bmQodi5kdG9wKSArICdweCwgMHB4KSc7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1Db250YWluZXIodHJhbnNsYXRlM2QsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vZXZlbiB3aGVuIHRoZSBzY3JvbGxpbmdTcGVlZCBpcyAwIHRoZXJlJ3MgYSBsaXR0bGUgZGVsYXksIHdoaWNoIG1pZ2h0IGNhdXNlIHRoZVxyXG4gICAgICAgICAgICAgICAgLy9zY3JvbGxpbmdTcGVlZCB0byBjaGFuZ2UgaW4gY2FzZSBvZiB1c2luZyBzaWxlbnRNb3ZlVG8oKTtcclxuICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuc2Nyb2xsaW5nU3BlZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChhZnRlclNlY3Rpb25Mb2Fkc0lkKTtcclxuICAgICAgICAgICAgICAgICAgICBhZnRlclNlY3Rpb25Mb2Fkc0lkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyU2VjdGlvbkxvYWRzKHYpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9kaXNhYmxpbmcgY2FuU2Nyb2xsIHdoZW4gdXNpbmcgZmFzdFNwZWVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhblNjcm9sbCA9ICFpc0Zhc3RTcGVlZDtcclxuICAgICAgICAgICAgICAgICAgICB9LCBvcHRpb25zLnNjcm9sbGluZ1NwZWVkKTsgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBhZnRlclNlY3Rpb25Mb2Fkcyh2KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gdXNpbmcgSlMgdG8gYW5pbWF0ZVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbFNldHRpbmdzID0gZ2V0U2Nyb2xsU2V0dGluZ3Modi5kdG9wKTtcclxuICAgICAgICAgICAgICAgIEZQLnRlc3QudG9wID0gLXYuZHRvcCArICdweCc7XHJcblxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsVG8oc2Nyb2xsU2V0dGluZ3MuZWxlbWVudCwgc2Nyb2xsU2V0dGluZ3Mub3B0aW9ucywgb3B0aW9ucy5zY3JvbGxpbmdTcGVlZCwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihvcHRpb25zLnNjcm9sbEJhcil7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBIYWNrIVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBUaGUgdGltZW91dCBwcmV2ZW50cyBzZXR0aW5nIHRoZSBtb3N0IGRvbWluYW50IHNlY3Rpb24gaW4gdGhlIHZpZXdwb3J0IGFzIFwiYWN0aXZlXCIgd2hlbiB0aGUgdXNlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxlZCB0byBhIHNtYWxsZXIgc2VjdGlvbiBieSB1c2luZyB0aGUgbW91c2V3aGVlbCAoYXV0byBzY3JvbGxpbmcpIHJhdGhlciB0aGFuIGRyYWdpbmcgdGhlIHNjcm9sbCBiYXIuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBXaGVuIHVzaW5nIHNjcm9sbEJhcjp0cnVlIEl0IHNlZW1zIGxpa2UgdGhlIHNjcm9sbCBldmVudHMgc3RpbGwgZ2V0dGluZyBwcm9wYWdhdGVkIGV2ZW4gYWZ0ZXIgdGhlIHNjcm9sbGluZyBhbmltYXRpb24gaGFzIGZpbmlzaGVkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlclNlY3Rpb25Mb2Fkcyh2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwzMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlclNlY3Rpb25Mb2Fkcyh2KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZGlzYWJsaW5nIGNhblNjcm9sbCB3aGVuIHVzaW5nIGZhc3RTcGVlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5TY3JvbGwgPSAhaXNGYXN0U3BlZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGVuYWJsaW5nIGNhblNjcm9sbCBhZnRlciB0aGUgbWluaW11bSB0cmFuc2l0aW9uIGxhcHNcclxuICAgICAgICAgICAgaWYoaXNGYXN0U3BlZWQpe1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGdfdHJhbnNpdGlvbkxhcHNlSWQpO1xyXG4gICAgICAgICAgICAgICAgZ190cmFuc2l0aW9uTGFwc2VJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBjYW5TY3JvbGwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSwgdHJhbnNpdGlvbkxhcHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBHZXRzIHRoZSBzY3JvbGxpbmcgc2V0dGluZ3MgZGVwZW5kaW5nIG9uIHRoZSBwbHVnaW4gYXV0b1Njcm9sbGluZyBvcHRpb25cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNjcm9sbFNldHRpbmdzKHRvcCl7XHJcbiAgICAgICAgICAgIHZhciBzY3JvbGwgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIC8vdG9wIHByb3BlcnR5IGFuaW1hdGlvblxyXG4gICAgICAgICAgICBpZihvcHRpb25zLmF1dG9TY3JvbGxpbmcgJiYgIW9wdGlvbnMuc2Nyb2xsQmFyKXtcclxuICAgICAgICAgICAgICAgIHNjcm9sbC5vcHRpb25zID0gLXRvcDtcclxuICAgICAgICAgICAgICAgIHNjcm9sbC5lbGVtZW50ID0gJChXUkFQUEVSX1NFTClbMF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vd2luZG93IHJlYWwgc2Nyb2xsaW5nXHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGwub3B0aW9ucyA9IHRvcDtcclxuICAgICAgICAgICAgICAgIHNjcm9sbC5lbGVtZW50ID0gd2luZG93O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc2Nyb2xsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBBZGRzIHNlY3Rpb25zIGJlZm9yZSBvciBhZnRlciB0aGUgY3VycmVudCBvbmUgdG8gY3JlYXRlIHRoZSBpbmZpbml0ZSBlZmZlY3QuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVJbmZpbml0ZVNlY3Rpb25zKHYpe1xyXG4gICAgICAgICAgICAvLyBTY3JvbGxpbmcgZG93blxyXG4gICAgICAgICAgICBpZiAoIXYuaXNNb3ZlbWVudFVwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBNb3ZlIGFsbCBwcmV2aW91cyBzZWN0aW9ucyB0byBhZnRlciB0aGUgYWN0aXZlIHNlY3Rpb25cclxuICAgICAgICAgICAgICAgIGFmdGVyKCQoU0VDVElPTl9BQ1RJVkVfU0VMKVswXSwgcHJldkFsbCh2LmFjdGl2ZVNlY3Rpb24sIFNFQ1RJT05fU0VMKS5yZXZlcnNlKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgeyAvLyBTY3JvbGxpbmcgdXBcclxuICAgICAgICAgICAgICAgIC8vIE1vdmUgYWxsIG5leHQgc2VjdGlvbnMgdG8gYmVmb3JlIHRoZSBhY3RpdmUgc2VjdGlvblxyXG4gICAgICAgICAgICAgICAgYmVmb3JlKCQoU0VDVElPTl9BQ1RJVkVfU0VMKVswXSwgbmV4dEFsbCh2LmFjdGl2ZVNlY3Rpb24sIFNFQ1RJT05fU0VMKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIE1haW50YWluIHRoZSBkaXNwbGF5ZWQgcG9zaXRpb24gKG5vdyB0aGF0IHdlIGNoYW5nZWQgdGhlIGVsZW1lbnQgb3JkZXIpXHJcbiAgICAgICAgICAgIHNpbGVudFNjcm9sbCgkKFNFQ1RJT05fQUNUSVZFX1NFTClbMF0ub2Zmc2V0VG9wKTtcclxuXHJcbiAgICAgICAgICAgIC8vIE1haW50YWluIHRoZSBhY3RpdmUgc2xpZGVzIHZpc2libGUgaW4gdGhlIHZpZXdwb3J0XHJcbiAgICAgICAgICAgIGtlZXBTbGlkZXNQb3NpdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgLy8gc2F2ZSBmb3IgbGF0ZXIgdGhlIGVsZW1lbnRzIHRoYXQgc3RpbGwgbmVlZCB0byBiZSByZW9yZGVyZWRcclxuICAgICAgICAgICAgdi53cmFwQXJvdW5kRWxlbWVudHMgPSB2LmFjdGl2ZVNlY3Rpb247XHJcblxyXG4gICAgICAgICAgICAvLyBSZWNhbGN1bGF0ZSBhbmltYXRpb24gdmFyaWFibGVzXHJcbiAgICAgICAgICAgIHYuZHRvcCA9IHYuZWxlbWVudC5vZmZzZXRUb3A7XHJcbiAgICAgICAgICAgIHYueU1vdmVtZW50ID0gZ2V0WW1vdmVtZW50KHYuZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogRml4IHNlY3Rpb24gb3JkZXIgYWZ0ZXIgY29udGludW91c1ZlcnRpY2FsIGNoYW5nZXMgaGF2ZSBiZWVuIGFuaW1hdGVkXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBjb250aW51b3VzVmVydGljYWxGaXhTZWN0aW9uT3JkZXIgKHYpIHtcclxuICAgICAgICAgICAgLy8gSWYgY29udGludW91c1ZlcnRpY2FsIGlzIGluIGVmZmVjdCAoYW5kIGF1dG9TY3JvbGxpbmcgd291bGQgYWxzbyBiZSBpbiBlZmZlY3QgdGhlbiksXHJcbiAgICAgICAgICAgIC8vIGZpbmlzaCBtb3ZpbmcgdGhlIGVsZW1lbnRzIGFyb3VuZCBzbyB0aGUgZGlyZWN0IG5hdmlnYXRpb24gd2lsbCBmdW5jdGlvbiBtb3JlIHNpbXBseVxyXG4gICAgICAgICAgICBpZiAodi53cmFwQXJvdW5kRWxlbWVudHMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodi5pc01vdmVtZW50VXApIHtcclxuICAgICAgICAgICAgICAgIGJlZm9yZSgkKFNFQ1RJT05fU0VMKVswXSwgdi53cmFwQXJvdW5kRWxlbWVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWZ0ZXIoJChTRUNUSU9OX1NFTClbJChTRUNUSU9OX1NFTCkubGVuZ3RoLTFdLCB2LndyYXBBcm91bmRFbGVtZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNpbGVudFNjcm9sbCgkKFNFQ1RJT05fQUNUSVZFX1NFTClbMF0ub2Zmc2V0VG9wKTtcclxuXHJcbiAgICAgICAgICAgIC8vIE1haW50YWluIHRoZSBhY3RpdmUgc2xpZGVzIHZpc2libGUgaW4gdGhlIHZpZXdwb3J0XHJcbiAgICAgICAgICAgIGtlZXBTbGlkZXNQb3NpdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBBY3Rpb25zIHRvIGRvIG9uY2UgdGhlIHNlY3Rpb24gaXMgbG9hZGVkLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gYWZ0ZXJTZWN0aW9uTG9hZHMgKHYpe1xyXG4gICAgICAgICAgICBjb250aW51b3VzVmVydGljYWxGaXhTZWN0aW9uT3JkZXIodik7XHJcblxyXG4gICAgICAgICAgICAvL2NhbGxiYWNrIChhZnRlckxvYWQpIGlmIHRoZSBzaXRlIGlzIG5vdCBqdXN0IHJlc2l6aW5nIGFuZCByZWFkanVzdGluZyB0aGUgc2xpZGVzXHJcbiAgICAgICAgICAgIGlmKGlzRnVuY3Rpb24ob3B0aW9ucy5hZnRlckxvYWQpICYmICF2LmxvY2FsSXNSZXNpemluZyl7XHJcbiAgICAgICAgICAgICAgICBmaXJlQ2FsbGJhY2soJ2FmdGVyTG9hZCcsIHYpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihvcHRpb25zLnNjcm9sbE92ZXJmbG93KXtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLmFmdGVyTG9hZCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZighdi5sb2NhbElzUmVzaXppbmcpe1xyXG4gICAgICAgICAgICAgICAgcGxheU1lZGlhKHYuZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFkZENsYXNzKHYuZWxlbWVudCwgQ09NUExFVEVMWSk7XHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNpYmxpbmdzKHYuZWxlbWVudCksIENPTVBMRVRFTFkpO1xyXG4gICAgICAgICAgICBsYXp5TG9hZE90aGVycygpO1xyXG5cclxuICAgICAgICAgICAgY2FuU2Nyb2xsID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmKGlzRnVuY3Rpb24odi5jYWxsYmFjaykpe1xyXG4gICAgICAgICAgICAgICAgdi5jYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFNldHMgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gYXR0cmlidXRlIGZyb20gdGhlIGBkYXRhLWAgYXR0cmlidXRlIHdpdGggdGhlIHNhbWUgc3VmZml4XHJcbiAgICAgICAgKiBpZTogZGF0YS1zcmNzZXQgPT0+IHNyY3NldCAgfCAgZGF0YS1zcmMgPT0+IHNyY1xyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0U3JjKGVsZW1lbnQsIGF0dHJpYnV0ZSl7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIGF0dHJpYnV0ZSkpO1xyXG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS0nICsgYXR0cmlidXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogTWFrZXMgc3VyZSBsYXp5bG9hZCBpcyBkb25lIGZvciBvdGhlciBzZWN0aW9ucyBpbiB0aGUgdmlld3BvcnQgdGhhdCBhcmUgbm90IHRoZVxyXG4gICAgICAgICogYWN0aXZlIG9uZS4gXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBsYXp5TG9hZE90aGVycygpe1xyXG4gICAgICAgICAgICB2YXIgaGFzQXV0b0hlaWdodFNlY3Rpb25zID0gJChBVVRPX0hFSUdIVF9TRUwpWzBdIHx8IGlzUmVzcG9uc2l2ZU1vZGUoKSAmJiAkKEFVVE9fSEVJR0hUX1JFU1BPTlNJVkVfU0VMKVswXTtcclxuXHJcbiAgICAgICAgICAgIC8vcXVpdHRpbmcgd2hlbiBpdCBkb2Vzbid0IGFwcGx5XHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5sYXp5TG9hZGluZyB8fCAhaGFzQXV0b0hlaWdodFNlY3Rpb25zKXtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9tYWtpbmcgc3VyZSB0byBsYXp5IGxvYWQgYXV0by1oZWlnaHQgc2VjdGlvbnMgdGhhdCBhcmUgaW4gdGhlIHZpZXdwb3J0XHJcbiAgICAgICAgICAgICQoU0VDVElPTl9TRUwgKyAnOm5vdCgnICsgQUNUSVZFX1NFTCArICcpJykuZm9yRWFjaChmdW5jdGlvbihzZWN0aW9uKXtcclxuICAgICAgICAgICAgICAgIGlmKGlzU2VjdGlvbkluVmlld3BvcnQoc2VjdGlvbikpe1xyXG4gICAgICAgICAgICAgICAgICAgIGxhenlMb2FkKHNlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogTGF6eSBsb2FkcyBpbWFnZSwgdmlkZW8gYW5kIGF1ZGlvIGVsZW1lbnRzLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gbGF6eUxvYWQoZGVzdGlueSl7XHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5sYXp5TG9hZGluZyl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBwYW5lbCA9IGdldFNsaWRlT3JTZWN0aW9uKGRlc3RpbnkpO1xyXG5cclxuICAgICAgICAgICAgJCgnaW1nW2RhdGEtc3JjXSwgaW1nW2RhdGEtc3Jjc2V0XSwgc291cmNlW2RhdGEtc3JjXSwgc291cmNlW2RhdGEtc3Jjc2V0XSwgdmlkZW9bZGF0YS1zcmNdLCBhdWRpb1tkYXRhLXNyY10sIGlmcmFtZVtkYXRhLXNyY10nLCBwYW5lbCkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KXtcclxuICAgICAgICAgICAgICAgIFsnc3JjJywgJ3NyY3NldCddLmZvckVhY2goZnVuY3Rpb24odHlwZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLScgKyB0eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihhdHRyaWJ1dGUgIT0gbnVsbCAmJiBhdHRyaWJ1dGUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRTcmMoZWxlbWVudCwgdHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk1lZGlhTG9hZChkZXN0aW55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYobWF0Y2hlcyhlbGVtZW50LCAnc291cmNlJykpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50VG9QbGF5ID0gIGNsb3Nlc3QoZWxlbWVudCwgJ3ZpZGVvLCBhdWRpbycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnRUb1BsYXkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50VG9QbGF5LmxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFRvUGxheS5vbmxvYWRlZGRhdGEgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25NZWRpYUxvYWQoZGVzdGlueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogQ2FsbGJhY2sgZmlyaW5nIHdoZW4gYSBsYXp5IGxvYWQgbWVkaWEgZWxlbWVudCBoYXMgbG9hZGVkLlxyXG4gICAgICAgICogTWFraW5nIHN1cmUgaXQgb25seSBmaXJlcyBvbmUgcGVyIHNlY3Rpb24gaW4gbm9ybWFsIGNvbmRpdGlvbnMgKGlmIGxvYWQgdGltZSBpcyBub3QgaHVnZSlcclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIG9uTWVkaWFMb2FkKHNlY3Rpb24pe1xyXG4gICAgICAgICAgICBpZihvcHRpb25zLnNjcm9sbE92ZXJmbG93KXtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChnX21lZGlhTG9hZGVkSWQpO1xyXG4gICAgICAgICAgICAgICAgZ19tZWRpYUxvYWRlZElkID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFoYXNDbGFzcygkYm9keSwgUkVTUE9OU0lWRSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxCYXJIYW5kbGVyLmNyZWF0ZVNjcm9sbEJhcihzZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFBsYXlzIHZpZGVvIGFuZCBhdWRpbyBlbGVtZW50cy5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHBsYXlNZWRpYShkZXN0aW55KXtcclxuICAgICAgICAgICAgdmFyIHBhbmVsID0gZ2V0U2xpZGVPclNlY3Rpb24oZGVzdGlueSk7XHJcblxyXG4gICAgICAgICAgICAvL3BsYXlpbmcgSFRNTDUgbWVkaWEgZWxlbWVudHNcclxuICAgICAgICAgICAgJCgndmlkZW8sIGF1ZGlvJywgcGFuZWwpLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCl7XHJcbiAgICAgICAgICAgICAgICBpZiggZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEtYXV0b3BsYXknKSAmJiB0eXBlb2YgZWxlbWVudC5wbGF5ID09PSAnZnVuY3Rpb24nICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8veW91dHViZSB2aWRlb3NcclxuICAgICAgICAgICAgJCgnaWZyYW1lW3NyYyo9XCJ5b3V0dWJlLmNvbS9lbWJlZC9cIl0nLCBwYW5lbCkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KXtcclxuICAgICAgICAgICAgICAgIGlmICggZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEtYXV0b3BsYXknKSApe1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYXlZb3V0dWJlKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vaW4gY2FzZSB0aGUgVVJMIHdhcyBub3QgbG9hZGVkIHlldC4gT24gcGFnZSBsb2FkIHdlIG5lZWQgdGltZSBmb3IgdGhlIG5ldyBVUkwgKHdpdGggdGhlIEFQSSBzdHJpbmcpIHRvIGxvYWQuXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICggZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEtYXV0b3BsYXknKSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5WW91dHViZShlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogUGxheXMgYSB5b3V0dWJlIHZpZGVvXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBwbGF5WW91dHViZShlbGVtZW50KXtcclxuICAgICAgICAgICAgZWxlbWVudC5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKCd7XCJldmVudFwiOlwiY29tbWFuZFwiLFwiZnVuY1wiOlwicGxheVZpZGVvXCIsXCJhcmdzXCI6XCJcIn0nLCAnKicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBTdG9wcyB2aWRlbyBhbmQgYXVkaW8gZWxlbWVudHMuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBzdG9wTWVkaWEoZGVzdGlueSl7XHJcbiAgICAgICAgICAgIHZhciBwYW5lbCA9IGdldFNsaWRlT3JTZWN0aW9uKGRlc3RpbnkpO1xyXG5cclxuICAgICAgICAgICAgLy9zdG9wcGluZyBIVE1MNSBtZWRpYSBlbGVtZW50c1xyXG4gICAgICAgICAgICAkKCd2aWRlbywgYXVkaW8nLCBwYW5lbCkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KXtcclxuICAgICAgICAgICAgICAgIGlmKCAhZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEta2VlcHBsYXlpbmcnKSAmJiB0eXBlb2YgZWxlbWVudC5wYXVzZSA9PT0gJ2Z1bmN0aW9uJyApIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnBhdXNlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy95b3V0dWJlIHZpZGVvc1xyXG4gICAgICAgICAgICAkKCdpZnJhbWVbc3JjKj1cInlvdXR1YmUuY29tL2VtYmVkL1wiXScsIHBhbmVsKS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpe1xyXG4gICAgICAgICAgICAgICAgaWYoIC95b3V0dWJlXFwuY29tXFwvZW1iZWRcXC8vLnRlc3QoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3NyYycpKSAmJiAhZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEta2VlcHBsYXlpbmcnKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKCd7XCJldmVudFwiOlwiY29tbWFuZFwiLFwiZnVuY1wiOlwicGF1c2VWaWRlb1wiLFwiYXJnc1wiOlwiXCJ9JywnKicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogR2V0cyB0aGUgYWN0aXZlIHNsaWRlIChvciBzZWN0aW9uKSBmb3IgdGhlIGdpdmVuIHNlY3Rpb25cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNsaWRlT3JTZWN0aW9uKGRlc3Rpbnkpe1xyXG4gICAgICAgICAgICB2YXIgc2xpZGUgPSAkKFNMSURFX0FDVElWRV9TRUwsIGRlc3RpbnkpO1xyXG4gICAgICAgICAgICBpZiggc2xpZGUubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgZGVzdGlueSA9IHNsaWRlWzBdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZGVzdGlueTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU2Nyb2xscyB0byB0aGUgYW5jaG9yIGluIHRoZSBVUkwgd2hlbiBsb2FkaW5nIHRoZSBzaXRlXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBzY3JvbGxUb0FuY2hvcigpe1xyXG4gICAgICAgICAgICB2YXIgYW5jaG9ycyA9ICBnZXRBbmNob3JzVVJMKCk7XHJcbiAgICAgICAgICAgIHZhciBzZWN0aW9uQW5jaG9yID0gYW5jaG9ycy5zZWN0aW9uO1xyXG4gICAgICAgICAgICB2YXIgc2xpZGVBbmNob3IgPSBhbmNob3JzLnNsaWRlO1xyXG5cclxuICAgICAgICAgICAgaWYoc2VjdGlvbkFuY2hvcil7ICAvL2lmIHRoZXJlcyBhbnkgI1xyXG4gICAgICAgICAgICAgICAgaWYob3B0aW9ucy5hbmltYXRlQW5jaG9yKXtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxQYWdlQW5kU2xpZGUoc2VjdGlvbkFuY2hvciwgc2xpZGVBbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgc2lsZW50TW92ZVRvKHNlY3Rpb25BbmNob3IsIHNsaWRlQW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBEZXRlY3RpbmcgYW55IGNoYW5nZSBvbiB0aGUgVVJMIHRvIHNjcm9sbCB0byB0aGUgZ2l2ZW4gYW5jaG9yIGxpbmtcclxuICAgICAgICAqIChhIHdheSB0byBkZXRlY3QgYmFjayBoaXN0b3J5IGJ1dHRvbiBhcyB3ZSBwbGF5IHdpdGggdGhlIGhhc2hlcyBvbiB0aGUgVVJMKVxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gaGFzaENoYW5nZUhhbmRsZXIoKXtcclxuICAgICAgICAgICAgaWYoIWlzU2Nyb2xsaW5nICYmICFvcHRpb25zLmxvY2tBbmNob3JzKXtcclxuICAgICAgICAgICAgICAgIHZhciBhbmNob3JzID0gZ2V0QW5jaG9yc1VSTCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlY3Rpb25BbmNob3IgPSBhbmNob3JzLnNlY3Rpb247XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVBbmNob3IgPSBhbmNob3JzLnNsaWRlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vd2hlbiBtb3ZpbmcgdG8gYSBzbGlkZSBpbiB0aGUgZmlyc3Qgc2VjdGlvbiBmb3IgdGhlIGZpcnN0IHRpbWUgKGZpcnN0IHRpbWUgdG8gYWRkIGFuIGFuY2hvciB0byB0aGUgVVJMKVxyXG4gICAgICAgICAgICAgICAgdmFyIGlzRmlyc3RTbGlkZU1vdmUgPSAgKHR5cGVvZiBsYXN0U2Nyb2xsZWREZXN0aW55ID09PSAndW5kZWZpbmVkJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNGaXJzdFNjcm9sbE1vdmUgPSAodHlwZW9mIGxhc3RTY3JvbGxlZERlc3RpbnkgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBzbGlkZUFuY2hvciA9PT0gJ3VuZGVmaW5lZCcgJiYgIXNsaWRlTW92aW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihzZWN0aW9uQW5jaG9yICYmIHNlY3Rpb25BbmNob3IubGVuZ3RoKXtcclxuICAgICAgICAgICAgICAgICAgICAvKmluIG9yZGVyIHRvIGNhbGwgc2Nyb2xscGFnZSgpIG9ubHkgb25jZSBmb3IgZWFjaCBkZXN0aW5hdGlvbiBhdCBhIHRpbWVcclxuICAgICAgICAgICAgICAgICAgICBJdCBpcyBjYWxsZWQgdHdpY2UgZm9yIGVhY2ggc2Nyb2xsIG90aGVyd2lzZSwgYXMgaW4gY2FzZSBvZiB1c2luZyBhbmNob3JsaW5rcyBgaGFzaENoYW5nZWBcclxuICAgICAgICAgICAgICAgICAgICBldmVudCBpcyBmaXJlZCBvbiBldmVyeSBzY3JvbGwgdG9vLiovXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChzZWN0aW9uQW5jaG9yICYmIHNlY3Rpb25BbmNob3IgIT09IGxhc3RTY3JvbGxlZERlc3RpbnkpICYmICFpc0ZpcnN0U2xpZGVNb3ZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IGlzRmlyc3RTY3JvbGxNb3ZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8ICghc2xpZGVNb3ZpbmcgJiYgbGFzdFNjcm9sbGVkU2xpZGUgIT0gc2xpZGVBbmNob3IgKSl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxQYWdlQW5kU2xpZGUoc2VjdGlvbkFuY2hvciwgc2xpZGVBbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9nZXRzIHRoZSBVUkwgYW5jaG9ycyAoc2VjdGlvbiBhbmQgc2xpZGUpXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0QW5jaG9yc1VSTCgpe1xyXG4gICAgICAgICAgICB2YXIgc2VjdGlvbjtcclxuICAgICAgICAgICAgdmFyIHNsaWRlO1xyXG4gICAgICAgICAgICB2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xyXG5cclxuICAgICAgICAgICAgaWYoaGFzaC5sZW5ndGgpe1xyXG4gICAgICAgICAgICAgICAgLy9nZXR0aW5nIHRoZSBhbmNob3IgbGluayBpbiB0aGUgVVJMIGFuZCBkZWxldGluZyB0aGUgYCNgXHJcbiAgICAgICAgICAgICAgICB2YXIgYW5jaG9yc1BhcnRzID0gIGhhc2gucmVwbGFjZSgnIycsICcnKS5zcGxpdCgnLycpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vdXNpbmcgLyBmb3IgdmlzdWFsIHJlYXNvbnMgYW5kIG5vdCBhcyBhIHNlY3Rpb24vc2xpZGUgc2VwYXJhdG9yICMyODAzXHJcbiAgICAgICAgICAgICAgICB2YXIgaXNGdW5reUFuY2hvciA9IGhhc2guaW5kZXhPZignIy8nKSA+IC0xO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlY3Rpb24gPSBpc0Z1bmt5QW5jaG9yID8gJy8nICsgYW5jaG9yc1BhcnRzWzFdIDogZGVjb2RlVVJJQ29tcG9uZW50KGFuY2hvcnNQYXJ0c1swXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlQW5jaG9yID0gaXNGdW5reUFuY2hvciA/IGFuY2hvcnNQYXJ0c1syXSA6IGFuY2hvcnNQYXJ0c1sxXTtcclxuICAgICAgICAgICAgICAgIGlmKHNsaWRlQW5jaG9yICYmIHNsaWRlQW5jaG9yLmxlbmd0aCl7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUgPSBkZWNvZGVVUklDb21wb25lbnQoc2xpZGVBbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2VjdGlvbjogc2VjdGlvbixcclxuICAgICAgICAgICAgICAgIHNsaWRlOiBzbGlkZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9TbGlkaW5nIHdpdGggYXJyb3cga2V5cywgYm90aCwgdmVydGljYWwgYW5kIGhvcml6b250YWxcclxuICAgICAgICBmdW5jdGlvbiBrZXlkb3duSGFuZGxlcihlKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChrZXlkb3duSWQpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xyXG4gICAgICAgICAgICB2YXIga2V5Q29kZSA9IGUua2V5Q29kZTtcclxuXHJcbiAgICAgICAgICAgIC8vdGFiP1xyXG4gICAgICAgICAgICBpZihrZXlDb2RlID09PSA5KXtcclxuICAgICAgICAgICAgICAgIG9uVGFiKGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbHNlIGlmKCFtYXRjaGVzKGFjdGl2ZUVsZW1lbnQsICd0ZXh0YXJlYScpICYmICFtYXRjaGVzKGFjdGl2ZUVsZW1lbnQsICdpbnB1dCcpICYmICFtYXRjaGVzKGFjdGl2ZUVsZW1lbnQsICdzZWxlY3QnKSAmJlxyXG4gICAgICAgICAgICAgICAgYWN0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnRFZGl0YWJsZScpICE9PSBcInRydWVcIiAmJiBhY3RpdmVFbGVtZW50LmdldEF0dHJpYnV0ZSgnY29udGVudEVkaXRhYmxlJykgIT09ICcnICYmXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmtleWJvYXJkU2Nyb2xsaW5nICYmIG9wdGlvbnMuYXV0b1Njcm9sbGluZyl7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9wcmV2ZW50aW5nIHRoZSBzY3JvbGwgd2l0aCBhcnJvdyBrZXlzICYgc3BhY2ViYXIgJiBQYWdlIFVwICYgRG93biBrZXlzXHJcbiAgICAgICAgICAgICAgICB2YXIga2V5Q29udHJvbHMgPSBbNDAsIDM4LCAzMiwgMzMsIDM0XTtcclxuICAgICAgICAgICAgICAgIGlmKGtleUNvbnRyb2xzLmluZGV4T2Yoa2V5Q29kZSkgPiAtMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQoZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29udHJvbFByZXNzZWQgPSBlLmN0cmxLZXk7XHJcblxyXG4gICAgICAgICAgICAgICAga2V5ZG93bklkID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIG9ua2V5ZG93bihlKTtcclxuICAgICAgICAgICAgICAgIH0sMTUwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdG9vbHRpcFRleHRIYW5kbGVyKCl7XHJcbiAgICAgICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXHJcbiAgICAgICAgICAgIHRyaWdnZXIocHJldih0aGlzKSwgJ2NsaWNrJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3RvIHByZXZlbnQgc2Nyb2xsaW5nIHdoaWxlIHpvb21pbmdcclxuICAgICAgICBmdW5jdGlvbiBrZXlVcEhhbmRsZXIoZSl7XHJcbiAgICAgICAgICAgIGlmKGlzV2luZG93Rm9jdXNlZCl7IC8vdGhlIGtleXVwIGdldHMgZmlyZWQgb24gbmV3IHRhYiBjdHJsICsgdCBpbiBGaXJlZm94XHJcbiAgICAgICAgICAgICAgICBjb250cm9sUHJlc3NlZCA9IGUuY3RybEtleTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9iaW5kaW5nIHRoZSBtb3VzZW1vdmUgd2hlbiB0aGUgbW91c2UncyBtaWRkbGUgYnV0dG9uIGlzIHJlbGVhc2VkXHJcbiAgICAgICAgZnVuY3Rpb24gbW91c2VEb3duSGFuZGxlcihlKXtcclxuICAgICAgICAgICAgLy9taWRkbGUgYnV0dG9uXHJcbiAgICAgICAgICAgIGlmIChlLndoaWNoID09IDIpe1xyXG4gICAgICAgICAgICAgICAgb2xkUGFnZVkgPSBlLnBhZ2VZO1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdXNlTW92ZUhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3VuYmluZGluZyB0aGUgbW91c2Vtb3ZlIHdoZW4gdGhlIG1vdXNlJ3MgbWlkZGxlIGJ1dHRvbiBpcyByZWxlYXNlZFxyXG4gICAgICAgIGZ1bmN0aW9uIG1vdXNlVXBIYW5kbGVyKGUpe1xyXG4gICAgICAgICAgICAvL21pZGRsZSBidXR0b25cclxuICAgICAgICAgICAgaWYgKGUud2hpY2ggPT0gMil7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW91c2VNb3ZlSGFuZGxlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogTWFrZXMgc3VyZSB0aGUgdGFiIGtleSB3aWxsIG9ubHkgZm9jdXMgZWxlbWVudHMgd2l0aGluIHRoZSBjdXJyZW50IHNlY3Rpb24vc2xpZGVcclxuICAgICAgICAqIHByZXZlbnRpbmcgdGhpcyB3YXkgZnJvbSBicmVha2luZyB0aGUgcGFnZS5cclxuICAgICAgICAqIEJhc2VkIG9uIFwiTW9kYWxzIGFuZCBrZXlib2FyZCB0cmFwc1wiXHJcbiAgICAgICAgKiBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi9mdW5kYW1lbnRhbHMvYWNjZXNzaWJpbGl0eS9mb2N1cy91c2luZy10YWJpbmRleFxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gb25UYWIoZSl7XHJcbiAgICAgICAgICAgIHZhciBpc1NoaWZ0UHJlc3NlZCA9IGUuc2hpZnRLZXk7XHJcbiAgICAgICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgdmFyIGZvY3VzYWJsZUVsZW1lbnRzID0gZ2V0Rm9jdXNhYmxlcyhnZXRTbGlkZU9yU2VjdGlvbigkKFNFQ1RJT05fQUNUSVZFX1NFTClbMF0pKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXZlbnRBbmRGb2N1c0ZpcnN0KGUpe1xyXG4gICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQoZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9jdXNhYmxlRWxlbWVudHNbMF0gPyBmb2N1c2FibGVFbGVtZW50c1swXS5mb2N1cygpIDogbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9vdXRzaWRlIGFueSBzZWN0aW9uIG9yIHNsaWRlPyBMZXQncyBub3QgaGlqYWNrIHRoZSB0YWIhXHJcbiAgICAgICAgICAgIGlmKGlzRm9jdXNPdXRzaWRlKGUpKXtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9pcyB0aGVyZSBhbiBlbGVtZW50IHdpdGggZm9jdXM/XHJcbiAgICAgICAgICAgIGlmKGFjdGl2ZUVsZW1lbnQpe1xyXG4gICAgICAgICAgICAgICAgaWYoY2xvc2VzdChhY3RpdmVFbGVtZW50LCBTRUNUSU9OX0FDVElWRV9TRUwgKyAnLCcgKyBTRUNUSU9OX0FDVElWRV9TRUwgKyAnICcgKyBTTElERV9BQ1RJVkVfU0VMKSA9PSBudWxsKXtcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVFbGVtZW50ID0gcHJldmVudEFuZEZvY3VzRmlyc3QoZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vbm8gZWxlbWVudCBpZiBmb2N1c2VkPyBMZXQncyBmb2N1cyB0aGUgZmlyc3Qgb25lIG9mIHRoZSBzZWN0aW9uL3NsaWRlXHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBwcmV2ZW50QW5kRm9jdXNGaXJzdChlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy93aGVuIHJlYWNoZWQgdGhlIGZpcnN0IG9yIGxhc3QgZm9jdXNhYmxlIGVsZW1lbnQgb2YgdGhlIHNlY3Rpb24vc2xpZGVcclxuICAgICAgICAgICAgLy93ZSBwcmV2ZW50IHRoZSB0YWIgYWN0aW9uIHRvIGtlZXAgaXQgaW4gdGhlIGxhc3QgZm9jdXNhYmxlIGVsZW1lbnRcclxuICAgICAgICAgICAgaWYoIWlzU2hpZnRQcmVzc2VkICYmIGFjdGl2ZUVsZW1lbnQgPT0gZm9jdXNhYmxlRWxlbWVudHNbZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoIC0gMV0gfHxcclxuICAgICAgICAgICAgICAgIGlzU2hpZnRQcmVzc2VkICYmIGFjdGl2ZUVsZW1lbnQgPT0gZm9jdXNhYmxlRWxlbWVudHNbMF1cclxuICAgICAgICAgICAgKXtcclxuICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0KGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEdldHMgYWxsIHRoZSBmb2N1c2FibGUgZWxlbWVudHMgaW5zaWRlIHRoZSBwYXNzZWQgZWxlbWVudC5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldEZvY3VzYWJsZXMoZWwpe1xyXG4gICAgICAgICAgICByZXR1cm4gW10uc2xpY2UuY2FsbCgkKGZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nLCBlbCkpLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpICE9PSAnLTEnXHJcbiAgICAgICAgICAgICAgICAgICAgLy9hcmUgYWxzbyBub3QgaGlkZGVuIGVsZW1lbnRzIChvciB3aXRoIGhpZGRlbiBwYXJlbnRzKVxyXG4gICAgICAgICAgICAgICAgICAgICYmIGl0ZW0ub2Zmc2V0UGFyZW50ICE9PSBudWxsO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBmb2N1cyBpcyBvdXRzaWRlIGZ1bGxwYWdlLmpzIHNlY3Rpb25zL3NsaWRlcyBvciBub3QuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBpc0ZvY3VzT3V0c2lkZShlKXtcclxuICAgICAgICAgICAgdmFyIGFsbEZvY3VzYWJsZXMgPSBnZXRGb2N1c2FibGVzKGRvY3VtZW50KTtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRGb2N1c0luZGV4ID0gYWxsRm9jdXNhYmxlcy5pbmRleE9mKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICB2YXIgZm9jdXNEZXN0aW5hdGlvbkluZGV4ID0gZS5zaGlmdEtleSA/IGN1cnJlbnRGb2N1c0luZGV4IC0gMSA6IGN1cnJlbnRGb2N1c0luZGV4ICsgMTtcclxuICAgICAgICAgICAgdmFyIGZvY3VzRGVzdGluYXRpb24gPSBhbGxGb2N1c2FibGVzW2ZvY3VzRGVzdGluYXRpb25JbmRleF07XHJcbiAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbkl0ZW1TbGlkZSA9IG51bGxPclNsaWRlKGNsb3Nlc3QoZm9jdXNEZXN0aW5hdGlvbiwgU0xJREVfU0VMKSk7XHJcbiAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbkl0ZW1TZWN0aW9uID0gbnVsbE9yU2VjdGlvbihjbG9zZXN0KGZvY3VzRGVzdGluYXRpb24sIFNFQ1RJT05fU0VMKSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gIWRlc3RpbmF0aW9uSXRlbVNsaWRlICYmICFkZXN0aW5hdGlvbkl0ZW1TZWN0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9TY3JvbGxpbmcgaG9yaXpvbnRhbGx5IHdoZW4gY2xpY2tpbmcgb24gdGhlIHNsaWRlciBjb250cm9scy5cclxuICAgICAgICBmdW5jdGlvbiBzbGlkZUFycm93SGFuZGxlcigpe1xyXG4gICAgICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xyXG4gICAgICAgICAgICB2YXIgc2VjdGlvbiA9IGNsb3Nlc3QodGhpcywgU0VDVElPTl9TRUwpO1xyXG5cclxuICAgICAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cclxuICAgICAgICAgICAgaWYgKGhhc0NsYXNzKHRoaXMsIFNMSURFU19QUkVWKSkge1xyXG4gICAgICAgICAgICAgICAgaWYoaXNTY3JvbGxBbGxvd2VkLm0ubGVmdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVNsaWRlTGVmdChzZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmKGlzU2Nyb2xsQWxsb3dlZC5tLnJpZ2h0KXtcclxuICAgICAgICAgICAgICAgICAgICBtb3ZlU2xpZGVSaWdodChzZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBjaGFuZ2luZyBpc1dpbmRvd0ZvY3VzZWQgdG8gdHJ1ZSBvbiBmb2N1cyBldmVudFxyXG4gICAgICAgIGZ1bmN0aW9uIGZvY3VzSGFuZGxlcigpe1xyXG4gICAgICAgICAgICBpc1dpbmRvd0ZvY3VzZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy93aGVuIG9wZW5pbmcgYSBuZXcgdGFiIChjdHJsICsgdCksIGBjb250cm9sYCB3b24ndCBiZSBwcmVzc2VkIHdoZW4gY29taW5nIGJhY2suXHJcbiAgICAgICAgZnVuY3Rpb24gYmx1ckhhbmRsZXIoKXtcclxuICAgICAgICAgICAgaXNXaW5kb3dGb2N1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnRyb2xQcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1Njcm9sbHMgdG8gdGhlIHNlY3Rpb24gd2hlbiBjbGlja2luZyB0aGUgbmF2aWdhdGlvbiBidWxsZXRcclxuICAgICAgICBmdW5jdGlvbiBzZWN0aW9uQnVsbGV0SGFuZGxlcihlKXtcclxuICAgICAgICAgICAgcHJldmVudERlZmF1bHQoZSk7XHJcblxyXG4gICAgICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xyXG4gICAgICAgICAgICB2YXIgaW5kZXhCdWxsZXQgPSBpbmRleChjbG9zZXN0KHRoaXMsIFNFQ1RJT05fTkFWX1NFTCArICcgbGknKSk7XHJcbiAgICAgICAgICAgIHNjcm9sbFBhZ2UoJChTRUNUSU9OX1NFTClbaW5kZXhCdWxsZXRdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vU2Nyb2xscyB0aGUgc2xpZGVyIHRvIHRoZSBnaXZlbiBzbGlkZSBkZXN0aW5hdGlvbiBmb3IgdGhlIGdpdmVuIHNlY3Rpb25cclxuICAgICAgICBmdW5jdGlvbiBzbGlkZUJ1bGxldEhhbmRsZXIoZSl7XHJcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0KGUpO1xyXG5cclxuICAgICAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cclxuICAgICAgICAgICAgdmFyIHNsaWRlcyA9ICQoU0xJREVTX1dSQVBQRVJfU0VMLCBjbG9zZXN0KHRoaXMsIFNFQ1RJT05fU0VMKSlbMF07XHJcbiAgICAgICAgICAgIHZhciBkZXN0aW55ID0gJChTTElERV9TRUwsIHNsaWRlcylbaW5kZXgoY2xvc2VzdCh0aGlzLCAnbGknKSldO1xyXG5cclxuICAgICAgICAgICAgbGFuZHNjYXBlU2Nyb2xsKHNsaWRlcywgZGVzdGlueSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL01lbnUgaXRlbSBoYW5kbGVyIHdoZW4gbm90IHVzaW5nIGFuY2hvcnMgb3IgdXNpbmcgbG9ja0FuY2hvcnM6dHJ1ZVxyXG4gICAgICAgIGZ1bmN0aW9uIG1lbnVJdGVtc0hhbmRsZXIoZSl7XHJcbiAgICAgICAgICAgIGlmKCQob3B0aW9ucy5tZW51KVswXSAmJiAob3B0aW9ucy5sb2NrQW5jaG9ycyB8fCAhb3B0aW9ucy5hbmNob3JzLmxlbmd0aCkpe1xyXG4gICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQoZSk7XHJcbiAgICAgICAgICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xyXG4gICAgICAgICAgICAgICAgbW92ZVRvKHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLW1lbnVhbmNob3InKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogS2V5ZG93biBldmVudFxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gb25rZXlkb3duKGUpe1xyXG4gICAgICAgICAgICB2YXIgc2hpZnRQcmVzc2VkID0gZS5zaGlmdEtleTtcclxuICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xyXG4gICAgICAgICAgICB2YXIgaXNNZWRpYUZvY3VzZWQgPSBtYXRjaGVzKGFjdGl2ZUVsZW1lbnQsICd2aWRlbycpIHx8IG1hdGNoZXMoYWN0aXZlRWxlbWVudCwgJ2F1ZGlvJyk7XHJcblxyXG4gICAgICAgICAgICAvL2RvIG5vdGhpbmcgaWYgd2UgY2FuIG5vdCBzY3JvbGwgb3Igd2UgYXJlIG5vdCB1c2luZyBob3Jpem90bmFsIGtleSBhcnJvd3MuXHJcbiAgICAgICAgICAgIGlmKCFjYW5TY3JvbGwgJiYgWzM3LDM5XS5pbmRleE9mKGUua2V5Q29kZSkgPCAwKXtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgIC8vdXBcclxuICAgICAgICAgICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAgICAgICBjYXNlIDMzOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGlzU2Nyb2xsQWxsb3dlZC5rLnVwKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVNlY3Rpb25VcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAvL2Rvd25cclxuICAgICAgICAgICAgICAgIGNhc2UgMzI6IC8vc3BhY2ViYXJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoc2hpZnRQcmVzc2VkICYmIGlzU2Nyb2xsQWxsb3dlZC5rLnVwICYmICFpc01lZGlhRm9jdXNlZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVTZWN0aW9uVXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcclxuICAgICAgICAgICAgICAgIGNhc2UgMzQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXNTY3JvbGxBbGxvd2VkLmsuZG93bil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwYWNlIGJhcj9cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZS5rZXlDb2RlICE9PSAzMiB8fCAhaXNNZWRpYUZvY3VzZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVNlY3Rpb25Eb3duKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9Ib21lXHJcbiAgICAgICAgICAgICAgICBjYXNlIDM2OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGlzU2Nyb2xsQWxsb3dlZC5rLnVwKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVRvKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAvL0VuZFxyXG4gICAgICAgICAgICAgICAgY2FzZSAzNTpcclxuICAgICAgICAgICAgICAgICAgICAgaWYoaXNTY3JvbGxBbGxvd2VkLmsuZG93bil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVUbyggJChTRUNUSU9OX1NFTCkubGVuZ3RoICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vbGVmdFxyXG4gICAgICAgICAgICAgICAgY2FzZSAzNzpcclxuICAgICAgICAgICAgICAgICAgICBpZihpc1Njcm9sbEFsbG93ZWQuay5sZWZ0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVNsaWRlTGVmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAvL3JpZ2h0XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGlzU2Nyb2xsQWxsb3dlZC5rLnJpZ2h0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVNsaWRlUmlnaHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47IC8vIGV4aXQgdGhpcyBoYW5kbGVyIGZvciBvdGhlciBrZXlzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogRGV0ZWN0aW5nIHRoZSBkaXJlY3Rpb24gb2YgdGhlIG1vdXNlIG1vdmVtZW50LlxyXG4gICAgICAgICogVXNlZCBvbmx5IGZvciB0aGUgbWlkZGxlIGJ1dHRvbiBvZiB0aGUgbW91c2UuXHJcbiAgICAgICAgKi9cclxuICAgICAgICB2YXIgb2xkUGFnZVkgPSAwO1xyXG4gICAgICAgIGZ1bmN0aW9uIG1vdXNlTW92ZUhhbmRsZXIoZSl7XHJcbiAgICAgICAgICAgIGlmKCFvcHRpb25zLmF1dG9TY3JvbGxpbmcpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNhblNjcm9sbCl7XHJcbiAgICAgICAgICAgICAgICAvLyBtb3ZpbmcgdXBcclxuICAgICAgICAgICAgICAgIGlmIChlLnBhZ2VZIDwgb2xkUGFnZVkgJiYgaXNTY3JvbGxBbGxvd2VkLm0udXApe1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdmVTZWN0aW9uVXAoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBtb3ZpbmcgZG93blxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihlLnBhZ2VZID4gb2xkUGFnZVkgJiYgaXNTY3JvbGxBbGxvd2VkLm0uZG93bil7XHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVNlY3Rpb25Eb3duKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2xkUGFnZVkgPSBlLnBhZ2VZO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBTY3JvbGxzIGhvcml6b250YWwgc2xpZGVycy5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGxhbmRzY2FwZVNjcm9sbChzbGlkZXMsIGRlc3RpbnksIGRpcmVjdGlvbil7XHJcbiAgICAgICAgICAgIHZhciBzZWN0aW9uID0gY2xvc2VzdChzbGlkZXMsIFNFQ1RJT05fU0VMKTtcclxuICAgICAgICAgICAgdmFyIHYgPSB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXM6IHNsaWRlcyxcclxuICAgICAgICAgICAgICAgIGRlc3Rpbnk6IGRlc3RpbnksXHJcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgIGRlc3RpbnlQb3M6IHtsZWZ0OiBkZXN0aW55Lm9mZnNldExlZnR9LFxyXG4gICAgICAgICAgICAgICAgc2xpZGVJbmRleDogaW5kZXgoZGVzdGlueSksXHJcbiAgICAgICAgICAgICAgICBzZWN0aW9uOiBzZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgc2VjdGlvbkluZGV4OiBpbmRleChzZWN0aW9uLCBTRUNUSU9OX1NFTCksXHJcbiAgICAgICAgICAgICAgICBhbmNob3JMaW5rOiBzZWN0aW9uLmdldEF0dHJpYnV0ZSgnZGF0YS1hbmNob3InKSxcclxuICAgICAgICAgICAgICAgIHNsaWRlc05hdjogJChTTElERVNfTkFWX1NFTCwgc2VjdGlvbilbMF0sXHJcbiAgICAgICAgICAgICAgICBzbGlkZUFuY2hvcjogZ2V0QW5jaG9yKGRlc3RpbnkpLFxyXG4gICAgICAgICAgICAgICAgcHJldlNsaWRlOiAkKFNMSURFX0FDVElWRV9TRUwsIHNlY3Rpb24pWzBdLFxyXG4gICAgICAgICAgICAgICAgcHJldlNsaWRlSW5kZXg6IGluZGV4KCQoU0xJREVfQUNUSVZFX1NFTCwgc2VjdGlvbilbMF0pLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vY2FjaGluZyB0aGUgdmFsdWUgb2YgaXNSZXNpemluZyBhdCB0aGUgbW9tbWVudCB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkXHJcbiAgICAgICAgICAgICAgICAvL2JlY2F1c2UgaXQgd2lsbCBiZSBjaGVja2VkIGxhdGVyIGluc2lkZSBhIHNldFRpbWVvdXQgYW5kIHRoZSB2YWx1ZSBtaWdodCBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIGxvY2FsSXNSZXNpemluZzogaXNSZXNpemluZ1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2LnhNb3ZlbWVudCA9IGdldFhtb3ZlbWVudCh2LnByZXZTbGlkZUluZGV4LCB2LnNsaWRlSW5kZXgpO1xyXG4gICAgICAgICAgICB2LmRpcmVjdGlvbiA9IHYuZGlyZWN0aW9uID8gdi5kaXJlY3Rpb24gOiB2LnhNb3ZlbWVudDtcclxuXHJcbiAgICAgICAgICAgIC8vaW1wb3J0YW50ISEgT25seSBkbyBpdCB3aGVuIG5vdCByZXNpemluZ1xyXG4gICAgICAgICAgICBpZighdi5sb2NhbElzUmVzaXppbmcpe1xyXG4gICAgICAgICAgICAgICAgLy9wcmV2ZW50aW5nIGZyb20gc2Nyb2xsaW5nIHRvIHRoZSBuZXh0L3ByZXYgc2VjdGlvbiB3aGVuIHVzaW5nIHNjcm9sbEhvcml6b250YWxseVxyXG4gICAgICAgICAgICAgICAgY2FuU2Nyb2xsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMub25TbGlkZUxlYXZlKXtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2lmIHRoZSBzaXRlIGlzIG5vdCBqdXN0IHJlc2l6aW5nIGFuZCByZWFkanVzdGluZyB0aGUgc2xpZGVzXHJcbiAgICAgICAgICAgICAgICBpZighdi5sb2NhbElzUmVzaXppbmcgJiYgdi54TW92ZW1lbnQhPT0nbm9uZScpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGlzRnVuY3Rpb24oIG9wdGlvbnMub25TbGlkZUxlYXZlICkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggZmlyZUNhbGxiYWNrKCdvblNsaWRlTGVhdmUnLCB2KSA9PT0gZmFsc2Upe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVNb3ZpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWRkQ2xhc3MoZGVzdGlueSwgQUNUSVZFKTtcclxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3Moc2libGluZ3MoZGVzdGlueSksIEFDVElWRSk7XHJcblxyXG4gICAgICAgICAgICBpZighdi5sb2NhbElzUmVzaXppbmcpe1xyXG4gICAgICAgICAgICAgICAgc3RvcE1lZGlhKHYucHJldlNsaWRlKTtcclxuICAgICAgICAgICAgICAgIGxhenlMb2FkKGRlc3RpbnkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZighb3B0aW9ucy5sb29wSG9yaXpvbnRhbCAmJiBvcHRpb25zLmNvbnRyb2xBcnJvd3Mpe1xyXG4gICAgICAgICAgICAgICAgLy9oaWRkaW5nIGl0IGZvciB0aGUgZmlzdCBzbGlkZSwgc2hvd2luZyBmb3IgdGhlIHJlc3RcclxuICAgICAgICAgICAgICAgIHRvZ2dsZSgkKFNMSURFU19BUlJPV19QUkVWX1NFTCwgc2VjdGlvbiksIHYuc2xpZGVJbmRleCE9PTApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vaGlkZGluZyBpdCBmb3IgdGhlIGxhc3Qgc2xpZGUsIHNob3dpbmcgZm9yIHRoZSByZXN0XHJcbiAgICAgICAgICAgICAgICB0b2dnbGUoJChTTElERVNfQVJST1dfTkVYVF9TRUwsIHNlY3Rpb24pLCBuZXh0KGRlc3RpbnkpICE9IG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL29ubHkgY2hhbmdpbmcgdGhlIFVSTCBpZiB0aGUgc2xpZGVzIGFyZSBpbiB0aGUgY3VycmVudCBzZWN0aW9uIChub3QgZm9yIHJlc2l6ZSByZS1hZGp1c3RpbmcpXHJcbiAgICAgICAgICAgIGlmKGhhc0NsYXNzKHNlY3Rpb24sIEFDVElWRSkgJiYgIXYubG9jYWxJc1Jlc2l6aW5nKXtcclxuICAgICAgICAgICAgICAgIHNldFN0YXRlKHYuc2xpZGVJbmRleCwgdi5zbGlkZUFuY2hvciwgdi5hbmNob3JMaW5rLCB2LnNlY3Rpb25JbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHBlcmZvcm1Ib3Jpem9udGFsTW92ZShzbGlkZXMsIHYsIHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFmdGVyU2xpZGVMb2Fkcyh2KXtcclxuICAgICAgICAgICAgYWN0aXZlU2xpZGVzTmF2aWdhdGlvbih2LnNsaWRlc05hdiwgdi5zbGlkZUluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIC8vaWYgdGhlIHNpdGUgaXMgbm90IGp1c3QgcmVzaXppbmcgYW5kIHJlYWRqdXN0aW5nIHRoZSBzbGlkZXNcclxuICAgICAgICAgICAgaWYoIXYubG9jYWxJc1Jlc2l6aW5nKXtcclxuICAgICAgICAgICAgICAgIGlmKGlzRnVuY3Rpb24oIG9wdGlvbnMuYWZ0ZXJTbGlkZUxvYWQgKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyZUNhbGxiYWNrKCdhZnRlclNsaWRlTG9hZCcsIHYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vbmVlZHMgdG8gYmUgaW5zaWRlIHRoZSBjb25kaXRpb24gdG8gcHJldmVudCBwcm9ibGVtcyB3aXRoIGNvbnRpbnVvdXNWZXJ0aWNhbCBhbmQgc2Nyb2xsSG9yaXpvbnRhbGx5XHJcbiAgICAgICAgICAgICAgICAvL2FuZCB0byBwcmV2ZW50IGRvdWJsZSBzY3JvbGwgcmlnaHQgYWZ0ZXIgYSB3aW5kb3dzIHJlc2l6ZVxyXG4gICAgICAgICAgICAgICAgY2FuU2Nyb2xsID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBwbGF5TWVkaWEodi5kZXN0aW55KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9sZXR0aW5nIHRoZW0gc2xpZGUgYWdhaW5cclxuICAgICAgICAgICAgc2xpZGVNb3ZpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogUGVyZm9ybXMgdGhlIGhvcml6b250YWwgbW92ZW1lbnQuIChDU1MzIG9yIGpRdWVyeSlcclxuICAgICAgICAqXHJcbiAgICAgICAgKiBAcGFyYW0gZmlyZUNhbGxiYWNrIHtCb29sfSAtIGRldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gZmlyZSB0aGUgY2FsbGJhY2tcclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHBlcmZvcm1Ib3Jpem9udGFsTW92ZShzbGlkZXMsIHYsIGZpcmVDYWxsYmFjayl7XHJcbiAgICAgICAgICAgIHZhciBkZXN0aW55UG9zID0gdi5kZXN0aW55UG9zO1xyXG5cclxuICAgICAgICAgICAgaWYob3B0aW9ucy5jc3MzKXtcclxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGUzZCA9ICd0cmFuc2xhdGUzZCgtJyArIE1hdGgucm91bmQoZGVzdGlueVBvcy5sZWZ0KSArICdweCwgMHB4LCAwcHgpJztcclxuXHJcbiAgICAgICAgICAgICAgICBGUC50ZXN0LnRyYW5zbGF0ZTNkSFt2LnNlY3Rpb25JbmRleF0gPSB0cmFuc2xhdGUzZDtcclxuICAgICAgICAgICAgICAgIGNzcyhhZGRBbmltYXRpb24oJChTTElERVNfQ09OVEFJTkVSX1NFTCwgc2xpZGVzKSksIGdldFRyYW5zZm9ybXModHJhbnNsYXRlM2QpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBhZnRlclNsaWRlTG9hZHNJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihmaXJlQ2FsbGJhY2spe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlclNsaWRlTG9hZHModik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgb3B0aW9ucy5zY3JvbGxpbmdTcGVlZCk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgRlAudGVzdC5sZWZ0W3Yuc2VjdGlvbkluZGV4XSA9IE1hdGgucm91bmQoZGVzdGlueVBvcy5sZWZ0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxUbyhzbGlkZXMsIE1hdGgucm91bmQoZGVzdGlueVBvcy5sZWZ0KSwgb3B0aW9ucy5zY3JvbGxpbmdTcGVlZCwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihmaXJlQ2FsbGJhY2spe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlclNsaWRlTG9hZHModik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU2V0cyB0aGUgc3RhdGUgZm9yIHRoZSBob3Jpem9udGFsIGJ1bGxldCBuYXZpZ2F0aW9ucy5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2ZVNsaWRlc05hdmlnYXRpb24oc2xpZGVzTmF2LCBzbGlkZUluZGV4KXtcclxuICAgICAgICAgICAgaWYob3B0aW9ucy5zbGlkZXNOYXZpZ2F0aW9uICYmIHNsaWRlc05hdiAhPSBudWxsKXtcclxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKCQoQUNUSVZFX1NFTCwgc2xpZGVzTmF2KSwgQUNUSVZFKTtcclxuICAgICAgICAgICAgICAgIGFkZENsYXNzKCAkKCdhJywgJCgnbGknLCBzbGlkZXNOYXYpW3NsaWRlSW5kZXhdICksIEFDVElWRSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBwcmV2aW91c0hlaWdodCA9IHdpbmRvd3NIZWlnaHQ7XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgKiBSZXNpemUgZXZlbnQgaGFuZGxlci5cclxuICAgICAgICAqLyAgICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gcmVzaXplSGFuZGxlcigpe1xyXG4gICAgICAgICAgICBpc1Jlc2l6aW5nID0gdHJ1ZTtcclxuIFxyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQocmVzaXplSWQpO1xyXG5cclxuICAgICAgICAgICAgLy9pbiBvcmRlciB0byBjYWxsIHRoZSBmdW5jdGlvbnMgb25seSB3aGVuIHRoZSByZXNpemUgaXMgZmluaXNoZWRcclxuICAgICAgICAgICAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQyOTg2MTIvanF1ZXJ5LWhvdy10by1jYWxsLXJlc2l6ZS1ldmVudC1vbmx5LW9uY2UtaXRzLWZpbmlzaGVkLXJlc2l6aW5nICAgIFxyXG4gICAgICAgICAgICByZXNpemVJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2lzc3VlICMzMzM2IFxyXG4gICAgICAgICAgICAgICAgLy8oc29tZSBhcHBzIG9yIGJyb3dzZXJzLCBsaWtlIENocm9tZS9GaXJlZm94IGZvciBNb2JpbGUgdGFrZSB0aW1lIHRvIHJlcG9ydCB0aGUgcmVhbCBoZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAvL3NvIHdlIGNoZWNrIGl0IDMgdGltZXMgd2l0aCBpbnRlcnZhbHMgaW4gdGhhdCBjYXNlXHJcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpPCA0OyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZUhhbmRsZXJJZCA9IHNldFRpbWVvdXQocmVzaXplQWN0aW9ucywgMjAwICogaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFdoZW4gcmVzaXppbmcgdGhlIHNpdGUsIHdlIGFkanVzdCB0aGUgaGVpZ2h0cyBvZiB0aGUgc2VjdGlvbnMsIHNsaW1TY3JvbGwuLi5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHJlc2l6ZUFjdGlvbnMoKXtcclxuXHJcbiAgICAgICAgICAgIC8vY2hlY2tpbmcgaWYgaXQgbmVlZHMgdG8gZ2V0IHJlc3BvbnNpdmVcclxuICAgICAgICAgICAgcmVzcG9uc2l2ZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVidWlsZCBpbW1lZGlhdGVseSBvbiB0b3VjaCBkZXZpY2VzXHJcbiAgICAgICAgICAgIGlmIChpc1RvdWNoRGV2aWNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9pZiB0aGUga2V5Ym9hcmQgaXMgTk9UIHZpc2libGVcclxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlcyhhY3RpdmVFbGVtZW50LCAndGV4dGFyZWEnKSAmJiAhbWF0Y2hlcyhhY3RpdmVFbGVtZW50LCAnaW5wdXQnKSAmJiAhbWF0Y2hlcyhhY3RpdmVFbGVtZW50LCAnc2VsZWN0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudEhlaWdodCA9IGdldFdpbmRvd0hlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL21ha2luZyBzdXJlIHRoZSBjaGFuZ2UgaW4gdGhlIHZpZXdwb3J0IHNpemUgaXMgZW5vdWdoIHRvIGZvcmNlIGEgcmVidWlsZC4gKDIwICUgb2YgdGhlIHdpbmRvdyB0byBhdm9pZCBwcm9ibGVtcyB3aGVuIGhpZGRpbmcgc2Nyb2xsIGJhcnMpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIE1hdGguYWJzKGN1cnJlbnRIZWlnaHQgLSBwcmV2aW91c0hlaWdodCkgPiAoMjAgKiBNYXRoLm1heChwcmV2aW91c0hlaWdodCwgY3VycmVudEhlaWdodCkgLyAxMDApICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlQnVpbGQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzSGVpZ2h0ID0gY3VycmVudEhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIGFkanVzdFRvTmV3Vmlld3BvcnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBDaGVja3MgaWYgdGhlIHNpdGUgbmVlZHMgdG8gZ2V0IHJlc3BvbnNpdmUgYW5kIGRpc2FibGVzIGF1dG9TY3JvbGxpbmcgaWYgc28uXHJcbiAgICAgICAgKiBBIGNsYXNzIGBmcC1yZXNwb25zaXZlYCBpcyBhZGRlZCB0byB0aGUgcGx1Z2luJ3MgY29udGFpbmVyIGluIGNhc2UgdGhlIHVzZXIgd2FudHMgdG8gdXNlIGl0IGZvciBoaXMgb3duIHJlc3BvbnNpdmUgQ1NTLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gcmVzcG9uc2l2ZSgpe1xyXG4gICAgICAgICAgICB2YXIgd2lkdGhMaW1pdCA9IG9wdGlvbnMucmVzcG9uc2l2ZSB8fCBvcHRpb25zLnJlc3BvbnNpdmVXaWR0aDsgLy9iYWNrd2FyZHMgY29tcGF0aWJsaXR5XHJcbiAgICAgICAgICAgIHZhciBoZWlnaHRMaW1pdCA9IG9wdGlvbnMucmVzcG9uc2l2ZUhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIC8vb25seSBjYWxjdWxhdGluZyB3aGF0IHdlIG5lZWQuIFJlbWVtYmVyIGl0cyBjYWxsZWQgb24gdGhlIHJlc2l6ZSBldmVudC5cclxuICAgICAgICAgICAgdmFyIGlzQnJlYWtpbmdQb2ludFdpZHRoID0gd2lkdGhMaW1pdCAmJiB3aW5kb3cuaW5uZXJXaWR0aCA8IHdpZHRoTGltaXQ7XHJcbiAgICAgICAgICAgIHZhciBpc0JyZWFraW5nUG9pbnRIZWlnaHQgPSBoZWlnaHRMaW1pdCAmJiB3aW5kb3cuaW5uZXJIZWlnaHQgPCBoZWlnaHRMaW1pdDtcclxuXHJcbiAgICAgICAgICAgIGlmKHdpZHRoTGltaXQgJiYgaGVpZ2h0TGltaXQpe1xyXG4gICAgICAgICAgICAgICAgc2V0UmVzcG9uc2l2ZShpc0JyZWFraW5nUG9pbnRXaWR0aCB8fCBpc0JyZWFraW5nUG9pbnRIZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYod2lkdGhMaW1pdCl7XHJcbiAgICAgICAgICAgICAgICBzZXRSZXNwb25zaXZlKGlzQnJlYWtpbmdQb2ludFdpZHRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGhlaWdodExpbWl0KXtcclxuICAgICAgICAgICAgICAgIHNldFJlc3BvbnNpdmUoaXNCcmVha2luZ1BvaW50SGVpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBBZGRzIHRyYW5zaXRpb24gYW5pbWF0aW9ucyBmb3IgdGhlIGdpdmVuIGVsZW1lbnRcclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGFkZEFuaW1hdGlvbihlbGVtZW50KXtcclxuICAgICAgICAgICAgdmFyIHRyYW5zaXRpb24gPSAnYWxsICcgKyBvcHRpb25zLnNjcm9sbGluZ1NwZWVkICsgJ21zICcgKyBvcHRpb25zLmVhc2luZ2NzczM7XHJcblxyXG4gICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCBOT19UUkFOU0lUSU9OKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNzcyhlbGVtZW50LCB7XHJcbiAgICAgICAgICAgICAgICAnLXdlYmtpdC10cmFuc2l0aW9uJzogdHJhbnNpdGlvbixcclxuICAgICAgICAgICAgICAgICd0cmFuc2l0aW9uJzogdHJhbnNpdGlvblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogUmVtb3ZlIHRyYW5zaXRpb24gYW5pbWF0aW9ucyBmb3IgdGhlIGdpdmVuIGVsZW1lbnRcclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUFuaW1hdGlvbihlbGVtZW50KXtcclxuICAgICAgICAgICAgcmV0dXJuIGFkZENsYXNzKGVsZW1lbnQsIE5PX1RSQU5TSVRJT04pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBBY3RpdmF0aW5nIHRoZSB2ZXJ0aWNhbCBuYXZpZ2F0aW9uIGJ1bGxldHMgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBzbGlkZSBuYW1lLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGVOYXZEb3RzKG5hbWUsIHNlY3Rpb25JbmRleCl7XHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMubmF2aWdhdGlvbiAmJiAkKFNFQ1RJT05fTkFWX1NFTClbMF0gIT0gbnVsbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoJChBQ1RJVkVfU0VMLCAkKFNFQ1RJT05fTkFWX1NFTClbMF0pLCBBQ1RJVkUpO1xyXG4gICAgICAgICAgICAgICAgaWYobmFtZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoICQoJ2FbaHJlZj1cIiMnICsgbmFtZSArICdcIl0nLCAkKFNFQ1RJT05fTkFWX1NFTClbMF0pLCBBQ1RJVkUpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoJCgnYScsICQoJ2xpJywgJChTRUNUSU9OX05BVl9TRUwpWzBdKVtzZWN0aW9uSW5kZXhdKSwgQUNUSVZFKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBBY3RpdmF0aW5nIHRoZSB3ZWJzaXRlIG1haW4gbWVudSBlbGVtZW50cyBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIHNsaWRlIG5hbWUuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZU1lbnVFbGVtZW50KG5hbWUpe1xyXG4gICAgICAgICAgICAkKG9wdGlvbnMubWVudSkuZm9yRWFjaChmdW5jdGlvbihtZW51KSB7XHJcbiAgICAgICAgICAgICAgICBpZihvcHRpb25zLm1lbnUgJiYgbWVudSAhPSBudWxsKXtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcygkKEFDVElWRV9TRUwsIG1lbnUpLCBBQ1RJVkUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKCQoJ1tkYXRhLW1lbnVhbmNob3I9XCInK25hbWUrJ1wiXScsIG1lbnUpLCBBQ1RJVkUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU2V0cyB0byBhY3RpdmUgdGhlIGN1cnJlbnQgbWVudSBhbmQgdmVydGljYWwgbmF2IGl0ZW1zLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGVNZW51QW5kTmF2KGFuY2hvciwgaW5kZXgpe1xyXG4gICAgICAgICAgICBhY3RpdmF0ZU1lbnVFbGVtZW50KGFuY2hvcik7XHJcbiAgICAgICAgICAgIGFjdGl2YXRlTmF2RG90cyhhbmNob3IsIGluZGV4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogUmV0dW5zIGB1cGAgb3IgYGRvd25gIGRlcGVuZGluZyBvbiB0aGUgc2Nyb2xsaW5nIG1vdmVtZW50IHRvIHJlYWNoIGl0cyBkZXN0aW5hdGlvblxyXG4gICAgICAgICogZnJvbSB0aGUgY3VycmVudCBzZWN0aW9uLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0WW1vdmVtZW50KGRlc3Rpbnkpe1xyXG4gICAgICAgICAgICB2YXIgZnJvbUluZGV4ID0gaW5kZXgoJChTRUNUSU9OX0FDVElWRV9TRUwpWzBdLCBTRUNUSU9OX1NFTCk7XHJcbiAgICAgICAgICAgIHZhciB0b0luZGV4ID0gaW5kZXgoZGVzdGlueSwgU0VDVElPTl9TRUwpO1xyXG4gICAgICAgICAgICBpZiggZnJvbUluZGV4ID09IHRvSW5kZXgpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihmcm9tSW5kZXggPiB0b0luZGV4KXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAndXAnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAnZG93bic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFJldHVucyBgcmlnaHRgIG9yIGBsZWZ0YCBkZXBlbmRpbmcgb24gdGhlIHNjcm9sbGluZyBtb3ZlbWVudCB0byByZWFjaCBpdHMgZGVzdGluYXRpb25cclxuICAgICAgICAqIGZyb20gdGhlIGN1cnJlbnQgc2xpZGUuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBnZXRYbW92ZW1lbnQoZnJvbUluZGV4LCB0b0luZGV4KXtcclxuICAgICAgICAgICAgaWYoIGZyb21JbmRleCA9PSB0b0luZGV4KXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnbm9uZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoZnJvbUluZGV4ID4gdG9JbmRleCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2xlZnQnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAncmlnaHQnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkVGFibGVDbGFzcyhlbGVtZW50KXtcclxuICAgICAgICAgICAgLy9JbiBjYXNlIHdlIGFyZSBzdHlsaW5nIGZvciB0aGUgMm5kIHRpbWUgYXMgaW4gd2l0aCByZXBvbnNpdmVTbGlkZXNcclxuICAgICAgICAgICAgaWYoIWhhc0NsYXNzKGVsZW1lbnQsIFRBQkxFKSl7XHJcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgd3JhcHBlci5jbGFzc05hbWUgPSBUQUJMRV9DRUxMO1xyXG4gICAgICAgICAgICAgICAgd3JhcHBlci5zdHlsZS5oZWlnaHQgPSBnZXRUYWJsZUhlaWdodChlbGVtZW50KSArICdweCc7XHJcblxyXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgVEFCTEUpO1xyXG4gICAgICAgICAgICAgICAgd3JhcElubmVyKGVsZW1lbnQsIHdyYXBwZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRUYWJsZUhlaWdodChlbGVtZW50KXtcclxuICAgICAgICAgICAgdmFyIHNlY3Rpb25IZWlnaHQgPSB3aW5kb3dzSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgaWYob3B0aW9ucy5wYWRkaW5nVG9wIHx8IG9wdGlvbnMucGFkZGluZ0JvdHRvbSl7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VjdGlvbiA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBpZighaGFzQ2xhc3Moc2VjdGlvbiwgU0VDVElPTikpe1xyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24gPSBjbG9zZXN0KGVsZW1lbnQsIFNFQ1RJT05fU0VMKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFkZGluZ3MgPSBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKHNlY3Rpb24pWydwYWRkaW5nLXRvcCddKSArIHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoc2VjdGlvbilbJ3BhZGRpbmctYm90dG9tJ10pO1xyXG4gICAgICAgICAgICAgICAgc2VjdGlvbkhlaWdodCA9ICh3aW5kb3dzSGVpZ2h0IC0gcGFkZGluZ3MpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc2VjdGlvbkhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogQWRkcyBhIGNzczMgdHJhbnNmb3JtIHByb3BlcnR5IHRvIHRoZSBjb250YWluZXIgY2xhc3Mgd2l0aCBvciB3aXRob3V0IGFuaW1hdGlvbiBkZXBlbmRpbmcgb24gdGhlIGFuaW1hdGVkIHBhcmFtLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtQ29udGFpbmVyKHRyYW5zbGF0ZTNkLCBhbmltYXRlZCl7XHJcbiAgICAgICAgICAgIGlmKGFuaW1hdGVkKXtcclxuICAgICAgICAgICAgICAgIGFkZEFuaW1hdGlvbihjb250YWluZXIpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHJlbW92ZUFuaW1hdGlvbihjb250YWluZXIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjc3MoY29udGFpbmVyLCBnZXRUcmFuc2Zvcm1zKHRyYW5zbGF0ZTNkKSk7XHJcbiAgICAgICAgICAgIEZQLnRlc3QudHJhbnNsYXRlM2QgPSB0cmFuc2xhdGUzZDtcclxuXHJcbiAgICAgICAgICAgIC8vc3luY3Jvbm91c2x5IHJlbW92aW5nIHRoZSBjbGFzcyBhZnRlciB0aGUgYW5pbWF0aW9uIGhhcyBiZWVuIGFwcGxpZWQuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGNvbnRhaW5lciwgTk9fVFJBTlNJVElPTik7XHJcbiAgICAgICAgICAgIH0sMTApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBHZXRzIGEgc2VjdGlvbiBieSBpdHMgYW5jaG9yIC8gaW5kZXhcclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNlY3Rpb25CeUFuY2hvcihzZWN0aW9uQW5jaG9yKXtcclxuICAgICAgICAgICAgdmFyIHNlY3Rpb24gPSAkKFNFQ1RJT05fU0VMICsgJ1tkYXRhLWFuY2hvcj1cIicrc2VjdGlvbkFuY2hvcisnXCJdJywgY29udGFpbmVyKVswXTtcclxuICAgICAgICAgICAgaWYoIXNlY3Rpb24pe1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlY3Rpb25JbmRleCA9IHR5cGVvZiBzZWN0aW9uQW5jaG9yICE9PSAndW5kZWZpbmVkJyA/IHNlY3Rpb25BbmNob3IgLTEgOiAwO1xyXG4gICAgICAgICAgICAgICAgc2VjdGlvbiA9ICQoU0VDVElPTl9TRUwpW3NlY3Rpb25JbmRleF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzZWN0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBHZXRzIGEgc2xpZGUgaW5zaWRlIGEgZ2l2ZW4gc2VjdGlvbiBieSBpdHMgYW5jaG9yIC8gaW5kZXhcclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNsaWRlQnlBbmNob3Ioc2xpZGVBbmNob3IsIHNlY3Rpb24pe1xyXG4gICAgICAgICAgICB2YXIgc2xpZGUgPSAkKFNMSURFX1NFTCArICdbZGF0YS1hbmNob3I9XCInK3NsaWRlQW5jaG9yKydcIl0nLCBzZWN0aW9uKVswXTtcclxuICAgICAgICAgICAgaWYoc2xpZGUgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgICAgICBzbGlkZUFuY2hvciA9IHR5cGVvZiBzbGlkZUFuY2hvciAhPT0gJ3VuZGVmaW5lZCcgPyBzbGlkZUFuY2hvciA6IDA7XHJcbiAgICAgICAgICAgICAgICBzbGlkZSA9ICQoU0xJREVfU0VMLCBzZWN0aW9uKVtzbGlkZUFuY2hvcl07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzbGlkZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU2Nyb2xscyB0byB0aGUgZ2l2ZW4gc2VjdGlvbiBhbmQgc2xpZGUgYW5jaG9yc1xyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2Nyb2xsUGFnZUFuZFNsaWRlKHNlY3Rpb25BbmNob3IsIHNsaWRlQW5jaG9yKXtcclxuICAgICAgICAgICAgdmFyIHNlY3Rpb24gPSBnZXRTZWN0aW9uQnlBbmNob3Ioc2VjdGlvbkFuY2hvcik7XHJcblxyXG4gICAgICAgICAgICAvL2RvIG5vdGhpbmcgaWYgdGhlcmUncyBubyBzZWN0aW9uIHdpdGggdGhlIGdpdmVuIGFuY2hvciBuYW1lXHJcbiAgICAgICAgICAgIGlmKHNlY3Rpb24gPT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNsaWRlID0gZ2V0U2xpZGVCeUFuY2hvcihzbGlkZUFuY2hvciwgc2VjdGlvbik7XHJcblxyXG4gICAgICAgICAgICAvL3dlIG5lZWQgdG8gc2Nyb2xsIHRvIHRoZSBzZWN0aW9uIGFuZCB0aGVuIHRvIHRoZSBzbGlkZVxyXG4gICAgICAgICAgICBpZiAoZ2V0QW5jaG9yKHNlY3Rpb24pICE9PSBsYXN0U2Nyb2xsZWREZXN0aW55ICYmICFoYXNDbGFzcyhzZWN0aW9uLCBBQ1RJVkUpKXtcclxuICAgICAgICAgICAgICAgIHNjcm9sbFBhZ2Uoc2VjdGlvbiwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxTbGlkZXIoc2xpZGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9pZiB3ZSB3ZXJlIGFscmVhZHkgaW4gdGhlIHNlY3Rpb25cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHNjcm9sbFNsaWRlcihzbGlkZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU2Nyb2xscyB0aGUgc2xpZGVyIHRvIHRoZSBnaXZlbiBzbGlkZSBkZXN0aW5hdGlvbiBmb3IgdGhlIGdpdmVuIHNlY3Rpb25cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNjcm9sbFNsaWRlcihzbGlkZSl7XHJcbiAgICAgICAgICAgIGlmKHNsaWRlICE9IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgbGFuZHNjYXBlU2Nyb2xsKGNsb3Nlc3Qoc2xpZGUsIFNMSURFU19XUkFQUEVSX1NFTCksIHNsaWRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBDcmVhdGVzIGEgbGFuZHNjYXBlIG5hdmlnYXRpb24gYmFyIHdpdGggZG90cyBmb3IgaG9yaXpvbnRhbCBzbGlkZXJzLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkU2xpZGVzTmF2aWdhdGlvbihzZWN0aW9uLCBudW1TbGlkZXMpe1xyXG4gICAgICAgICAgICBhcHBlbmRUbyhjcmVhdGVFbGVtZW50RnJvbUhUTUwoJzxkaXYgY2xhc3M9XCInICsgU0xJREVTX05BViArICdcIj48dWw+PC91bD48L2Rpdj4nKSwgc2VjdGlvbik7XHJcbiAgICAgICAgICAgIHZhciBuYXYgPSAkKFNMSURFU19OQVZfU0VMLCBzZWN0aW9uKVswXTtcclxuXHJcbiAgICAgICAgICAgIC8vdG9wIG9yIGJvdHRvbVxyXG4gICAgICAgICAgICBhZGRDbGFzcyhuYXYsICdmcC0nICsgb3B0aW9ucy5zbGlkZXNOYXZQb3NpdGlvbik7XHJcblxyXG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaTwgbnVtU2xpZGVzOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gJChTTElERV9TRUwsIHNlY3Rpb24pW2ldO1xyXG4gICAgICAgICAgICAgICAgYXBwZW5kVG8oY3JlYXRlRWxlbWVudEZyb21IVE1MKCc8bGk+PGEgaHJlZj1cIiNcIj48c3BhbiBjbGFzcz1cImZwLXNyLW9ubHlcIj4nKyBnZXRCdWxsZXRMaW5rTmFtZShpLCAnU2xpZGUnLCBzbGlkZSkgKyc8L3NwYW4+PHNwYW4+PC9zcGFuPjwvYT48L2xpPicpLCAkKCd1bCcsIG5hdilbMF0gKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9jZW50ZXJpbmcgaXRcclxuICAgICAgICAgICAgY3NzKG5hdiwgeydtYXJnaW4tbGVmdCc6ICctJyArIChuYXYuaW5uZXJXaWR0aC8yKSArICdweCd9KTtcclxuXHJcbiAgICAgICAgICAgIGFkZENsYXNzKCQoJ2EnLCAkKCdsaScsIG5hdilbMF0gKSwgQUNUSVZFKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFNldHMgdGhlIHN0YXRlIG9mIHRoZSB3ZWJzaXRlIGRlcGVuZGluZyBvbiB0aGUgYWN0aXZlIHNlY3Rpb24vc2xpZGUuXHJcbiAgICAgICAgKiBJdCBjaGFuZ2VzIHRoZSBVUkwgaGFzaCB3aGVuIG5lZWRlZCBhbmQgdXBkYXRlcyB0aGUgYm9keSBjbGFzcy5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNldFN0YXRlKHNsaWRlSW5kZXgsIHNsaWRlQW5jaG9yLCBhbmNob3JMaW5rLCBzZWN0aW9uSW5kZXgpe1xyXG4gICAgICAgICAgICB2YXIgc2VjdGlvbkhhc2ggPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMuYW5jaG9ycy5sZW5ndGggJiYgIW9wdGlvbnMubG9ja0FuY2hvcnMpe1xyXG5cclxuICAgICAgICAgICAgICAgIC8vaXNuJ3QgaXQgdGhlIGZpcnN0IHNsaWRlP1xyXG4gICAgICAgICAgICAgICAgaWYoc2xpZGVJbmRleCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoYW5jaG9yTGluayAhPSBudWxsKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbkhhc2ggPSBhbmNob3JMaW5rO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9zbGlkZSB3aXRob3V0IGFuY2hvciBsaW5rPyBXZSB0YWtlIHRoZSBpbmRleCBpbnN0ZWFkLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHNsaWRlQW5jaG9yID09IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZUFuY2hvciA9IHNsaWRlSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsYXN0U2Nyb2xsZWRTbGlkZSA9IHNsaWRlQW5jaG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFVybEhhc2goc2VjdGlvbkhhc2ggKyAnLycgKyBzbGlkZUFuY2hvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9maXJzdCBzbGlkZSB3b24ndCBoYXZlIHNsaWRlIGFuY2hvciwganVzdCB0aGUgc2VjdGlvbiBvbmVcclxuICAgICAgICAgICAgICAgIH1lbHNlIGlmKHNsaWRlSW5kZXggIT0gbnVsbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFNjcm9sbGVkU2xpZGUgPSBzbGlkZUFuY2hvcjtcclxuICAgICAgICAgICAgICAgICAgICBzZXRVcmxIYXNoKGFuY2hvckxpbmspO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vc2VjdGlvbiB3aXRob3V0IHNsaWRlc1xyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBzZXRVcmxIYXNoKGFuY2hvckxpbmspO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRCb2R5Q2xhc3MoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU2V0cyB0aGUgVVJMIGhhc2guXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBzZXRVcmxIYXNoKHVybCl7XHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMucmVjb3JkSGlzdG9yeSl7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5oYXNoID0gdXJsO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIC8vTW9iaWxlIENocm9tZSBkb2Vzbid0IHdvcmsgdGhlIG5vcm1hbCB3YXksIHNvLi4uIGxldHMgdXNlIEhUTUw1IGZvciBwaG9uZXMgOilcclxuICAgICAgICAgICAgICAgIGlmKGlzVG91Y2hEZXZpY2UgfHwgaXNUb3VjaCl7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCAnIycgKyB1cmwpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhc2VVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnIycpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKCBiYXNlVXJsICsgJyMnICsgdXJsICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogR2V0cyB0aGUgYW5jaG9yIGZvciB0aGUgZ2l2ZW4gc2xpZGUgLyBzZWN0aW9uLiBJdHMgaW5kZXggd2lsbCBiZSB1c2VkIGlmIHRoZXJlJ3Mgbm9uZS5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFuY2hvcihlbGVtZW50KXtcclxuICAgICAgICAgICAgaWYoIWVsZW1lbnQpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGFuY2hvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWFuY2hvcicpO1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudEluZGV4ID0gaW5kZXgoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAvL1NsaWRlIHdpdGhvdXQgYW5jaG9yIGxpbms/IFdlIHRha2UgdGhlIGluZGV4IGluc3RlYWQuXHJcbiAgICAgICAgICAgIGlmKGFuY2hvciA9PSBudWxsKXtcclxuICAgICAgICAgICAgICAgIGFuY2hvciA9IGVsZW1lbnRJbmRleDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGFuY2hvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU2V0cyBhIGNsYXNzIGZvciB0aGUgYm9keSBvZiB0aGUgcGFnZSBkZXBlbmRpbmcgb24gdGhlIGFjdGl2ZSBzZWN0aW9uIC8gc2xpZGVcclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNldEJvZHlDbGFzcygpe1xyXG4gICAgICAgICAgICB2YXIgc2VjdGlvbiA9ICQoU0VDVElPTl9BQ1RJVkVfU0VMKVswXTtcclxuICAgICAgICAgICAgdmFyIHNsaWRlID0gJChTTElERV9BQ1RJVkVfU0VMLCBzZWN0aW9uKVswXTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWN0aW9uQW5jaG9yID0gZ2V0QW5jaG9yKHNlY3Rpb24pO1xyXG4gICAgICAgICAgICB2YXIgc2xpZGVBbmNob3IgPSBnZXRBbmNob3Ioc2xpZGUpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRleHQgPSBTdHJpbmcoc2VjdGlvbkFuY2hvcik7XHJcblxyXG4gICAgICAgICAgICBpZihzbGlkZSl7XHJcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dCArICctJyArIHNsaWRlQW5jaG9yO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2NoYW5naW5nIHNsYXNoIGZvciBkYXNoIHRvIG1ha2UgaXQgYSB2YWxpZCBDU1Mgc3R5bGVcclxuICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgnLycsICctJykucmVwbGFjZSgnIycsJycpO1xyXG5cclxuICAgICAgICAgICAgLy9yZW1vdmluZyBwcmV2aW91cyBhbmNob3IgY2xhc3Nlc1xyXG4gICAgICAgICAgICB2YXIgY2xhc3NSZSA9IG5ldyBSZWdFeHAoJ1xcXFxiXFxcXHM/JyArIFZJRVdJTkdfUFJFRklYICsgJy1bXlxcXFxzXStcXFxcYicsIFwiZ1wiKTtcclxuICAgICAgICAgICAgJGJvZHkuY2xhc3NOYW1lID0gJGJvZHkuY2xhc3NOYW1lLnJlcGxhY2UoY2xhc3NSZSwgJycpO1xyXG5cclxuICAgICAgICAgICAgLy9hZGRpbmcgdGhlIGN1cnJlbnQgYW5jaG9yXHJcbiAgICAgICAgICAgIGFkZENsYXNzKCRib2R5LCBWSUVXSU5HX1BSRUZJWCArICctJyArIHRleHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBDaGVja3MgZm9yIHRyYW5zbGF0ZTNkIHN1cHBvcnRcclxuICAgICAgICAqIEByZXR1cm4gYm9vbGVhblxyXG4gICAgICAgICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81NjYxNjcxL2RldGVjdGluZy10cmFuc2Zvcm0tdHJhbnNsYXRlM2Qtc3VwcG9ydFxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc3VwcG9ydDNkKCkge1xyXG4gICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyksXHJcbiAgICAgICAgICAgICAgICBoYXMzZCxcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3dlYmtpdFRyYW5zZm9ybSc6Jy13ZWJraXQtdHJhbnNmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAnT1RyYW5zZm9ybSc6Jy1vLXRyYW5zZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ21zVHJhbnNmb3JtJzonLW1zLXRyYW5zZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01velRyYW5zZm9ybSc6Jy1tb3otdHJhbnNmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzondHJhbnNmb3JtJ1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vcHJldmVudGluZyB0aGUgc3R5bGUgcDplbXB0eXtkaXNwbGF5OiBub25lO30gZnJvbSByZXR1cm5pbmcgdGhlIHdyb25nIHJlc3VsdFxyXG4gICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBpdCB0byB0aGUgYm9keSB0byBnZXQgdGhlIGNvbXB1dGVkIHN0eWxlLlxyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5Lmluc2VydEJlZm9yZShlbCwgbnVsbCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciB0IGluIHRyYW5zZm9ybXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbC5zdHlsZVt0XSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGVbdF0gPSAndHJhbnNsYXRlM2QoMXB4LDFweCwxcHgpJztcclxuICAgICAgICAgICAgICAgICAgICBoYXMzZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5nZXRQcm9wZXJ0eVZhbHVlKHRyYW5zZm9ybXNbdF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoaGFzM2QgIT09IHVuZGVmaW5lZCAmJiBoYXMzZC5sZW5ndGggPiAwICYmIGhhczNkICE9PSAnbm9uZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBSZW1vdmVzIHRoZSBhdXRvIHNjcm9sbGluZyBhY3Rpb24gZmlyZWQgYnkgdGhlIG1vdXNlIHdoZWVsIGFuZCB0cmFja3BhZC5cclxuICAgICAgICAqIEFmdGVyIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLCB0aGUgbW91c2V3aGVlbCBhbmQgdHJhY2twYWQgbW92ZW1lbnRzIHdvbid0IHNjcm9sbCB0aHJvdWdoIHNlY3Rpb25zLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTW91c2VXaGVlbEhhbmRsZXIoKXtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCBNb3VzZVdoZWVsSGFuZGxlciwgZmFsc2UpOyAvL0lFOSwgQ2hyb21lLCBTYWZhcmksIE9wZXJcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgTW91c2VXaGVlbEhhbmRsZXIsIGZhbHNlKTsgLy9GaXJlZm94XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdNb3pNb3VzZVBpeGVsU2Nyb2xsJywgTW91c2VXaGVlbEhhbmRsZXIsIGZhbHNlKTsgLy9vbGQgRmlyZWZveFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZGV0YWNoRXZlbnQoJ29ubW91c2V3aGVlbCcsIE1vdXNlV2hlZWxIYW5kbGVyKTsgLy9JRSA2LzcvOFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEFkZHMgdGhlIGF1dG8gc2Nyb2xsaW5nIGFjdGlvbiBmb3IgdGhlIG1vdXNlIHdoZWVsIGFuZCB0cmFja3BhZC5cclxuICAgICAgICAqIEFmdGVyIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLCB0aGUgbW91c2V3aGVlbCBhbmQgdHJhY2twYWQgbW92ZW1lbnRzIHdpbGwgc2Nyb2xsIHRocm91Z2ggc2VjdGlvbnNcclxuICAgICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy93aGVlbFxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkTW91c2VXaGVlbEhhbmRsZXIoKXtcclxuICAgICAgICAgICAgdmFyIHByZWZpeCA9ICcnO1xyXG4gICAgICAgICAgICB2YXIgX2FkZEV2ZW50TGlzdGVuZXI7XHJcblxyXG4gICAgICAgICAgICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpe1xyXG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50TGlzdGVuZXIgPSBcImFkZEV2ZW50TGlzdGVuZXJcIjtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRMaXN0ZW5lciA9IFwiYXR0YWNoRXZlbnRcIjtcclxuICAgICAgICAgICAgICAgIHByZWZpeCA9ICdvbic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGRldGVjdCBhdmFpbGFibGUgd2hlZWwgZXZlbnRcclxuICAgICAgICAgICAgdmFyIHN1cHBvcnQgPSAnb253aGVlbCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgPyAnd2hlZWwnIDogLy8gTW9kZXJuIGJyb3dzZXJzIHN1cHBvcnQgXCJ3aGVlbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5vbm1vdXNld2hlZWwgIT09IHVuZGVmaW5lZCA/ICdtb3VzZXdoZWVsJyA6IC8vIFdlYmtpdCBhbmQgSUUgc3VwcG9ydCBhdCBsZWFzdCBcIm1vdXNld2hlZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgJ0RPTU1vdXNlU2Nyb2xsJzsgLy8gbGV0J3MgYXNzdW1lIHRoYXQgcmVtYWluaW5nIGJyb3dzZXJzIGFyZSBvbGRlciBGaXJlZm94XHJcbiAgICAgICAgICAgIHZhciBwYXNzaXZlRXZlbnQgPSBnX3N1cHBvcnRzUGFzc2l2ZSA/IHtwYXNzaXZlOiBmYWxzZSB9OiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmKHN1cHBvcnQgPT0gJ0RPTU1vdXNlU2Nyb2xsJyl7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudFsgX2FkZEV2ZW50TGlzdGVuZXIgXShwcmVmaXggKyAnTW96TW91c2VQaXhlbFNjcm9sbCcsIE1vdXNlV2hlZWxIYW5kbGVyLCBwYXNzaXZlRXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2hhbmRsZSBNb3pNb3VzZVBpeGVsU2Nyb2xsIGluIG9sZGVyIEZpcmVmb3hcclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50WyBfYWRkRXZlbnRMaXN0ZW5lciBdKHByZWZpeCArIHN1cHBvcnQsIE1vdXNlV2hlZWxIYW5kbGVyLCBwYXNzaXZlRXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEJpbmRpbmcgdGhlIG1vdXNlbW92ZSB3aGVuIHRoZSBtb3VzZSdzIG1pZGRsZSBidXR0b24gaXMgcHJlc3NlZFxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkTWlkZGxlV2hlZWxIYW5kbGVyKCl7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBtb3VzZURvd25IYW5kbGVyKTtcclxuICAgICAgICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZVVwSGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFVuYmluZGluZyB0aGUgbW91c2Vtb3ZlIHdoZW4gdGhlIG1vdXNlJ3MgbWlkZGxlIGJ1dHRvbiBpcyByZWxlYXNlZFxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTWlkZGxlV2hlZWxIYW5kbGVyKCl7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBtb3VzZURvd25IYW5kbGVyKTtcclxuICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZVVwSGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEFkZHMgdGhlIHBvc3NpYmlsaXR5IHRvIGF1dG8gc2Nyb2xsIHRocm91Z2ggc2VjdGlvbnMgb24gdG91Y2ggZGV2aWNlcy5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGFkZFRvdWNoSGFuZGxlcigpe1xyXG4gICAgICAgICAgICBpZihpc1RvdWNoRGV2aWNlIHx8IGlzVG91Y2gpe1xyXG4gICAgICAgICAgICAgICAgaWYob3B0aW9ucy5hdXRvU2Nyb2xsaW5nKXtcclxuICAgICAgICAgICAgICAgICAgICAkYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy50b3VjaG1vdmUsIHByZXZlbnRCb3VuY2luZywge3Bhc3NpdmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGJvZHkuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMudG91Y2htb3ZlLCBwcmV2ZW50Qm91bmNpbmcsIHtwYXNzaXZlOiBmYWxzZX0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciB0b3VjaFdyYXBwZXIgPSBvcHRpb25zLnRvdWNoV3JhcHBlcjtcclxuICAgICAgICAgICAgICAgIHRvdWNoV3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy50b3VjaHN0YXJ0LCB0b3VjaFN0YXJ0SGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICB0b3VjaFdyYXBwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMudG91Y2htb3ZlLCB0b3VjaE1vdmVIYW5kbGVyLCB7cGFzc2l2ZTogZmFsc2V9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0b3VjaFdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMudG91Y2hzdGFydCwgdG91Y2hTdGFydEhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgdG91Y2hXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLnRvdWNobW92ZSwgdG91Y2hNb3ZlSGFuZGxlciwge3Bhc3NpdmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogUmVtb3ZlcyB0aGUgYXV0byBzY3JvbGxpbmcgZm9yIHRvdWNoIGRldmljZXMuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiByZW1vdmVUb3VjaEhhbmRsZXIoKXtcclxuICAgICAgICAgICAgaWYoaXNUb3VjaERldmljZSB8fCBpc1RvdWNoKXtcclxuICAgICAgICAgICAgICAgIC8vIG5vcm1hbFNjcm9sbEVsZW1lbnRzIHJlcXVpcmVzIGl0IG9mZiAjMjY5MVxyXG4gICAgICAgICAgICAgICAgaWYob3B0aW9ucy5hdXRvU2Nyb2xsaW5nKXtcclxuICAgICAgICAgICAgICAgICAgICAkYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy50b3VjaG1vdmUsIHRvdWNoTW92ZUhhbmRsZXIsIHtwYXNzaXZlOiBmYWxzZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgICRib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLnRvdWNobW92ZSwgcHJldmVudEJvdW5jaW5nLCB7cGFzc2l2ZTogZmFsc2V9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hXcmFwcGVyID0gb3B0aW9ucy50b3VjaFdyYXBwZXI7XHJcbiAgICAgICAgICAgICAgICB0b3VjaFdyYXBwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMudG91Y2hzdGFydCwgdG91Y2hTdGFydEhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgdG91Y2hXcmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLnRvdWNobW92ZSwgdG91Y2hNb3ZlSGFuZGxlciwge3Bhc3NpdmU6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgKiBSZXR1cm5zIGFuZCBvYmplY3Qgd2l0aCBNaWNyb3NvZnQgcG9pbnRlcnMgKGZvciBJRTwxMSBhbmQgZm9yIElFID49IDExKVxyXG4gICAgICAgICogaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2RuMzA0ODg2KHY9dnMuODUpLmFzcHhcclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldE1TUG9pbnRlcigpe1xyXG4gICAgICAgICAgICB2YXIgcG9pbnRlcjtcclxuXHJcbiAgICAgICAgICAgIC8vSUUgPj0gMTEgJiByZXN0IG9mIGJyb3dzZXJzXHJcbiAgICAgICAgICAgIGlmKHdpbmRvdy5Qb2ludGVyRXZlbnQpe1xyXG4gICAgICAgICAgICAgICAgcG9pbnRlciA9IHsgZG93bjogJ3BvaW50ZXJkb3duJywgbW92ZTogJ3BvaW50ZXJtb3ZlJ307XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vSUUgPCAxMVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgcG9pbnRlciA9IHsgZG93bjogJ01TUG9pbnRlckRvd24nLCBtb3ZlOiAnTVNQb2ludGVyTW92ZSd9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcG9pbnRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogR2V0cyB0aGUgcGFnZVggYW5kIHBhZ2VZIHByb3BlcnRpZXMgZGVwZW5kaW5nIG9uIHRoZSBicm93c2VyLlxyXG4gICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2FsdmFyb3RyaWdvL2Z1bGxQYWdlLmpzL2lzc3Vlcy8xOTQjaXNzdWVjb21tZW50LTM0MDY5ODU0XHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBnZXRFdmVudHNQYWdlKGUpe1xyXG4gICAgICAgICAgICB2YXIgZXZlbnRzID0gW107XHJcblxyXG4gICAgICAgICAgICBldmVudHMueSA9ICh0eXBlb2YgZS5wYWdlWSAhPT0gJ3VuZGVmaW5lZCcgJiYgKGUucGFnZVkgfHwgZS5wYWdlWCkgPyBlLnBhZ2VZIDogZS50b3VjaGVzWzBdLnBhZ2VZKTtcclxuICAgICAgICAgICAgZXZlbnRzLnggPSAodHlwZW9mIGUucGFnZVggIT09ICd1bmRlZmluZWQnICYmIChlLnBhZ2VZIHx8IGUucGFnZVgpID8gZS5wYWdlWCA6IGUudG91Y2hlc1swXS5wYWdlWCk7XHJcblxyXG4gICAgICAgICAgICAvL2luIHRvdWNoIGRldmljZXMgd2l0aCBzY3JvbGxCYXI6dHJ1ZSwgZS5wYWdlWSBpcyBkZXRlY3RlZCwgYnV0IHdlIGhhdmUgdG8gZGVhbCB3aXRoIHRvdWNoIGV2ZW50cy4gIzEwMDhcclxuICAgICAgICAgICAgaWYoaXNUb3VjaCAmJiBpc1JlYWxseVRvdWNoKGUpICYmIG9wdGlvbnMuc2Nyb2xsQmFyICYmIHR5cGVvZiBlLnRvdWNoZXMgIT09ICd1bmRlZmluZWQnKXtcclxuICAgICAgICAgICAgICAgIGV2ZW50cy55ID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xyXG4gICAgICAgICAgICAgICAgZXZlbnRzLnggPSBlLnRvdWNoZXNbMF0ucGFnZVg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBldmVudHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFNsaWRlcyBzaWxlbnRseSAod2l0aCBubyBhbmltYXRpb24pIHRoZSBhY3RpdmUgc2xpZGVyIHRvIHRoZSBnaXZlbiBzbGlkZS5cclxuICAgICAgICAqIEBwYXJhbSBub0NhbGxiYWNrIHtib29sfSB0cnVlIG9yIGRlZmluZWQgLT4gbm8gY2FsbGJhY2tzXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBzaWxlbnRMYW5kc2NhcGVTY3JvbGwoYWN0aXZlU2xpZGUsIG5vQ2FsbGJhY2tzKXtcclxuICAgICAgICAgICAgc2V0U2Nyb2xsaW5nU3BlZWQoMCwgJ2ludGVybmFsJyk7XHJcblxyXG4gICAgICAgICAgICBpZih0eXBlb2Ygbm9DYWxsYmFja3MgIT09ICd1bmRlZmluZWQnKXtcclxuICAgICAgICAgICAgICAgIC8vcHJldmVudGluZyBmaXJpbmcgY2FsbGJhY2tzIGFmdGVyU2xpZGVMb2FkIGV0Yy5cclxuICAgICAgICAgICAgICAgIGlzUmVzaXppbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsYW5kc2NhcGVTY3JvbGwoY2xvc2VzdChhY3RpdmVTbGlkZSwgU0xJREVTX1dSQVBQRVJfU0VMKSwgYWN0aXZlU2xpZGUpO1xyXG5cclxuICAgICAgICAgICAgaWYodHlwZW9mIG5vQ2FsbGJhY2tzICE9PSAndW5kZWZpbmVkJyl7XHJcbiAgICAgICAgICAgICAgICBpc1Jlc2l6aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldFNjcm9sbGluZ1NwZWVkKG9yaWdpbmFscy5zY3JvbGxpbmdTcGVlZCwgJ2ludGVybmFsJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFNjcm9sbHMgc2lsZW50bHkgKHdpdGggbm8gYW5pbWF0aW9uKSB0aGUgcGFnZSB0byB0aGUgZ2l2ZW4gWSBwb3NpdGlvbi5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNpbGVudFNjcm9sbCh0b3Ape1xyXG4gICAgICAgICAgICAvLyBUaGUgZmlyc3Qgc2VjdGlvbiBjYW4gaGF2ZSBhIG5lZ2F0aXZlIHZhbHVlIGluIGlPUyAxMC4gTm90IHF1aXRlIHN1cmUgd2h5OiAtMC4wMTQyODIyMjY1NjI1XHJcbiAgICAgICAgICAgIC8vIHRoYXQncyB3aHkgd2Ugcm91bmQgaXQgdG8gMC5cclxuICAgICAgICAgICAgdmFyIHJvdW5kZWRUb3AgPSBNYXRoLnJvdW5kKHRvcCk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jc3MzICYmIG9wdGlvbnMuYXV0b1Njcm9sbGluZyAmJiAhb3B0aW9ucy5zY3JvbGxCYXIpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZTNkID0gJ3RyYW5zbGF0ZTNkKDBweCwgLScgKyByb3VuZGVkVG9wICsgJ3B4LCAwcHgpJztcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybUNvbnRhaW5lcih0cmFuc2xhdGUzZCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYob3B0aW9ucy5hdXRvU2Nyb2xsaW5nICYmICFvcHRpb25zLnNjcm9sbEJhcil7XHJcbiAgICAgICAgICAgICAgICBjc3MoY29udGFpbmVyLCB7J3RvcCc6IC1yb3VuZGVkVG9wICsgJ3B4J30pO1xyXG4gICAgICAgICAgICAgICAgRlAudGVzdC50b3AgPSAtcm91bmRlZFRvcCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxTZXR0aW5ncyA9IGdldFNjcm9sbFNldHRpbmdzKHJvdW5kZWRUb3ApO1xyXG4gICAgICAgICAgICAgICAgc2V0U2Nyb2xsaW5nKHNjcm9sbFNldHRpbmdzLmVsZW1lbnQsIHNjcm9sbFNldHRpbmdzLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFJldHVybnMgdGhlIGNyb3NzLWJyb3dzZXIgdHJhbnNmb3JtIHN0cmluZy5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldFRyYW5zZm9ybXModHJhbnNsYXRlM2Qpe1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogdHJhbnNsYXRlM2QsXHJcbiAgICAgICAgICAgICAgICAnLW1vei10cmFuc2Zvcm0nOiB0cmFuc2xhdGUzZCxcclxuICAgICAgICAgICAgICAgICctbXMtdHJhbnNmb3JtJzp0cmFuc2xhdGUzZCxcclxuICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiB0cmFuc2xhdGUzZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBBbGxvd2luZyBvciBkaXNhbGxvd2luZyB0aGUgbW91c2Uvc3dpcGUgc2Nyb2xsIGluIGEgZ2l2ZW4gZGlyZWN0aW9uLiAobm90IGZvciBrZXlib2FyZClcclxuICAgICAgICAqIEB0eXBlICBtIChtb3VzZSkgb3IgayAoa2V5Ym9hcmQpXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBzZXRJc1Njcm9sbEFsbG93ZWQodmFsdWUsIGRpcmVjdGlvbiwgdHlwZSl7XHJcbiAgICAgICAgICAgIC8vdXAsIGRvd24sIGxlZnQsIHJpZ2h0XHJcbiAgICAgICAgICAgIGlmKGRpcmVjdGlvbiAhPT0gJ2FsbCcpe1xyXG4gICAgICAgICAgICAgICAgaXNTY3JvbGxBbGxvd2VkW3R5cGVdW2RpcmVjdGlvbl0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9hbGwgZGlyZWN0aW9ucz9cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGlzU2Nyb2xsQWxsb3dlZFt0eXBlXSkuZm9yRWFjaChmdW5jdGlvbihrZXkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU2Nyb2xsQWxsb3dlZFt0eXBlXVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAqIERlc3Ryb3lzIGZ1bGxwYWdlLmpzIHBsdWdpbiBldmVudHMgYW5kIG9wdGluYWxseSBpdHMgaHRtbCBtYXJrdXAgYW5kIHN0eWxlc1xyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gZGVzdHJveShhbGwpe1xyXG4gICAgICAgICAgICBzZXRBdXRvU2Nyb2xsaW5nKGZhbHNlLCAnaW50ZXJuYWwnKTtcclxuICAgICAgICAgICAgc2V0QWxsb3dTY3JvbGxpbmcodHJ1ZSk7XHJcbiAgICAgICAgICAgIHNldE1vdXNlSGlqYWNrKGZhbHNlKTtcclxuICAgICAgICAgICAgc2V0S2V5Ym9hcmRTY3JvbGxpbmcoZmFsc2UpO1xyXG4gICAgICAgICAgICBhZGRDbGFzcyhjb250YWluZXIsIERFU1RST1lFRCk7XHJcblxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBhZnRlclNsaWRlTG9hZHNJZCwgXHJcbiAgICAgICAgICAgICAgICBhZnRlclNlY3Rpb25Mb2Fkc0lkLFxyXG4gICAgICAgICAgICAgICAgcmVzaXplSWQsXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxJZCxcclxuICAgICAgICAgICAgICAgIHNjcm9sbElkMixcclxuICAgICAgICAgICAgICAgIGdfZG91YmxlQ2hlY2tIZWlnaHRJZCxcclxuICAgICAgICAgICAgICAgIHJlc2l6ZUhhbmRsZXJJZCxcclxuICAgICAgICAgICAgICAgIGdfdHJhbnNpdGlvbkxhcHNlSWRcclxuICAgICAgICAgICAgXS5mb3JFYWNoKGZ1bmN0aW9uKHRpbWVvdXRJZCl7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc2Nyb2xsSGFuZGxlcik7XHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgaGFzaENoYW5nZUhhbmRsZXIpO1xyXG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XHJcblxyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywga2V5ZG93bkhhbmRsZXIpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIGtleVVwSGFuZGxlcik7XHJcblxyXG4gICAgICAgICAgICBbJ2NsaWNrJywgJ3RvdWNoc3RhcnQnXS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50TmFtZSl7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZGVsZWdhdGVkRXZlbnRzKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBbJ21vdXNlZW50ZXInLCAndG91Y2hzdGFydCcsICdtb3VzZWxlYXZlJywgJ3RvdWNoZW5kJ10uZm9yRWFjaChmdW5jdGlvbihldmVudE5hbWUpe1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uTW91c2VFbnRlck9yTGVhdmUsIHRydWUpOyAvL3RydWUgaXMgcmVxdWlyZWQhXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy9sZXRzIG1ha2UgYSBtZXNzIVxyXG4gICAgICAgICAgICBpZihhbGwpe1xyXG4gICAgICAgICAgICAgICAgZGVzdHJveVN0cnVjdHVyZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICogUmVtb3ZlcyBpbmxpbmUgc3R5bGVzIGFkZGVkIGJ5IGZ1bGxwYWdlLmpzXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBkZXN0cm95U3RydWN0dXJlKCl7XHJcbiAgICAgICAgICAgIC8vcmVzZXRpbmcgdGhlIGB0b3BgIG9yIGB0cmFuc2xhdGVgIHByb3BlcnRpZXMgdG8gMFxyXG4gICAgICAgICAgICBzaWxlbnRTY3JvbGwoMCk7XHJcblxyXG4gICAgICAgICAgICAvL2xvYWRpbmcgYWxsIHRoZSBsYXp5IGxvYWQgY29udGVudFxyXG4gICAgICAgICAgICAkKCdpbWdbZGF0YS1zcmNdLCBzb3VyY2VbZGF0YS1zcmNdLCBhdWRpb1tkYXRhLXNyY10sIGlmcmFtZVtkYXRhLXNyY10nLCBjb250YWluZXIpLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XHJcbiAgICAgICAgICAgICAgICBzZXRTcmMoaXRlbSwgJ3NyYycpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICQoJ2ltZ1tkYXRhLXNyY3NldF0nKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xyXG4gICAgICAgICAgICAgICAgc2V0U3JjKGl0ZW0sICdzcmNzZXQnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZW1vdmUoJChTRUNUSU9OX05BVl9TRUwgKyAnLCAnICsgU0xJREVTX05BVl9TRUwgKyAgJywgJyArIFNMSURFU19BUlJPV19TRUwpKTtcclxuXHJcbiAgICAgICAgICAgIC8vcmVtb3ZpbmcgaW5saW5lIHN0eWxlc1xyXG4gICAgICAgICAgICBjc3MoJChTRUNUSU9OX1NFTCksIHtcclxuICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnJyxcclxuICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJyA6ICcnLFxyXG4gICAgICAgICAgICAgICAgJ3BhZGRpbmcnOiAnJ1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNzcygkKFNMSURFX1NFTCksIHtcclxuICAgICAgICAgICAgICAgICd3aWR0aCc6ICcnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY3NzKGNvbnRhaW5lciwge1xyXG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcnLFxyXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogJycsXHJcbiAgICAgICAgICAgICAgICAnLW1zLXRvdWNoLWFjdGlvbic6ICcnLFxyXG4gICAgICAgICAgICAgICAgJ3RvdWNoLWFjdGlvbic6ICcnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY3NzKCRodG1sQm9keSwge1xyXG4gICAgICAgICAgICAgICAgJ292ZXJmbG93JzogJycsXHJcbiAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJydcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyByZW1vdmUgLmZwLWVuYWJsZWQgY2xhc3NcclxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoJGh0bWwsIEVOQUJMRUQpO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVtb3ZlIC5mcC1yZXNwb25zaXZlIGNsYXNzXHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKCRib2R5LCBSRVNQT05TSVZFKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBhbGwgb2YgdGhlIC5mcC12aWV3aW5nLSBjbGFzc2VzXHJcbiAgICAgICAgICAgICRib2R5LmNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZS5pbmRleE9mKFZJRVdJTkdfUFJFRklYKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKCRib2R5LCBjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vcmVtb3ZpbmcgYWRkZWQgY2xhc3Nlc1xyXG4gICAgICAgICAgICAkKFNFQ1RJT05fU0VMICsgJywgJyArIFNMSURFX1NFTCkuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcclxuICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyICYmIG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3cpe1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLnJlbW92ZShpdGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGl0ZW0sIFRBQkxFICsgJyAnICsgQUNUSVZFICsgJyAnICsgQ09NUExFVEVMWSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNTdHlsZXMgPSBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1mcC1zdHlsZXMnKTtcclxuICAgICAgICAgICAgICAgIGlmKHByZXZpb3VzU3R5bGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1mcC1zdHlsZXMnKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy9yZW1vdmluZyBhbmNob3JzIGlmIHRoZXkgd2VyZSBub3Qgc2V0IHVzaW5nIHRoZSBIVE1MIG1hcmt1cFxyXG4gICAgICAgICAgICAgICAgaWYoaGFzQ2xhc3MoaXRlbSwgU0VDVElPTikgJiYgIWdfaW5pdGlhbEFuY2hvcnNJbkRvbSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtYW5jaG9yJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy9yZW1vdmluZyB0aGUgYXBwbGllZCB0cmFuc2l0aW9uIGZyb20gdGhlIGZ1bGxwYWdlIHdyYXBwZXJcclxuICAgICAgICAgICAgcmVtb3ZlQW5pbWF0aW9uKGNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgICAgICAvL1Vud3JhcHBpbmcgY29udGVudFxyXG4gICAgICAgICAgICBbVEFCTEVfQ0VMTF9TRUwsIFNMSURFU19DT05UQUlORVJfU0VMLFNMSURFU19XUkFQUEVSX1NFTF0uZm9yRWFjaChmdW5jdGlvbihzZWxlY3Rvcil7XHJcbiAgICAgICAgICAgICAgICAkKHNlbGVjdG9yLCBjb250YWluZXIpLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy91bndyYXAgbm90IGJlaW5nIHVzZSBpbiBjYXNlIHRoZXJlJ3Mgbm8gY2hpbGQgZWxlbWVudCBpbnNpZGUgYW5kIGl0cyBqdXN0IHRleHRcclxuICAgICAgICAgICAgICAgICAgICB1bndyYXAoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL3JlbW92aW5nIHRoZSBhcHBsaWVkIHRyYW5zaXRpb24gZnJvbSB0aGUgZnVsbHBhZ2Ugd3JhcHBlclxyXG4gICAgICAgICAgICBjc3MoY29udGFpbmVyLCB7XHJcbiAgICAgICAgICAgICAgICAnLXdlYmtpdC10cmFuc2l0aW9uJzogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgJ3RyYW5zaXRpb24nOiAnbm9uZSdcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL3Njcm9sbGluZyB0aGUgcGFnZSB0byB0aGUgdG9wIHdpdGggbm8gYW5pbWF0aW9uXHJcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcclxuXHJcbiAgICAgICAgICAgIC8vcmVtb3Zpbmcgc2VsZWN0b3JzXHJcbiAgICAgICAgICAgIHZhciB1c2VkU2VsZWN0b3JzID0gW1NFQ1RJT04sIFNMSURFLCBTTElERVNfQ09OVEFJTkVSXTtcclxuICAgICAgICAgICAgdXNlZFNlbGVjdG9ycy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoJCgnLicgKyBpdGVtKSwgaXRlbSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAqIFNldHMgdGhlIHN0YXRlIGZvciBhIHZhcmlhYmxlIHdpdGggbXVsdGlwbGUgc3RhdGVzIChvcmlnaW5hbCwgYW5kIHRlbXBvcmFsKVxyXG4gICAgICAgICogU29tZSB2YXJpYWJsZXMgc3VjaCBhcyBgYXV0b1Njcm9sbGluZ2Agb3IgYHJlY29yZEhpc3RvcnlgIG1pZ2h0IGNoYW5nZSBhdXRvbWF0aWNhbGx5IGl0cyBzdGF0ZSB3aGVuIHVzaW5nIGByZXNwb25zaXZlYCBvciBgYXV0b1Njcm9sbGluZzpmYWxzZWAuXHJcbiAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8ga2VlcCB0cmFjayBvZiBib3RoIHN0YXRlcywgdGhlIG9yaWdpbmFsIGFuZCB0aGUgdGVtcG9yYWwgb25lLlxyXG4gICAgICAgICogSWYgdHlwZSBpcyBub3QgJ2ludGVybmFsJywgdGhlbiB3ZSBhc3N1bWUgdGhlIHVzZXIgaXMgZ2xvYmFsbHkgY2hhbmdpbmcgdGhlIHZhcmlhYmxlLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0VmFyaWFibGVTdGF0ZSh2YXJpYWJsZSwgdmFsdWUsIHR5cGUpe1xyXG4gICAgICAgICAgICBvcHRpb25zW3ZhcmlhYmxlXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBpZih0eXBlICE9PSAnaW50ZXJuYWwnKXtcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsc1t2YXJpYWJsZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBEaXNwbGF5cyB3YXJuaW5nc1xyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gZGlzcGxheVdhcm5pbmdzKCl7XHJcbiAgICAgICAgICAgIHZhciBsID0gb3B0aW9uc1snbGknICsgJ2MnICsgJ2Vuc2VLJyArICdlJyArICd5J107XHJcbiAgICAgICAgICAgIHZhciBtc2dTdHlsZSA9ICdmb250LXNpemU6IDE1cHg7YmFja2dyb3VuZDp5ZWxsb3c7JztcclxuXHJcbiAgICAgICAgICAgIGlmKCFpc09LKXtcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcignZXJyb3InLCAnRnVsbHBhZ2UuanMgdmVyc2lvbiAzIGhhcyBjaGFuZ2VkIGl0cyBsaWNlbnNlIHRvIEdQTHYzIGFuZCBpdCByZXF1aXJlcyBhIGBsaWNlbnNlS2V5YCBvcHRpb24uIFJlYWQgYWJvdXQgaXQgaGVyZTonKTtcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcignZXJyb3InLCAnaHR0cHM6Ly9naXRodWIuY29tL2FsdmFyb3RyaWdvL2Z1bGxQYWdlLmpzI29wdGlvbnMuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihsICYmIGwubGVuZ3RoIDwgMjApe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCclYyBUaGlzIHdlYnNpdGUgd2FzIG1hZGUgdXNpbmcgZnVsbFBhZ2UuanMgc2xpZGVyLiBNb3JlIGluZm8gb24gdGhlIGZvbGxvd2luZyB3ZWJzaXRlOicsIG1zZ1N0eWxlKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignJWMgaHR0cHM6Ly9hbHZhcm90cmlnby5jb20vZnVsbFBhZ2UvJywgbXNnU3R5bGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihoYXNDbGFzcygkaHRtbCwgRU5BQkxFRCkpe1xyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yKCdlcnJvcicsICdGdWxscGFnZS5qcyBjYW4gb25seSBiZSBpbml0aWFsaXplZCBvbmNlIGFuZCB5b3UgYXJlIGRvaW5nIGl0IG11bHRpcGxlIHRpbWVzIScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBEaXNhYmxlIG11dHVhbGx5IGV4Y2x1c2l2ZSBzZXR0aW5nc1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jb250aW51b3VzVmVydGljYWwgJiZcclxuICAgICAgICAgICAgICAgIChvcHRpb25zLmxvb3BUb3AgfHwgb3B0aW9ucy5sb29wQm90dG9tKSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb250aW51b3VzVmVydGljYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcignd2FybicsICdPcHRpb24gYGxvb3BUb3AvbG9vcEJvdHRvbWAgaXMgbXV0dWFsbHkgZXhjbHVzaXZlIHdpdGggYGNvbnRpbnVvdXNWZXJ0aWNhbGA7IGBjb250aW51b3VzVmVydGljYWxgIGRpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3cgJiZcclxuICAgICAgICAgICAgICAgKG9wdGlvbnMuc2Nyb2xsQmFyIHx8ICFvcHRpb25zLmF1dG9TY3JvbGxpbmcpKXtcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcignd2FybicsICdPcHRpb25zIHNjcm9sbEJhcjp0cnVlIGFuZCBhdXRvU2Nyb2xsaW5nOmZhbHNlIGFyZSBtdXR1YWxseSBleGNsdXNpdmUgd2l0aCBzY3JvbGxPdmVyZmxvdzp0cnVlLiBTZWN0aW9ucyB3aXRoIHNjcm9sbE92ZXJmbG93IG1pZ2h0IG5vdCB3b3JrIHdlbGwgaW4gRmlyZWZveCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihvcHRpb25zLmNvbnRpbnVvdXNWZXJ0aWNhbCAmJiAob3B0aW9ucy5zY3JvbGxCYXIgfHwgIW9wdGlvbnMuYXV0b1Njcm9sbGluZykpe1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb250aW51b3VzVmVydGljYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcignd2FybicsICdTY3JvbGwgYmFycyAoYHNjcm9sbEJhcjp0cnVlYCBvciBgYXV0b1Njcm9sbGluZzpmYWxzZWApIGFyZSBtdXR1YWxseSBleGNsdXNpdmUgd2l0aCBgY29udGludW91c1ZlcnRpY2FsYDsgYGNvbnRpbnVvdXNWZXJ0aWNhbGAgZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYob3B0aW9ucy5zY3JvbGxPdmVyZmxvdyAmJiBvcHRpb25zLnNjcm9sbE92ZXJmbG93SGFuZGxlciA9PSBudWxsKXtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2Nyb2xsT3ZlcmZsb3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcignZXJyb3InLCAnVGhlIG9wdGlvbiBgc2Nyb2xsT3ZlcmZsb3c6dHJ1ZWAgcmVxdWlyZXMgdGhlIGZpbGUgYHNjcm9sbG92ZXJmbG93Lm1pbi5qc2AuIFBsZWFzZSBpbmNsdWRlIGl0IGJlZm9yZSBmdWxsUGFnZS5qcy4nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy91c2luZyBleHRlbnNpb25zPyBXcm9uZyBmaWxlIVxyXG4gICAgICAgICAgICBleHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24oZXh0ZW5zaW9uKXtcclxuICAgICAgICAgICAgICAgIC8vaXMgdGhlIG9wdGlvbiBzZXQgdG8gdHJ1ZT9cclxuICAgICAgICAgICAgICAgIGlmKG9wdGlvbnNbZXh0ZW5zaW9uXSl7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0Vycm9yKCd3YXJuJywgJ2Z1bGxwYWdlLmpzIGV4dGVuc2lvbnMgcmVxdWlyZSBmdWxscGFnZS5leHRlbnNpb25zLm1pbi5qcyBmaWxlIGluc3RlYWQgb2YgdGhlIHVzdWFsIGZ1bGxwYWdlLmpzLiBSZXF1ZXN0ZWQ6ICcrIGV4dGVuc2lvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy9hbmNob3JzIGNhbiBub3QgaGF2ZSB0aGUgc2FtZSB2YWx1ZSBhcyBhbnkgZWxlbWVudCBJRCBvciBOQU1FXHJcbiAgICAgICAgICAgIG9wdGlvbnMuYW5jaG9ycy5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpe1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2FzZSBpbnNlbnNpdGl2ZSBzZWxlY3RvcnMgKGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE5NDY1MTg3LzEwODEzOTYpXHJcbiAgICAgICAgICAgICAgICB2YXIgbmFtZUF0dHIgPSBbXS5zbGljZS5jYWxsKCQoJ1tuYW1lXScpKS5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmdldEF0dHJpYnV0ZSgnbmFtZScpICYmIGl0ZW0uZ2V0QXR0cmlidXRlKCduYW1lJykudG9Mb3dlckNhc2UoKSA9PSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaWRBdHRyID0gW10uc2xpY2UuY2FsbCgkKCdbaWRdJykpLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uZ2V0QXR0cmlidXRlKCdpZCcpICYmIGl0ZW0uZ2V0QXR0cmlidXRlKCdpZCcpLnRvTG93ZXJDYXNlKCkgPT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoaWRBdHRyLmxlbmd0aCB8fCBuYW1lQXR0ci5sZW5ndGggKXtcclxuICAgICAgICAgICAgICAgICAgICBzaG93RXJyb3IoJ2Vycm9yJywgJ2RhdGEtYW5jaG9yIHRhZ3MgY2FuIG5vdCBoYXZlIHRoZSBzYW1lIHZhbHVlIGFzIGFueSBgaWRgIGVsZW1lbnQgb24gdGhlIHNpdGUgKG9yIGBuYW1lYCBlbGVtZW50IGZvciBJRSkuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5TmFtZSA9IGlkQXR0ci5sZW5ndGggPyAnaWQnIDogJ25hbWUnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihpZEF0dHIubGVuZ3RoIHx8IG5hbWVBdHRyLmxlbmd0aCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dFcnJvcignZXJyb3InLCAnXCInICsgbmFtZSArICdcIiBpcyBpcyBiZWluZyB1c2VkIGJ5IGFub3RoZXIgZWxlbWVudCBgJysgcHJvcGVydHlOYW1lICsnYCBwcm9wZXJ0eScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEdldHRpbmcgdGhlIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IHRvIHNjcm9sbCB3aGVuIHVzaW5nIGpRdWVyeSBhbmltYXRpb25zXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBnZXRTY3JvbGxlZFBvc2l0aW9uKGVsZW1lbnQpe1xyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb247XHJcblxyXG4gICAgICAgICAgICAvL2lzIG5vdCB0aGUgd2luZG93IGVsZW1lbnQgYW5kIGlzIGEgc2xpZGU/XHJcbiAgICAgICAgICAgIGlmKGVsZW1lbnQuc2VsZiAhPSB3aW5kb3cgJiYgaGFzQ2xhc3MoZWxlbWVudCwgU0xJREVTX1dSQVBQRVIpKXtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gZWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoIW9wdGlvbnMuYXV0b1Njcm9sbGluZyAgfHwgb3B0aW9ucy5zY3JvbGxCYXIpe1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBnZXRTY3JvbGxUb3AoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBlbGVtZW50Lm9mZnNldFRvcDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9nZXRzIHRoZSB0b3AgcHJvcGVydHkgb2YgdGhlIHdyYXBwZXJcclxuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBTaW11bGF0ZXMgdGhlIGFuaW1hdGVkIHNjcm9sbFRvcCBvZiBqUXVlcnkuIFVzZWQgd2hlbiBjc3MzOmZhbHNlIG9yIHNjcm9sbEJhcjp0cnVlIG9yIGF1dG9TY3JvbGxpbmc6ZmFsc2VcclxuICAgICAgICAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2MTM2Nzg5LzEwODEzOTZcclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNjcm9sbFRvKGVsZW1lbnQsIHRvLCBkdXJhdGlvbiwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gZ2V0U2Nyb2xsZWRQb3NpdGlvbihlbGVtZW50KTtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IHRvIC0gc3RhcnQ7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50VGltZSA9IDA7XHJcbiAgICAgICAgICAgIHZhciBpbmNyZW1lbnQgPSAyMDtcclxuICAgICAgICAgICAgYWN0aXZlQW5pbWF0aW9uID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBhbmltYXRlU2Nyb2xsID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGlmKGFjdGl2ZUFuaW1hdGlvbil7IC8vaW4gb3JkZXIgdG8gc3RvcGUgaXQgZnJvbSBvdGhlciBmdW5jdGlvbiB3aGVuZXZlciB3ZSB3YW50XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IHRvO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGltZSArPSBpbmNyZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGR1cmF0aW9uKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gd2luZG93LmZwX2Vhc2luZ3Nbb3B0aW9ucy5lYXNpbmddKGN1cnJlbnRUaW1lLCBzdGFydCwgY2hhbmdlLCBkdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZXRTY3JvbGxpbmcoZWxlbWVudCwgdmFsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY3VycmVudFRpbWUgPCBkdXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGFuaW1hdGVTY3JvbGwsIGluY3JlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYodHlwZW9mIGNhbGxiYWNrICE9PSAndW5kZWZpbmVkJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKGN1cnJlbnRUaW1lIDwgZHVyYXRpb24pe1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBhbmltYXRlU2Nyb2xsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIFNjcm9sbHMgdGhlIHBhZ2UgLyBzbGlkZXIgdGhlIGdpdmVuIG51bWJlciBvZiBwaXhlbHMuXHJcbiAgICAgICAgKiBJdCB3aWxsIGRvIGl0IG9uZSBvciBhbm90aGVyIHdheSBkZXBlbmRpb25nIG9uIHRoZSBsaWJyYXJ5J3MgY29uZmlnLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0U2Nyb2xsaW5nKGVsZW1lbnQsIHZhbCl7XHJcbiAgICAgICAgICAgIGlmKCFvcHRpb25zLmF1dG9TY3JvbGxpbmcgfHwgb3B0aW9ucy5zY3JvbGxCYXIgfHwgKGVsZW1lbnQuc2VsZiAhPSB3aW5kb3cgJiYgaGFzQ2xhc3MoZWxlbWVudCwgU0xJREVTX1dSQVBQRVIpKSl7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zY3JvbGxpbmcgaG9yaXpvbnRhbGx5IHRocm91Z2ggdGhlIHNsaWRlcz9cclxuICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuc2VsZiAhPSB3aW5kb3cgICYmIGhhc0NsYXNzKGVsZW1lbnQsIFNMSURFU19XUkFQUEVSKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0ID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy92ZXJ0aWNhbCBzY3JvbGxcclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxUbygwLCB2YWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IHZhbCArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogR2V0cyB0aGUgYWN0aXZlIHNsaWRlLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0QWN0aXZlU2xpZGUoKXtcclxuICAgICAgICAgICAgdmFyIGFjdGl2ZVNsaWRlID0gJChTTElERV9BQ1RJVkVfU0VMLCAkKFNFQ1RJT05fQUNUSVZFX1NFTClbMF0pWzBdO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbE9yU2xpZGUoYWN0aXZlU2xpZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBHZXRzIHRoZSBhY3RpdmUgc2VjdGlvbi5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFjdGl2ZVNlY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTZWN0aW9uKCQoU0VDVElPTl9BQ1RJVkVfU0VMKVswXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIEl0ZW0uIFNsaWRlIG9yIFNlY3Rpb24gb2JqZWN0cyBzaGFyZSB0aGUgc2FtZSBwcm9wZXJ0aWVzLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gSXRlbShlbCwgc2VsZWN0b3Ipe1xyXG4gICAgICAgICAgICB0aGlzLmFuY2hvciA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1hbmNob3InKTtcclxuICAgICAgICAgICAgdGhpcy5pdGVtID0gZWw7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBpbmRleChlbCwgc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICB0aGlzLmlzTGFzdCA9IHRoaXMuaW5kZXggPT09IGVsLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikubGVuZ3RoIC0xO1xyXG4gICAgICAgICAgICB0aGlzLmlzRmlyc3QgPSAhdGhpcy5pbmRleDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU2VjdGlvbiBvYmplY3RcclxuICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIFNlY3Rpb24oZWwpe1xyXG4gICAgICAgICAgICBJdGVtLmNhbGwodGhpcywgZWwsIFNFQ1RJT05fU0VMKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogU2xpZGUgb2JqZWN0XHJcbiAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBTbGlkZShlbCl7XHJcbiAgICAgICAgICAgIEl0ZW0uY2FsbCh0aGlzLCBlbCwgU0xJREVfU0VMKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBGUDtcclxuICAgIH0gLy9lbmQgb2YgJC5mbi5mdWxscGFnZVxyXG5cclxuICAgIC8vdXRpbHNcclxuICAgIC8qKlxyXG4gICAgKiBTaG93cyBhIG1lc3NhZ2UgaW4gdGhlIGNvbnNvbGUgb2YgdGhlIGdpdmVuIHR5cGUuXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gc2hvd0Vycm9yKHR5cGUsIHRleHQpe1xyXG4gICAgICAgIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlW3R5cGVdICYmIHdpbmRvdy5jb25zb2xlW3R5cGVdKCdmdWxsUGFnZTogJyArIHRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBFcXVpdmFsZW50IG9mIGpRdWVyeSBmdW5jdGlvbiAkKCkuXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCl7XHJcbiAgICAgICAgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gY29udGV4dCA6IGRvY3VtZW50O1xyXG4gICAgICAgIHJldHVybiBjb250ZXh0ID8gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEV4dGVuZHMgYSBnaXZlbiBPYmplY3QgcHJvcGVydGllcyBhbmQgaXRzIGNoaWxkcy5cclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBkZWVwRXh0ZW5kKG91dCkge1xyXG4gICAgICAgIG91dCA9IG91dCB8fCB7fTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKXtcclxuICAgICAgICAgICAgdmFyIG9iaiA9IGFyZ3VtZW50c1tpXTtcclxuXHJcbiAgICAgICAgICAgIGlmKCFvYmope1xyXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IodmFyIGtleSBpbiBvYmope1xyXG4gICAgICAgICAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KGtleSkpe1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAvLyBiYXNlZCBvbiBodHRwczovL2phdmFzY3JpcHR3ZWJsb2cud29yZHByZXNzLmNvbS8yMDExLzA4LzA4L2ZpeGluZy10aGUtamF2YXNjcmlwdC10eXBlb2Ytb3BlcmF0b3IvXHJcbiAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmpba2V5XSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKXtcclxuICAgICAgICAgICAgICAgIG91dFtrZXldID0gZGVlcEV4dGVuZChvdXRba2V5XSwgb2JqW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBvdXRba2V5XSA9IG9ialtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENoZWNrcyBpZiB0aGUgcGFzc2VkIGVsZW1lbnQgY29udGFpbnMgdGhlIHBhc3NlZCBjbGFzcy5cclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBoYXNDbGFzcyhlbCwgY2xhc3NOYW1lKXtcclxuICAgICAgICBpZihlbCA9PSBudWxsKXtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0KXtcclxuICAgICAgICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCgnKF58ICknICsgY2xhc3NOYW1lICsgJyggfCQpJywgJ2dpJykudGVzdChlbC5jbGFzc05hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBHZXRzIHRoZSB3aW5kb3cgaGVpZ2h0LiBDcm9zc2Jyb3dzZXIuXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0V2luZG93SGVpZ2h0KCl7XHJcbiAgICAgICAgcmV0dXJuICdpbm5lckhlaWdodCcgaW4gd2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogR2V0cyB0aGUgd2luZG93IHdpZHRoLlxyXG4gICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldFdpbmRvd1dpZHRoKCl7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBTZXQncyB0aGUgQ1NTIHByb3BlcnRpZXMgZm9yIHRoZSBwYXNzZWQgaXRlbS9zLlxyXG4gICAgKiBAcGFyYW0ge05vZGVMaXN0fEhUTUxFbGVtZW50fSBpdGVtc1xyXG4gICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgY3NzIHByb3BlcnRpZXMgYW5kIHZhbHVlcy5cclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBjc3MoaXRlbXMsIHByb3BzKSB7XHJcbiAgICAgICAgaXRlbXMgPSBnZXRMaXN0KGl0ZW1zKTtcclxuXHJcbiAgICAgICAgdmFyIGtleTtcclxuICAgICAgICBmb3IgKGtleSBpbiBwcm9wcykge1xyXG4gICAgICAgICAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zdHlsZVtrZXldID0gcHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpdGVtcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogR2VuZXJpYyBmdW5jdGlvbiB0byBnZXQgdGhlIHByZXZpb3VzIG9yIG5leHQgZWxlbWVudC5cclxuICAgICovXHJcbiAgICBmdW5jdGlvbiB1bnRpbChpdGVtLCBzZWxlY3RvciwgZm4pe1xyXG4gICAgICAgIHZhciBzaWJsaW5nID0gaXRlbVtmbl07XHJcbiAgICAgICAgd2hpbGUoc2libGluZyAmJiAhbWF0Y2hlcyhzaWJsaW5nLCBzZWxlY3Rvcikpe1xyXG4gICAgICAgICAgICBzaWJsaW5nID0gc2libGluZ1tmbl07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2libGluZztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogR2V0cyB0aGUgcHJldmlvdXMgZWxlbWVudCB0byB0aGUgcGFzc2VkIGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBwYXNzZWQgc2VsZWN0b3IuXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gcHJldlVudGlsKGl0ZW0sIHNlbGVjdG9yKXtcclxuICAgICAgICByZXR1cm4gdW50aWwoaXRlbSwgc2VsZWN0b3IsICdwcmV2aW91c0VsZW1lbnRTaWJsaW5nJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEdldHMgdGhlIG5leHQgZWxlbWVudCB0byB0aGUgcGFzc2VkIGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBwYXNzZWQgc2VsZWN0b3IuXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gbmV4dFVudGlsKGl0ZW0sIHNlbGVjdG9yKXtcclxuICAgICAgICByZXR1cm4gdW50aWwoaXRlbSwgc2VsZWN0b3IsICduZXh0RWxlbWVudFNpYmxpbmcnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogR2V0cyB0aGUgcHJldmlvdXMgZWxlbWVudCB0byB0aGUgcGFzc2VkIGVsZW1lbnQuXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gcHJldihpdGVtKXtcclxuICAgICAgICByZXR1cm4gaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBHZXRzIHRoZSBuZXh0IGVsZW1lbnQgdG8gdGhlIHBhc3NlZCBlbGVtZW50LlxyXG4gICAgKi9cclxuICAgIGZ1bmN0aW9uIG5leHQoaXRlbSl7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgZnJvbSB0aGUgcGFzc2VkIGxpc3Qgb2YgZWxlbWVudHMuXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gbGFzdChpdGVtKXtcclxuICAgICAgICByZXR1cm4gaXRlbVtpdGVtLmxlbmd0aC0xXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogR2V0cyBpbmRleCBmcm9tIHRoZSBwYXNzZWQgZWxlbWVudC5cclxuICAgICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yIGlzIG9wdGlvbmFsLlxyXG4gICAgKi9cclxuICAgIGZ1bmN0aW9uIGluZGV4KGl0ZW0sIHNlbGVjdG9yKSB7XHJcbiAgICAgICAgaXRlbSA9IGlzQXJyYXlPckxpc3QoaXRlbSkgPyBpdGVtWzBdIDogaXRlbTtcclxuICAgICAgICB2YXIgY2hpbGRyZW4gPSBzZWxlY3RvciAhPSBudWxsPyAkKHNlbGVjdG9yLCBpdGVtLnBhcmVudE5vZGUpIDogaXRlbS5wYXJlbnROb2RlLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgdmFyIG51bSA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICBpZiAoY2hpbGRyZW5baV0gPT0gaXRlbSkgcmV0dXJuIG51bTtcclxuICAgICAgICAgICAgIGlmIChjaGlsZHJlbltpXS5ub2RlVHlwZT09MSkgbnVtKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogR2V0cyBhbiBpdGVyYWJsZSBlbGVtZW50IGZvciB0aGUgcGFzc2VkIGVsZW1lbnQvc1xyXG4gICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldExpc3QoaXRlbSl7XHJcbiAgICAgICAgcmV0dXJuICFpc0FycmF5T3JMaXN0KGl0ZW0pID8gW2l0ZW1dIDogaXRlbTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogQWRkcyB0aGUgZGlzcGxheT1ub25lIHByb3BlcnR5IGZvciB0aGUgcGFzc2VkIGVsZW1lbnQvc1xyXG4gICAgKi9cclxuICAgIGZ1bmN0aW9uIGhpZGUoZWwpe1xyXG4gICAgICAgIGVsID0gZ2V0TGlzdChlbCk7XHJcblxyXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGk8ZWwubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBlbFtpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEFkZHMgdGhlIGRpc3BsYXk9YmxvY2sgcHJvcGVydHkgZm9yIHRoZSBwYXNzZWQgZWxlbWVudC9zXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gc2hvdyhlbCl7XHJcbiAgICAgICAgZWwgPSBnZXRMaXN0KGVsKTtcclxuXHJcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaTxlbC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGVsW2ldLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENoZWNrcyBpZiB0aGUgcGFzc2VkIGVsZW1lbnQgaXMgYW4gaXRlcmFibGUgZWxlbWVudCBvciBub3RcclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBpc0FycmF5T3JMaXN0KGVsKXtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCBlbCApID09PSAnW29iamVjdCBBcnJheV0nIHx8XHJcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCggZWwgKSA9PT0gJ1tvYmplY3QgTm9kZUxpc3RdJztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogQWRkcyB0aGUgcGFzc2VkIGNsYXNzIHRvIHRoZSBwYXNzZWQgZWxlbWVudC9zXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xyXG4gICAgICAgIGVsID0gZ2V0TGlzdChlbCk7XHJcblxyXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGk8ZWwubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IGVsW2ldO1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5jbGFzc0xpc3Qpe1xyXG4gICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICBpdGVtLmNsYXNzTmFtZSArPSAnICcgKyBjbGFzc05hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBSZW1vdmVzIHRoZSBwYXNzZWQgY2xhc3MgdG8gdGhlIHBhc3NlZCBlbGVtZW50L3NcclxuICAgICogQHBhcmFtIHtTdHJpbmd9IGBjbGFzc05hbWVgIGNhbiBiZSBtdWx0aXBsZSBjbGFzc25hbWVzIHNlcGFyYXRlZCBieSB3aGl0ZXNwYWNlXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSl7XHJcbiAgICAgICAgZWwgPSBnZXRMaXN0KGVsKTtcclxuXHJcbiAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBjbGFzc05hbWUuc3BsaXQoJyAnKTtcclxuXHJcbiAgICAgICAgZm9yKHZhciBhID0gMDsgYTxjbGFzc05hbWVzLmxlbmd0aDsgYSsrKXtcclxuICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lc1thXTtcclxuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaTxlbC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGVsW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uY2xhc3NMaXN0KXtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5jbGFzc05hbWUgPSBpdGVtLmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxiKScgKyBjbGFzc05hbWUuc3BsaXQoJyAnKS5qb2luKCd8JykgKyAnKFxcXFxifCQpJywgJ2dpJyksICcgJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBBcHBlbmRzIHRoZSBnaXZlbiBlbGVtZW50IG90IHRoZSBnaXZlbiBwYXJlbnQuXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gYXBwZW5kVG8oZWwsIHBhcmVudCl7XHJcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGVsKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgIFVzYWdlOlxyXG5cclxuICAgIHZhciB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB3cmFwcGVyLmNsYXNzTmFtZSA9ICdmcC1zbGlkZXMnO1xyXG4gICAgd3JhcCgkKCcuc2xpZGUnKSwgd3JhcHBlcik7XHJcblxyXG4gICAgaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvcXd6YzdveTMvMTUvICh2YW5pbGxhKVxyXG4gICAgaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvb3lhNm5ka2EvMS8gKGpxdWVyeSBlcXVpdmFsZW50KVxyXG4gICAgKi9cclxuICAgIGZ1bmN0aW9uIHdyYXAodG9XcmFwLCB3cmFwcGVyLCBpc1dyYXBBbGwpIHtcclxuICAgICAgICB2YXIgbmV3UGFyZW50O1xyXG4gICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0b1dyYXAubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IHRvV3JhcFtpXTtcclxuICAgICAgICAgICAgaWYoaXNXcmFwQWxsICYmICFpIHx8ICFpc1dyYXBBbGwpe1xyXG4gICAgICAgICAgICAgICAgbmV3UGFyZW50ID0gd3JhcHBlci5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBpdGVtLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld1BhcmVudCwgaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmV3UGFyZW50LmFwcGVuZENoaWxkKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdG9XcmFwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgVXNhZ2U6XHJcbiAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgd3JhcHBlci5jbGFzc05hbWUgPSAnZnAtc2xpZGVzJztcclxuICAgIHdyYXAoJCgnLnNsaWRlJyksIHdyYXBwZXIpO1xyXG5cclxuICAgIGh0dHBzOi8vanNmaWRkbGUubmV0L3F3emM3b3kzLzI3LyAodmFuaWxsYSlcclxuICAgIGh0dHBzOi8vanNmaWRkbGUubmV0L295YTZuZGthLzQvIChqcXVlcnkgZXF1aXZhbGVudClcclxuICAgICovXHJcbiAgICBmdW5jdGlvbiB3cmFwQWxsKHRvV3JhcCwgd3JhcHBlcikge1xyXG4gICAgICAgIHdyYXAodG9XcmFwLCB3cmFwcGVyLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogVXNhZ2U6XHJcbiAgICAqIHdyYXBJbm5lcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGVwZScpLCAnPGRpdiBjbGFzcz1cInRlc3RcIj5hZmRhczwvZGl2PicpO1xyXG4gICAgKiB3cmFwSW5uZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BlcGUnKSwgZWxlbWVudCk7XHJcbiAgICAqXHJcbiAgICAqIGh0dHBzOi8vanNmaWRkbGUubmV0L3pleHh6MHR3LzYvXHJcbiAgICAqXHJcbiAgICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMTgxNzU5MC8xMDgxMzk2XHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gd3JhcElubmVyKHBhcmVudCwgd3JhcHBlcikge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygd3JhcHBlciA9PT0gXCJzdHJpbmdcIil7XHJcbiAgICAgICAgICAgIHdyYXBwZXIgPSBjcmVhdGVFbGVtZW50RnJvbUhUTUwod3JhcHBlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQod3JhcHBlcik7XHJcblxyXG4gICAgICAgIHdoaWxlKHBhcmVudC5maXJzdENoaWxkICE9PSB3cmFwcGVyKXtcclxuICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChwYXJlbnQuZmlyc3RDaGlsZCk7XHJcbiAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFVzYWdlOlxyXG4gICAgKiB1bndyYXAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BlcGUnKSk7XHJcbiAgICAqIHVud3JhcChlbGVtZW50KTtcclxuICAgICpcclxuICAgICogaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvc3pqdDBoeHEvMS9cclxuICAgICpcclxuICAgICovXHJcbiAgICBmdW5jdGlvbiB1bndyYXAod3JhcHBlcikge1xyXG4gICAgICAgIHZhciB3cmFwcGVyQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgICAgICB3aGlsZSAod3JhcHBlci5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgIHdyYXBwZXJDb250ZW50LmFwcGVuZENoaWxkKHdyYXBwZXIuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3cmFwcGVyLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHdyYXBwZXJDb250ZW50LCB3cmFwcGVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMjEwMDg1My9kb20tcHVyZS1qYXZhc2NyaXB0LXNvbHV0aW9uLXRvLWpxdWVyeS1jbG9zZXN0LWltcGxlbWVudGF0aW9uXHJcbiAgICAqIFJldHVybnMgdGhlIGVsZW1lbnQgb3IgYGZhbHNlYCBpZiB0aGVyZSdzIG5vbmVcclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBjbG9zZXN0KGVsLCBzZWxlY3Rvcikge1xyXG4gICAgICAgIGlmKGVsICYmIGVsLm5vZGVUeXBlID09PSAxKXtcclxuICAgICAgICAgICAgaWYobWF0Y2hlcyhlbCwgc2VsZWN0b3IpKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY2xvc2VzdChlbC5wYXJlbnROb2RlLCBzZWxlY3Rvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBQbGFjZXMgb25lIGVsZW1lbnQgKHJlbCkgYWZ0ZXIgYW5vdGhlciBvbmUgb3IgZ3JvdXAgb2YgdGhlbSAocmVmZXJlbmNlKS5cclxuICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXHJcbiAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8Tm9kZUxpc3R8U3RyaW5nfSBlbFxyXG4gICAgKiBodHRwczovL2pzZmlkZGxlLm5ldC85czk3aGh6di8xL1xyXG4gICAgKi9cclxuICAgIGZ1bmN0aW9uIGFmdGVyKHJlZmVyZW5jZSwgZWwpIHtcclxuICAgICAgICBpbnNlcnRCZWZvcmUocmVmZXJlbmNlLCByZWZlcmVuY2UubmV4dFNpYmxpbmcsIGVsKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogUGxhY2VzIG9uZSBlbGVtZW50IChyZWwpIGJlZm9yZSBhbm90aGVyIG9uZSBvciBncm91cCBvZiB0aGVtIChyZWZlcmVuY2UpLlxyXG4gICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcclxuICAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxOb2RlTGlzdHxTdHJpbmd9IGVsXHJcbiAgICAqIGh0dHBzOi8vanNmaWRkbGUubmV0LzlzOTdoaHp2LzEvXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gYmVmb3JlKHJlZmVyZW5jZSwgZWwpIHtcclxuICAgICAgICBpbnNlcnRCZWZvcmUocmVmZXJlbmNlLCByZWZlcmVuY2UsIGVsKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogQmFzZWQgaW4gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE5MzE2MDI0LzEwODEzOTZcclxuICAgICogYW5kIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NzkzNjMwLzEwODEzOTZcclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBpbnNlcnRCZWZvcmUocmVmZXJlbmNlLCBiZWZvcmVFbGVtZW50LCBlbCl7XHJcbiAgICAgICAgaWYoIWlzQXJyYXlPckxpc3QoZWwpKXtcclxuICAgICAgICAgICAgaWYodHlwZW9mIGVsID09ICdzdHJpbmcnKXtcclxuICAgICAgICAgICAgICAgIGVsID0gY3JlYXRlRWxlbWVudEZyb21IVE1MKGVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbCA9IFtlbF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpPGVsLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgcmVmZXJlbmNlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsW2ldLCBiZWZvcmVFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM0NjQ4NzYvamF2YXNjcmlwdC1nZXQtd2luZG93LXgteS1wb3NpdGlvbi1mb3Itc2Nyb2xsXHJcbiAgICBmdW5jdGlvbiBnZXRTY3JvbGxUb3AoKXtcclxuICAgICAgICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG4gICAgICAgIHJldHVybiAod2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvYy5zY3JvbGxUb3ApICAtIChkb2MuY2xpZW50VG9wIHx8IDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBHZXRzIHRoZSBzaWJsaW5ncyBvZiB0aGUgcGFzc2VkIGVsZW1lbnRcclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBzaWJsaW5ncyhlbCl7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChlbC5wYXJlbnROb2RlLmNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCl7XHJcbiAgICAgICAgICByZXR1cm4gY2hpbGQgIT09IGVsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vZm9yIElFIDkgP1xyXG4gICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZXZlbnQpe1xyXG4gICAgICAgIGlmKGV2ZW50LnByZXZlbnREZWZhdWx0KXtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGFzc2VkIGl0ZW0gaXMgb2YgZnVuY3Rpb24gdHlwZS5cclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKGl0ZW0pO1xyXG4gICAgICByZXR1cm4gdHlwZSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJyB8fCB0eXBlID09PSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBUcmlnZ2VyIGN1c3RvbSBldmVudHNcclxuICAgICovXHJcbiAgICBmdW5jdGlvbiB0cmlnZ2VyKGVsLCBldmVudE5hbWUsIGRhdGEpe1xyXG4gICAgICAgIHZhciBldmVudDtcclxuICAgICAgICBkYXRhID0gdHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnID8ge30gOiBkYXRhO1xyXG5cclxuICAgICAgICAvLyBOYXRpdmVcclxuICAgICAgICBpZih0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSBcImZ1bmN0aW9uXCIgKXtcclxuICAgICAgICAgICAgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7ZGV0YWlsOiBkYXRhfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XHJcbiAgICAgICAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudChldmVudE5hbWUsIHRydWUsIHRydWUsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFBvbHlmaWxsIG9mIC5tYXRjaGVzKClcclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBtYXRjaGVzKGVsLCBzZWxlY3Rvcikge1xyXG4gICAgICAgIHJldHVybiAoZWwubWF0Y2hlcyB8fCBlbC5tYXRjaGVzU2VsZWN0b3IgfHwgZWwubXNNYXRjaGVzU2VsZWN0b3IgfHwgZWwubW96TWF0Y2hlc1NlbGVjdG9yIHx8IGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBlbC5vTWF0Y2hlc1NlbGVjdG9yKS5jYWxsKGVsLCBzZWxlY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFRvZ2dsZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIHBhc3NlZCBlbGVtZW50IGVsLlxyXG4gICAgKi9cclxuICAgIGZ1bmN0aW9uIHRvZ2dsZShlbCwgdmFsdWUpe1xyXG4gICAgICAgIGlmKHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIpe1xyXG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpPGVsLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGVsW2ldLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/ICdibG9jaycgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy93ZSBkb24ndCB1c2UgaXQgaW4gb3RoZXIgd2F5LCBzbyBubyBlbHNlIDopXHJcblxyXG4gICAgICAgIHJldHVybiBlbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogQ3JlYXRlcyBhIEhUTUxFbGVtZW50IGZyb20gdGhlIHBhc3NlZCBIVE1MIHN0cmluZy5cclxuICAgICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ5NDM0OC8xMDgxMzk2XHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudEZyb21IVE1MKGh0bWxTdHJpbmcpIHtcclxuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IGh0bWxTdHJpbmcudHJpbSgpO1xyXG5cclxuICAgICAgICAvLyBDaGFuZ2UgdGhpcyB0byBkaXYuY2hpbGROb2RlcyB0byBzdXBwb3J0IG11bHRpcGxlIHRvcC1sZXZlbCBub2Rlc1xyXG4gICAgICAgIHJldHVybiBkaXYuZmlyc3RDaGlsZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogUmVtb3ZlcyB0aGUgcGFzc2VkIGl0ZW0vcyBmcm9tIHRoZSBET00uXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGl0ZW1zKXtcclxuICAgICAgICBpdGVtcyA9IGdldExpc3QoaXRlbXMpO1xyXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGk8aXRlbXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgICAgICAgICBpZihpdGVtICYmIGl0ZW0ucGFyZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBGaWx0ZXJzIGFuIGFycmF5IGJ5IHRoZSBwYXNzZWQgZmlsdGVyIGZ1bnRpb24uXHJcbiAgICAqL1xyXG4gICAgZnVuY3Rpb24gZmlsdGVyKGVsLCBmaWx0ZXJGbil7XHJcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGVsLCBmaWx0ZXJGbik7XHJcbiAgICB9XHJcblxyXG4gICAgLy9odHRwczovL2pzZmlkZGxlLm5ldC93MXJrdGVjei9cclxuICAgIGZ1bmN0aW9uIHVudGlsQWxsKGl0ZW0sIHNlbGVjdG9yLCBmbil7XHJcbiAgICAgICAgdmFyIHNpYmxpbmcgPSBpdGVtW2ZuXTtcclxuICAgICAgICB2YXIgc2libGluZ3MgPSBbXTtcclxuICAgICAgICB3aGlsZShzaWJsaW5nKXtcclxuICAgICAgICAgICAgaWYobWF0Y2hlcyhzaWJsaW5nLCBzZWxlY3RvcikgfHwgc2VsZWN0b3IgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc2libGluZ3MucHVzaChzaWJsaW5nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzaWJsaW5nID0gc2libGluZ1tmbl07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2libGluZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEdldHMgYWxsIG5leHQgZWxlbWVudHMgbWF0Y2hpbmcgdGhlIHBhc3NlZCBzZWxlY3Rvci5cclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBuZXh0QWxsKGl0ZW0sIHNlbGVjdG9yKXtcclxuICAgICAgICByZXR1cm4gdW50aWxBbGwoaXRlbSwgc2VsZWN0b3IsICduZXh0RWxlbWVudFNpYmxpbmcnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogR2V0cyBhbGwgcHJldmlvdXMgZWxlbWVudHMgbWF0Y2hpbmcgdGhlIHBhc3NlZCBzZWxlY3Rvci5cclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBwcmV2QWxsKGl0ZW0sIHNlbGVjdG9yKXtcclxuICAgICAgICByZXR1cm4gdW50aWxBbGwoaXRlbSwgc2VsZWN0b3IsICdwcmV2aW91c0VsZW1lbnRTaWJsaW5nJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENvbnZlcnRzIGFuIG9iamVjdCB0byBhbiBhcnJheS5cclxuICAgICovXHJcbiAgICBmdW5jdGlvbiB0b0FycmF5KG9iamVjdERhdGEpe1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3REYXRhKS5tYXAoZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgICAgICAgcmV0dXJuIG9iamVjdERhdGFba2V5XTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogZm9yRWFjaCBwb2x5ZmlsbCBmb3IgSUVcclxuICAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGVMaXN0L2ZvckVhY2gjQnJvd3Nlcl9Db21wYXRpYmlsaXR5XHJcbiAgICAqL1xyXG4gICAgaWYgKHdpbmRvdy5Ob2RlTGlzdCAmJiAhTm9kZUxpc3QucHJvdG90eXBlLmZvckVhY2gpIHtcclxuICAgICAgICBOb2RlTGlzdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc0FyZykge1xyXG4gICAgICAgICAgICB0aGlzQXJnID0gdGhpc0FyZyB8fCB3aW5kb3c7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzW2ldLCBpLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy91dGlscyBhcmUgcHVibGljLCBzbyB3ZSBjYW4gdXNlIGl0IHdoZXJldmVyIHdlIHdhbnRcclxuICAgIHdpbmRvdy5mcF91dGlscyA9IHtcclxuICAgICAgICAkOiAkLFxyXG4gICAgICAgIGRlZXBFeHRlbmQ6IGRlZXBFeHRlbmQsXHJcbiAgICAgICAgaGFzQ2xhc3M6IGhhc0NsYXNzLFxyXG4gICAgICAgIGdldFdpbmRvd0hlaWdodDogZ2V0V2luZG93SGVpZ2h0LFxyXG4gICAgICAgIGNzczogY3NzLFxyXG4gICAgICAgIHVudGlsOiB1bnRpbCxcclxuICAgICAgICBwcmV2VW50aWw6IHByZXZVbnRpbCxcclxuICAgICAgICBuZXh0VW50aWw6IG5leHRVbnRpbCxcclxuICAgICAgICBwcmV2OiBwcmV2LFxyXG4gICAgICAgIG5leHQ6IG5leHQsXHJcbiAgICAgICAgbGFzdDogbGFzdCxcclxuICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgZ2V0TGlzdDogZ2V0TGlzdCxcclxuICAgICAgICBoaWRlOiBoaWRlLFxyXG4gICAgICAgIHNob3c6IHNob3csXHJcbiAgICAgICAgaXNBcnJheU9yTGlzdDogaXNBcnJheU9yTGlzdCxcclxuICAgICAgICBhZGRDbGFzczogYWRkQ2xhc3MsXHJcbiAgICAgICAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLFxyXG4gICAgICAgIGFwcGVuZFRvOiBhcHBlbmRUbyxcclxuICAgICAgICB3cmFwOiB3cmFwLFxyXG4gICAgICAgIHdyYXBBbGw6IHdyYXBBbGwsXHJcbiAgICAgICAgd3JhcElubmVyOiB3cmFwSW5uZXIsXHJcbiAgICAgICAgdW53cmFwOiB1bndyYXAsXHJcbiAgICAgICAgY2xvc2VzdDogY2xvc2VzdCxcclxuICAgICAgICBhZnRlcjogYWZ0ZXIsXHJcbiAgICAgICAgYmVmb3JlOiBiZWZvcmUsXHJcbiAgICAgICAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXHJcbiAgICAgICAgZ2V0U2Nyb2xsVG9wOiBnZXRTY3JvbGxUb3AsXHJcbiAgICAgICAgc2libGluZ3M6IHNpYmxpbmdzLFxyXG4gICAgICAgIHByZXZlbnREZWZhdWx0OiBwcmV2ZW50RGVmYXVsdCxcclxuICAgICAgICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxyXG4gICAgICAgIHRyaWdnZXI6IHRyaWdnZXIsXHJcbiAgICAgICAgbWF0Y2hlczogbWF0Y2hlcyxcclxuICAgICAgICB0b2dnbGU6IHRvZ2dsZSxcclxuICAgICAgICBjcmVhdGVFbGVtZW50RnJvbUhUTUw6IGNyZWF0ZUVsZW1lbnRGcm9tSFRNTCxcclxuICAgICAgICByZW1vdmU6IHJlbW92ZSxcclxuICAgICAgICBmaWx0ZXI6IGZpbHRlcixcclxuICAgICAgICB1bnRpbEFsbDogdW50aWxBbGwsXHJcbiAgICAgICAgbmV4dEFsbDogbmV4dEFsbCxcclxuICAgICAgICBwcmV2QWxsOiBwcmV2QWxsLFxyXG4gICAgICAgIHNob3dFcnJvcjogc2hvd0Vycm9yXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBpbml0aWFsaXNlO1xyXG59KSk7XHJcblxyXG4vKipcclxuICogalF1ZXJ5IGFkYXB0ZXIgZm9yIGZ1bGxQYWdlLmpzIDMuMC4wXHJcbiAqL1xyXG5pZih3aW5kb3cualF1ZXJ5ICYmIHdpbmRvdy5mdWxscGFnZSl7XHJcbiAgICAoZnVuY3Rpb24gKCQsIGZ1bGxwYWdlKSB7XHJcbiAgICAgICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgICAgICAvLyBObyBqUXVlcnkgTm8gR29cclxuICAgICAgICBpZiAoISQgfHwgIWZ1bGxwYWdlKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5mcF91dGlscy5zaG93RXJyb3IoJ2Vycm9yJywgJ2pRdWVyeSBpcyByZXF1aXJlZCB0byB1c2UgdGhlIGpRdWVyeSBmdWxscGFnZSBhZGFwdGVyIScpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkLmZuLmZ1bGxwYWdlID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgICAgICBvcHRpb25zID0gJC5leHRlbmQoe30sIG9wdGlvbnMsIHsnJCc6ICR9KTtcclxuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gbmV3IGZ1bGxwYWdlKHRoaXNbMF0sIG9wdGlvbnMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9KSh3aW5kb3cualF1ZXJ5LCB3aW5kb3cuZnVsbHBhZ2UpO1xyXG59XHJcbiIsIi8qIVxuICogZnVsbFBhZ2UgMi45LjcgLSBFeHRlbnNpb25zIDAuMS41XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYWx2YXJvdHJpZ28vZnVsbFBhZ2UuanNcbiAqIEBsaWNlbnNlIGh0dHA6Ly9hbHZhcm90cmlnby5jb20vZnVsbFBhZ2UvZXh0ZW5zaW9ucy8jbGljZW5zZVxuICpcbiAqIENvcHlyaWdodCAoQykgMjAxNSBhbHZhcm90cmlnby5jb20gLSBBIHByb2plY3QgYnkgQWx2YXJvIFRyaWdvXG4gKi9cbiFmdW5jdGlvbihlLG4pe1widXNlIHN0cmljdFwiO1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wianF1ZXJ5XCJdLGZ1bmN0aW9uKHQpe3JldHVybiBuKHQsZSxlLmRvY3VtZW50LGUuTWF0aCl9KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1uKHJlcXVpcmUoXCJqcXVlcnlcIiksZSxlLmRvY3VtZW50LGUuTWF0aCk6bihqUXVlcnksZSxlLmRvY3VtZW50LGUuTWF0aCl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMsZnVuY3Rpb24oZSxuLHQsbyxpKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1cImZ1bGxwYWdlLXdyYXBwZXJcIixyPVwiLlwiK2EsbD1cImZwLXJlc3BvbnNpdmVcIixzPVwiZnAtbm90cmFuc2l0aW9uXCIsYz1cImZwLWRlc3Ryb3llZFwiLGQ9XCJmcC1lbmFibGVkXCIsZj1cImZwLXZpZXdpbmdcIix1PVwiYWN0aXZlXCIsdj1cIi5cIit1LGg9XCJmcC1jb21wbGV0ZWx5XCIscD1cIi5cIitoLGc9XCJmcC1zZWN0aW9uXCIsbT1cIi5cIitnLFM9bSt2LHc9bStcIjpmaXJzdFwiLGI9bStcIjpsYXN0XCIseD1cImZwLXRhYmxlQ2VsbFwiLHk9XCIuXCIreCxDPVwiZnAtYXV0by1oZWlnaHRcIixUPVwiZnAtbm9ybWFsLXNjcm9sbFwiLEE9XCJmcC1uYXZcIixNPVwiI1wiK0Esaz1cImZwLXRvb2x0aXBcIixPPVwiLlwiK2ssUj1cImZwLXNob3ctYWN0aXZlXCIsej1cImZwLXNsaWRlXCIsST1cIi5cIit6LEw9SSt2LEg9XCJmcC1zbGlkZXNcIixFPVwiLlwiK0gsQj1cImZwLXNsaWRlc0NvbnRhaW5lclwiLEQ9XCIuXCIrQixQPVwiZnAtdGFibGVcIixZPVwiZnAtaW5pdGlhbFwiLEY9XCJmcC1zbGlkZXNOYXZcIixXPVwiLlwiK0YsWD1XK1wiIGFcIixWPVwiZnAtY29udHJvbEFycm93XCIsWj1cIi5cIitWLE49XCJmcC1wcmV2XCIsaj1WK1wiIFwiK04scT1aKyhcIi5cIitOKSxHPVwiZnAtbmV4dFwiLFU9VitcIiBcIitHLFE9WitcIi5mcC1uZXh0XCIsSj1lKG4pLEs9ZSh0KTtlLmZuLmZ1bGxwYWdlPWZ1bmN0aW9uKFYpe2lmKGUoXCJodG1sXCIpLmhhc0NsYXNzKGQpKWt0KCk7ZWxzZXt2YXIgRz1lKFwiaHRtbCwgYm9keVwiKSxfPWUoXCJib2R5XCIpLCQ9ZS5mbi5mdWxscGFnZTtWPWUuZXh0ZW5kKCEwLHttZW51OiExLGFuY2hvcnM6W10sbG9ja0FuY2hvcnM6ITEsbmF2aWdhdGlvbjohMSxuYXZpZ2F0aW9uUG9zaXRpb246XCJyaWdodFwiLG5hdmlnYXRpb25Ub29sdGlwczpbXSxzaG93QWN0aXZlVG9vbHRpcDohMSxzbGlkZXNOYXZpZ2F0aW9uOiExLHNsaWRlc05hdlBvc2l0aW9uOlwiYm90dG9tXCIsc2Nyb2xsQmFyOiExLGh5YnJpZDohMSxjc3MzOiEwLHNjcm9sbGluZ1NwZWVkOjcwMCxhdXRvU2Nyb2xsaW5nOiEwLGZpdFRvU2VjdGlvbjohMCxmaXRUb1NlY3Rpb25EZWxheToxZTMsZWFzaW5nOlwiZWFzZUluT3V0Q3ViaWNcIixlYXNpbmdjc3MzOlwiZWFzZVwiLGxvb3BCb3R0b206ITEsbG9vcFRvcDohMSxsb29wSG9yaXpvbnRhbDohMCxjb250aW51b3VzVmVydGljYWw6ITEsY29udGludW91c0hvcml6b250YWw6ITEsc2Nyb2xsSG9yaXpvbnRhbGx5OiExLGludGVybG9ja2VkU2xpZGVzOiExLGRyYWdBbmRNb3ZlOiExLG9mZnNldFNlY3Rpb25zOiExLHJlc2V0U2xpZGVyczohMSxmYWRpbmdFZmZlY3Q6ITEsbm9ybWFsU2Nyb2xsRWxlbWVudHM6bnVsbCxzY3JvbGxPdmVyZmxvdzohMSxzY3JvbGxPdmVyZmxvd1Jlc2V0OiExLHNjcm9sbE92ZXJmbG93SGFuZGxlcjplLmZuLmZwX3Njcm9sbG92ZXJmbG93P2UuZm4uZnBfc2Nyb2xsb3ZlcmZsb3cuaXNjcm9sbEhhbmRsZXI6bnVsbCxzY3JvbGxPdmVyZmxvd09wdGlvbnM6bnVsbCx0b3VjaFNlbnNpdGl2aXR5OjUsbm9ybWFsU2Nyb2xsRWxlbWVudFRvdWNoVGhyZXNob2xkOjUsYmlnU2VjdGlvbnNEZXN0aW5hdGlvbjpudWxsLGtleWJvYXJkU2Nyb2xsaW5nOiEwLGFuaW1hdGVBbmNob3I6ITAscmVjb3JkSGlzdG9yeTohMCxjb250cm9sQXJyb3dzOiEwLGNvbnRyb2xBcnJvd0NvbG9yOlwiI2ZmZlwiLHZlcnRpY2FsQ2VudGVyZWQ6ITAsc2VjdGlvbnNDb2xvcjpbXSxwYWRkaW5nVG9wOjAscGFkZGluZ0JvdHRvbTowLGZpeGVkRWxlbWVudHM6bnVsbCxyZXNwb25zaXZlOjAscmVzcG9uc2l2ZVdpZHRoOjAscmVzcG9uc2l2ZUhlaWdodDowLHJlc3BvbnNpdmVTbGlkZXM6ITEscGFyYWxsYXg6ITEscGFyYWxsYXhPcHRpb25zOnt0eXBlOlwicmV2ZWFsXCIscGVyY2VudGFnZTo2Mixwcm9wZXJ0eTpcInRyYW5zbGF0ZVwifSxzZWN0aW9uU2VsZWN0b3I6XCIuc2VjdGlvblwiLHNsaWRlU2VsZWN0b3I6XCIuc2xpZGVcIixhZnRlckxvYWQ6bnVsbCxvbkxlYXZlOm51bGwsYWZ0ZXJSZW5kZXI6bnVsbCxhZnRlclJlc2l6ZTpudWxsLGFmdGVyUmVCdWlsZDpudWxsLGFmdGVyU2xpZGVMb2FkOm51bGwsb25TbGlkZUxlYXZlOm51bGwsYWZ0ZXJSZXNwb25zaXZlOm51bGwsbGF6eUxvYWRpbmc6ITB9LFYpO3ZhciBlZSxuZSx0ZSxvZSxpZT0hMSxhZT1uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC8oaVBob25lfGlQb2R8aVBhZHxBbmRyb2lkfHBsYXlib29rfHNpbGt8QmxhY2tCZXJyeXxCQjEwfFdpbmRvd3MgUGhvbmV8VGl6ZW58QmFkYXx3ZWJPU3xJRU1vYmlsZXxPcGVyYSBNaW5pKS8pLHJlPVwib250b3VjaHN0YXJ0XCJpbiBufHxuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cz4wfHxuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMsbGU9ZSh0aGlzKSxzZT1KLmhlaWdodCgpLGNlPSExLGRlPSEwLGZlPSEwLHVlPVtdLHZlPXttOnt1cDohMCxkb3duOiEwLGxlZnQ6ITAscmlnaHQ6ITB9fTt2ZS5rPWUuZXh0ZW5kKCEwLHt9LHZlLm0pO3ZhciBoZSxwZSxnZSxtZSxTZSx3ZSxiZSx4ZSx5ZT1wdCgpLENlPXt0b3VjaG1vdmU6XCJvbnRvdWNobW92ZVwiaW4gbj9cInRvdWNobW92ZVwiOnllLm1vdmUsdG91Y2hzdGFydDpcIm9udG91Y2hzdGFydFwiaW4gbj9cInRvdWNoc3RhcnRcIjp5ZS5kb3dufSxUZT0hMSxBZT0nYVtocmVmXSwgYXJlYVtocmVmXSwgaW5wdXQ6bm90KFtkaXNhYmxlZF0pLCBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pLCB0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSksIGJ1dHRvbjpub3QoW2Rpc2FibGVkXSksIGlmcmFtZSwgb2JqZWN0LCBlbWJlZCwgW3RhYmluZGV4PVwiMFwiXSwgW2NvbnRlbnRlZGl0YWJsZV0nLE1lPWUuZXh0ZW5kKCEwLHt9LFYpLGtlPXt9O2t0KCksZS5leHRlbmQoZS5lYXNpbmcse2Vhc2VJbk91dEN1YmljOmZ1bmN0aW9uKGUsbix0LG8saSl7cmV0dXJuKG4vPWkvMik8MT9vLzIqbipuKm4rdDpvLzIqKChuLT0yKSpuKm4rMikrdH19KSxlLmV2ZW50LnNwZWNpYWwuZGVzdHJveWVkPXtyZW1vdmU6ZnVuY3Rpb24oZSl7ZS5oYW5kbGVyJiZlLmhhbmRsZXIoKX19LGUodGhpcykubGVuZ3RoJiYoJC52ZXJzaW9uPVwiMi45LjdcIiwkLnNldEF1dG9TY3JvbGxpbmc9WmUsJC5zZXRSZWNvcmRIaXN0b3J5PU5lLCQuc2V0U2Nyb2xsaW5nU3BlZWQ9amUsJC5zZXRGaXRUb1NlY3Rpb249cWUsJC5zZXRMb2NrQW5jaG9ycz1mdW5jdGlvbihlKXtWLmxvY2tBbmNob3JzPWV9LCQuc2V0TW91c2VXaGVlbFNjcm9sbGluZz1HZSwkLnNldEFsbG93U2Nyb2xsaW5nPVVlLCQuc2V0S2V5Ym9hcmRTY3JvbGxpbmc9UWUsJC5tb3ZlU2VjdGlvblVwPUplLCQubW92ZVNlY3Rpb25Eb3duPUtlLCQuc2lsZW50TW92ZVRvPV9lLCQubW92ZVRvPSRlLCQubW92ZVNsaWRlUmlnaHQ9ZW4sJC5tb3ZlU2xpZGVMZWZ0PW5uLCQuZml0VG9TZWN0aW9uPWZuLCQucmVCdWlsZD10biwkLnNldFJlc3BvbnNpdmU9b24sJC5nZXRGdWxscGFnZURhdGE9ZnVuY3Rpb24oKXtyZXR1cm57b3B0aW9uczpWLGludGVybmFsczp7Y2FuU2Nyb2xsOmZlLGlzU2Nyb2xsQWxsb3dlZDp2ZSxnZXREZXN0aW5hdGlvblBvc2l0aW9uOnhuLGlzVG91Y2g6cmUsYzpMbixnZXRYbW92ZW1lbnQ6aXQscmVtb3ZlQW5pbWF0aW9uOm50LGdldFRyYW5zZm9ybXM6d3QsbGF6eUxvYWQ6QW4sYWRkQW5pbWF0aW9uOmV0LHBlcmZvcm1Ib3Jpem9udGFsTW92ZTpLbixsYW5kc2NhcGVTY3JvbGw6VW4sc2lsZW50TGFuZHNjYXBlU2Nyb2xsOm10LGtlZXBTbGlkZXNQb3NpdGlvbjpibixzaWxlbnRTY3JvbGw6U3Qsc3R5bGVTbGlkZXM6cm4sc2Nyb2xsSGFuZGxlcjpjbixnZXRFdmVudHNQYWdlOmd0LGdldE1TUG9pbnRlcjpwdCxpc1JlYWxseVRvdWNoOnBuLHVzaW5nRXh0ZW5zaW9uOnl0LHRvZ2dsZUNvbnRyb2xBcnJvd3M6UW59fX0sJC5kZXN0cm95PWZ1bmN0aW9uKG4pe2xlLnRyaWdnZXIoXCJkZXN0cm95XCIsW25dKSxaZSghMSxcImludGVybmFsXCIpLFVlKCExKSxRZSghMSksbGUuYWRkQ2xhc3MoYyksY2xlYXJUaW1lb3V0KG1lKSxjbGVhclRpbWVvdXQoZ2UpLGNsZWFyVGltZW91dChwZSksY2xlYXJUaW1lb3V0KFNlKSxjbGVhclRpbWVvdXQod2UpLEoub2ZmKFwic2Nyb2xsXCIsY24pLm9mZihcImhhc2hjaGFuZ2VcIixEbikub2ZmKFwicmVzaXplXCIsX24pLEsub2ZmKFwia2V5ZG93blwiLFluKS5vZmYoXCJrZXl1cFwiLFduKS5vZmYoXCJjbGljayB0b3VjaHN0YXJ0XCIsTStcIiBhXCIpLm9mZihcIm1vdXNlZW50ZXJcIixNK1wiIGxpXCIpLm9mZihcIm1vdXNlbGVhdmVcIixNK1wiIGxpXCIpLm9mZihcImNsaWNrIHRvdWNoc3RhcnRcIixYKS5vZmYoXCJtb3VzZW92ZXJcIixWLm5vcm1hbFNjcm9sbEVsZW1lbnRzKS5vZmYoXCJtb3VzZW91dFwiLFYubm9ybWFsU2Nyb2xsRWxlbWVudHMpLGUobSkub2ZmKFwiY2xpY2sgdG91Y2hzdGFydFwiLFopLHl0KFwiZHJhZ0FuZE1vdmVcIikmJiQuZHJhZ0FuZE1vdmUuZGVzdHJveSgpO2NsZWFyVGltZW91dChtZSksY2xlYXJUaW1lb3V0KGdlKSxuJiZmdW5jdGlvbigpe1N0KDApLGxlLmZpbmQoXCJpbWdbZGF0YS1zcmNdLCBzb3VyY2VbZGF0YS1zcmNdLCBhdWRpb1tkYXRhLXNyY10sIGlmcmFtZVtkYXRhLXNyY11cIikuZWFjaChmdW5jdGlvbigpe1RuKGUodGhpcyksXCJzcmNcIil9KSxsZS5maW5kKFwiaW1nW2RhdGEtc3Jjc2V0XVwiKS5lYWNoKGZ1bmN0aW9uKCl7VG4oZSh0aGlzKSxcInNyY3NldFwiKX0pLGUoTStcIiwgXCIrVytcIiwgXCIrWikucmVtb3ZlKCksZShtKS5jc3Moe2hlaWdodDpcIlwiLFwiYmFja2dyb3VuZC1jb2xvclwiOlwiXCIscGFkZGluZzpcIlwifSksZShJKS5jc3Moe3dpZHRoOlwiXCJ9KSxsZS5jc3Moe2hlaWdodDpcIlwiLHBvc2l0aW9uOlwiXCIsXCItbXMtdG91Y2gtYWN0aW9uXCI6XCJcIixcInRvdWNoLWFjdGlvblwiOlwiXCJ9KSxHLmNzcyh7b3ZlcmZsb3c6XCJcIixoZWlnaHQ6XCJcIn0pLGUoXCJodG1sXCIpLnJlbW92ZUNsYXNzKGQpLF8ucmVtb3ZlQ2xhc3MobCksZS5lYWNoKF8uZ2V0KDApLmNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLGZ1bmN0aW9uKGUsbil7MD09PW4uaW5kZXhPZihmKSYmXy5yZW1vdmVDbGFzcyhuKX0pLGUobStcIiwgXCIrSSkuZWFjaChmdW5jdGlvbigpe1Yuc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyJiZWLnNjcm9sbE92ZXJmbG93SGFuZGxlci5yZW1vdmUoZSh0aGlzKSksZSh0aGlzKS5yZW1vdmVDbGFzcyhQK1wiIFwiK3UpLGUodGhpcykuYXR0cihcInN0eWxlXCIsZSh0aGlzKS5kYXRhKFwiZnAtc3R5bGVzXCIpKX0pLHh0KGxlKSxsZS5maW5kKHkrXCIsIFwiK0QrXCIsIFwiK0UpLmVhY2goZnVuY3Rpb24oKXtlKHRoaXMpLnJlcGxhY2VXaXRoKHRoaXMuY2hpbGROb2Rlcyl9KSxHLnNjcm9sbFRvcCgwKTt2YXIgbj1bZyx6LEJdO2UuZWFjaChuLGZ1bmN0aW9uKG4sdCl7ZShcIi5cIit0KS5yZW1vdmVDbGFzcyh0KX0pfSgpfSwkLmxhbmRzY2FwZVNjcm9sbD1VbiwkLnNoYXJlZD17YWZ0ZXJSZW5kZXJBY3Rpb25zOnNufSxhbihcImNvbnRpbnVvdXNIb3Jpem9udGFsXCIpLGFuKFwic2Nyb2xsSG9yaXpvbnRhbGx5XCIpLGFuKFwicmVzZXRTbGlkZXJzXCIpLGFuKFwiaW50ZXJsb2NrZWRTbGlkZXNcIiksYW4oXCJyZXNwb25zaXZlU2xpZGVzXCIpLGFuKFwiZmFkaW5nRWZmZWN0XCIpLGFuKFwiZHJhZ0FuZE1vdmVcIiksYW4oXCJvZmZzZXRTZWN0aW9uc1wiKSxhbihcInNjcm9sbE92ZXJmbG93UmVzZXRcIiksYW4oXCJwYXJhbGxheFwiKSx5dChcImRyYWdBbmRNb3ZlXCIpJiYkLmRyYWdBbmRNb3ZlLmluaXQoKSxmdW5jdGlvbigpe1YuY3NzMyYmKFYuY3NzMz1mdW5jdGlvbigpe3ZhciBlLG89dC5jcmVhdGVFbGVtZW50KFwicFwiKSxhPXt3ZWJraXRUcmFuc2Zvcm06XCItd2Via2l0LXRyYW5zZm9ybVwiLE9UcmFuc2Zvcm06XCItby10cmFuc2Zvcm1cIixtc1RyYW5zZm9ybTpcIi1tcy10cmFuc2Zvcm1cIixNb3pUcmFuc2Zvcm06XCItbW96LXRyYW5zZm9ybVwiLHRyYW5zZm9ybTpcInRyYW5zZm9ybVwifTtmb3IodmFyIHIgaW4gdC5ib2R5Lmluc2VydEJlZm9yZShvLG51bGwpLGEpby5zdHlsZVtyXSE9PWkmJihvLnN0eWxlW3JdPVwidHJhbnNsYXRlM2QoMXB4LDFweCwxcHgpXCIsZT1uLmdldENvbXB1dGVkU3R5bGUobykuZ2V0UHJvcGVydHlWYWx1ZShhW3JdKSk7cmV0dXJuIHQuYm9keS5yZW1vdmVDaGlsZChvKSxlIT09aSYmZS5sZW5ndGg+MCYmXCJub25lXCIhPT1lfSgpKTtWLnNjcm9sbEJhcj1WLnNjcm9sbEJhcnx8Vi5oeWJyaWQsbz1sZS5maW5kKFYuc2VjdGlvblNlbGVjdG9yKSxWLmFuY2hvcnMubGVuZ3RofHwoVi5hbmNob3JzPW8uZmlsdGVyKFwiW2RhdGEtYW5jaG9yXVwiKS5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gZSh0aGlzKS5kYXRhKFwiYW5jaG9yXCIpLnRvU3RyaW5nKCl9KS5nZXQoKSksVi5uYXZpZ2F0aW9uVG9vbHRpcHMubGVuZ3RofHwoVi5uYXZpZ2F0aW9uVG9vbHRpcHM9by5maWx0ZXIoXCJbZGF0YS10b29sdGlwXVwiKS5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gZSh0aGlzKS5kYXRhKFwidG9vbHRpcFwiKS50b1N0cmluZygpfSkuZ2V0KCkpLGxlLmNzcyh7aGVpZ2h0OlwiMTAwJVwiLHBvc2l0aW9uOlwicmVsYXRpdmVcIn0pLGxlLmFkZENsYXNzKGEpLGUoXCJodG1sXCIpLmFkZENsYXNzKGQpLHNlPUouaGVpZ2h0KCksbGUucmVtb3ZlQ2xhc3MoYyksbGUuZmluZChWLnNlY3Rpb25TZWxlY3RvcikuYWRkQ2xhc3MoZyksbGUuZmluZChWLnNsaWRlU2VsZWN0b3IpLmFkZENsYXNzKHopLEN0KFwicGFyYWxsYXhcIixcImluaXRcIiksZShtKS5lYWNoKGZ1bmN0aW9uKG4pe3ZhciB0LG8saSxhLGw9ZSh0aGlzKSxzPWwuZmluZChJKSxjPXMubGVuZ3RoO2wuZGF0YShcImZwLXN0eWxlc1wiLGwuYXR0cihcInN0eWxlXCIpKSxpPWwsKGE9bil8fDAhPT1lKFMpLmxlbmd0aHx8aS5hZGRDbGFzcyh1KSxvZT1lKFMpLGkuY3NzKFwiaGVpZ2h0XCIsbG4oaSkrXCJweFwiKSxWLnBhZGRpbmdUb3AmJmkuY3NzKFwicGFkZGluZy10b3BcIixWLnBhZGRpbmdUb3ApLFYucGFkZGluZ0JvdHRvbSYmaS5jc3MoXCJwYWRkaW5nLWJvdHRvbVwiLFYucGFkZGluZ0JvdHRvbSksdm9pZCAwIT09Vi5zZWN0aW9uc0NvbG9yW2FdJiZpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIixWLnNlY3Rpb25zQ29sb3JbYV0pLHZvaWQgMCE9PVYuYW5jaG9yc1thXSYmaS5hdHRyKFwiZGF0YS1hbmNob3JcIixWLmFuY2hvcnNbYV0pLHQ9bCxvPW4sdm9pZCAwIT09Vi5hbmNob3JzW29dJiZ0Lmhhc0NsYXNzKHUpJiZ0dChWLmFuY2hvcnNbb10sbyksVi5tZW51JiZWLmNzczMmJmUoVi5tZW51KS5jbG9zZXN0KHIpLmxlbmd0aCYmZShWLm1lbnUpLmFwcGVuZFRvKF8pLGM+MD9ybihsLHMsYyk6Vi52ZXJ0aWNhbENlbnRlcmVkJiZhdChsKX0pLFYuZml4ZWRFbGVtZW50cyYmVi5jc3MzJiZlKFYuZml4ZWRFbGVtZW50cykuYXBwZW5kVG8oXyksVi5uYXZpZ2F0aW9uJiZmdW5jdGlvbigpe18uYXBwZW5kKCc8ZGl2IGlkPVwiJytBKydcIj48dWw+PC91bD48L2Rpdj4nKTt2YXIgbj1lKE0pO24uYWRkQ2xhc3MoZnVuY3Rpb24oKXtyZXR1cm4gVi5zaG93QWN0aXZlVG9vbHRpcD9SK1wiIFwiK1YubmF2aWdhdGlvblBvc2l0aW9uOlYubmF2aWdhdGlvblBvc2l0aW9ufSk7Zm9yKHZhciB0PTA7dDxlKG0pLmxlbmd0aDt0Kyspe3ZhciBvPVwiXCI7Vi5hbmNob3JzLmxlbmd0aCYmKG89Vi5hbmNob3JzW3RdKTt2YXIgaT0nPGxpPjxhIGhyZWY9XCIjJytvKydcIj48c3Bhbj48L3NwYW4+PC9hPicsYT1WLm5hdmlnYXRpb25Ub29sdGlwc1t0XTt2b2lkIDAhPT1hJiZcIlwiIT09YSYmKGkrPSc8ZGl2IGNsYXNzPVwiJytrK1wiIFwiK1YubmF2aWdhdGlvblBvc2l0aW9uKydcIj4nK2ErXCI8L2Rpdj5cIiksaSs9XCI8L2xpPlwiLG4uZmluZChcInVsXCIpLmFwcGVuZChpKX1lKE0pLmNzcyhcIm1hcmdpbi10b3BcIixcIi1cIitlKE0pLmhlaWdodCgpLzIrXCJweFwiKSxlKE0pLmZpbmQoXCJsaVwiKS5lcShlKFMpLmluZGV4KG0pKS5maW5kKFwiYVwiKS5hZGRDbGFzcyh1KX0oKSxsZS5maW5kKCdpZnJhbWVbc3JjKj1cInlvdXR1YmUuY29tL2VtYmVkL1wiXScpLmVhY2goZnVuY3Rpb24oKXt2YXIgbix0LG87bj1lKHRoaXMpLHQ9XCJlbmFibGVqc2FwaT0xXCIsbz1uLmF0dHIoXCJzcmNcIiksbi5hdHRyKFwic3JjXCIsbysoL1xcPy8udGVzdChvKT9cIiZcIjpcIj9cIikrdCl9KSxWLmZhZGluZ0VmZmVjdCYmJC5mYWRpbmdFZmZlY3QmJiQuZmFkaW5nRWZmZWN0LmFwcGx5KCksVi5zY3JvbGxPdmVyZmxvdz9oZT1WLnNjcm9sbE92ZXJmbG93SGFuZGxlci5pbml0KFYpOnNuKCksVWUoITApLFplKFYuYXV0b1Njcm9sbGluZyxcImludGVybmFsXCIpLCRuKCksaHQoKSxcImNvbXBsZXRlXCI9PT10LnJlYWR5U3RhdGUmJkJuKCk7dmFyIG87Si5vbihcImxvYWRcIixCbil9KCksSi5vbihcInNjcm9sbFwiLGNuKS5vbihcImhhc2hjaGFuZ2VcIixEbikuYmx1cihObikucmVzaXplKF9uKSxLLmtleWRvd24oWW4pLmtleXVwKFduKS5vbihcImNsaWNrIHRvdWNoc3RhcnRcIixNK1wiIGFcIixqbikub24oXCJjbGljayB0b3VjaHN0YXJ0XCIsWCxxbikub24oXCJjbGlja1wiLE8sRm4pLGUobSkub24oXCJjbGljayB0b3VjaHN0YXJ0XCIsWixabiksVi5ub3JtYWxTY3JvbGxFbGVtZW50cyYmKEsub24oXCJtb3VzZWVudGVyIHRvdWNoc3RhcnRcIixWLm5vcm1hbFNjcm9sbEVsZW1lbnRzLGZ1bmN0aW9uKCl7VWUoITEpfSksSy5vbihcIm1vdXNlbGVhdmUgdG91Y2hlbmRcIixWLm5vcm1hbFNjcm9sbEVsZW1lbnRzLGZ1bmN0aW9uKCl7VWUoITApfSkpLHl0KFwiZHJhZ0FuZE1vdmVcIikmJiQuZHJhZ0FuZE1vdmUudHVybk9mZlRvdWNoKCkpO3ZhciBPZSxSZT0hMSx6ZT0wLEllPTAsTGU9MCxIZT0wLEVlPTA7T2U9bi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fG4ubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxuLndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZXx8bi5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSxuLnJlcXVlc3RBbmltYXRpb25GcmFtZT1PZTt2YXIgQmUsRGUsUGUsWWU9KG5ldyBEYXRlKS5nZXRUaW1lKCksRmU9ITEsV2U9MCxYZT0wLFZlPXNlfWZ1bmN0aW9uIFplKG4sdCl7bnx8U3QoMCksTXQoXCJhdXRvU2Nyb2xsaW5nXCIsbix0KTt2YXIgbz1lKFMpO1YuYXV0b1Njcm9sbGluZyYmIVYuc2Nyb2xsQmFyPyhHLmNzcyh7b3ZlcmZsb3c6XCJoaWRkZW5cIixoZWlnaHQ6XCIxMDAlXCJ9KSxOZShNZS5yZWNvcmRIaXN0b3J5LFwiaW50ZXJuYWxcIiksbGUuY3NzKHtcIi1tcy10b3VjaC1hY3Rpb25cIjpcIm5vbmVcIixcInRvdWNoLWFjdGlvblwiOlwibm9uZVwifSksby5sZW5ndGgmJlN0KG8ucG9zaXRpb24oKS50b3ApKTooRy5jc3Moe292ZXJmbG93OlwidmlzaWJsZVwiLGhlaWdodDpcImluaXRpYWxcIn0pLE5lKCExLFwiaW50ZXJuYWxcIiksbGUuY3NzKHtcIi1tcy10b3VjaC1hY3Rpb25cIjpcIlwiLFwidG91Y2gtYWN0aW9uXCI6XCJcIn0pLHh0KGxlKSxvLmxlbmd0aCYmRy5zY3JvbGxUb3Aoby5wb3NpdGlvbigpLnRvcCkpLGxlLnRyaWdnZXIoXCJzZXRBdXRvU2Nyb2xsaW5nXCIsW25dKX1mdW5jdGlvbiBOZShlLG4pe010KFwicmVjb3JkSGlzdG9yeVwiLGUsbil9ZnVuY3Rpb24gamUoZSxuKXtcImludGVybmFsXCIhPT1uJiZWLmZhZGluZ0VmZmVjdCYmJC5mYWRpbmdFZmZlY3QmJiQuZmFkaW5nRWZmZWN0LnVwZGF0ZShlKSxNdChcInNjcm9sbGluZ1NwZWVkXCIsZSxuKX1mdW5jdGlvbiBxZShlLG4pe010KFwiZml0VG9TZWN0aW9uXCIsZSxuKX1mdW5jdGlvbiBHZShlKXtlPyghZnVuY3Rpb24oKXt2YXIgZSxvPVwiXCI7bi5hZGRFdmVudExpc3RlbmVyP2U9XCJhZGRFdmVudExpc3RlbmVyXCI6KGU9XCJhdHRhY2hFdmVudFwiLG89XCJvblwiKTt2YXIgYT1cIm9ud2hlZWxcImluIHQuY3JlYXRlRWxlbWVudChcImRpdlwiKT9cIndoZWVsXCI6dC5vbm1vdXNld2hlZWwhPT1pP1wibW91c2V3aGVlbFwiOlwiRE9NTW91c2VTY3JvbGxcIjtcIkRPTU1vdXNlU2Nyb2xsXCI9PWE/dFtlXShvK1wiTW96TW91c2VQaXhlbFNjcm9sbFwiLFNuLCExKTp0W2VdKG8rYSxTbiwhMSl9KCksbGUub24oXCJtb3VzZWRvd25cIixYbikub24oXCJtb3VzZXVwXCIsVm4pKToodC5hZGRFdmVudExpc3RlbmVyPyh0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXdoZWVsXCIsU24sITEpLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsU24sITEpLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIk1vek1vdXNlUGl4ZWxTY3JvbGxcIixTbiwhMSkpOnQuZGV0YWNoRXZlbnQoXCJvbm1vdXNld2hlZWxcIixTbiksbGUub2ZmKFwibW91c2Vkb3duXCIsWG4pLm9mZihcIm1vdXNldXBcIixWbikpfWZ1bmN0aW9uIFVlKG4sdCl7dm9pZCAwIT09dD8odD10LnJlcGxhY2UoLyAvZyxcIlwiKS5zcGxpdChcIixcIiksZS5lYWNoKHQsZnVuY3Rpb24oZSx0KXtidChuLHQsXCJtXCIpfSkpOihidChuLFwiYWxsXCIsXCJtXCIpLG4/KEdlKCEwKSwoYWV8fHJlKSYmKFYuYXV0b1Njcm9sbGluZyYmXy5vZmYoQ2UudG91Y2htb3ZlKS5vbihDZS50b3VjaG1vdmUsdm4pLGUocikub2ZmKENlLnRvdWNoc3RhcnQpLm9uKENlLnRvdWNoc3RhcnQsZ24pLm9mZihDZS50b3VjaG1vdmUpLm9uKENlLnRvdWNobW92ZSxobikpKTooR2UoITEpLChhZXx8cmUpJiYoVi5hdXRvU2Nyb2xsaW5nJiZfLm9mZihDZS50b3VjaG1vdmUpLGUocikub2ZmKENlLnRvdWNoc3RhcnQpLm9mZihDZS50b3VjaG1vdmUpKSkpfWZ1bmN0aW9uIFFlKG4sdCl7dm9pZCAwIT09dD8odD10LnJlcGxhY2UoLyAvZyxcIlwiKS5zcGxpdChcIixcIiksZS5lYWNoKHQsZnVuY3Rpb24oZSx0KXtidChuLHQsXCJrXCIpfSkpOihidChuLFwiYWxsXCIsXCJrXCIpLFYua2V5Ym9hcmRTY3JvbGxpbmc9bil9ZnVuY3Rpb24gSmUoKXt2YXIgbj1lKFMpLnByZXYobSk7bi5sZW5ndGh8fCFWLmxvb3BUb3AmJiFWLmNvbnRpbnVvdXNWZXJ0aWNhbHx8KG49ZShtKS5sYXN0KCkpLG4ubGVuZ3RoJiZ5bihuLG51bGwsITApfWZ1bmN0aW9uIEtlKCl7dmFyIG49ZShTKS5uZXh0KG0pO24ubGVuZ3RofHwhVi5sb29wQm90dG9tJiYhVi5jb250aW51b3VzVmVydGljYWx8fChuPWUobSkuZmlyc3QoKSksbi5sZW5ndGgmJnluKG4sbnVsbCwhMSl9ZnVuY3Rpb24gX2UoZSxuKXtqZSgwLFwiaW50ZXJuYWxcIiksJGUoZSxuKSxqZShNZS5zY3JvbGxpbmdTcGVlZCxcImludGVybmFsXCIpfWZ1bmN0aW9uICRlKGUsbil7dmFyIHQ9c3QoZSk7dm9pZCAwIT09bj9jdChlLG4pOnQubGVuZ3RoPjAmJnluKHQpfWZ1bmN0aW9uIGVuKGUpe3duKFwicmlnaHRcIixlKX1mdW5jdGlvbiBubihlKXt3bihcImxlZnRcIixlKX1mdW5jdGlvbiB0bihuKXtpZighbGUuaGFzQ2xhc3MoYykpe2NlPSEwLHNlPUouaGVpZ2h0KCksZShtKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIG49ZSh0aGlzKS5maW5kKEUpLHQ9ZSh0aGlzKS5maW5kKEkpO1YudmVydGljYWxDZW50ZXJlZCYmZSh0aGlzKS5maW5kKHkpLmNzcyhcImhlaWdodFwiLHJ0KGUodGhpcykpK1wicHhcIiksZSh0aGlzKS5jc3MoXCJoZWlnaHRcIixsbihlKHRoaXMpKStcInB4XCIpLHQubGVuZ3RoPjEmJlVuKG4sbi5maW5kKEwpKX0pLFYuc2Nyb2xsT3ZlcmZsb3cmJmhlLmNyZWF0ZVNjcm9sbEJhckZvckFsbCgpO3ZhciB0PWUoUykuaW5kZXgobSk7dCYmIXl0KFwiZmFkaW5nRWZmZWN0XCIpJiZfZSh0KzEpLGNlPSExLGUuaXNGdW5jdGlvbihWLmFmdGVyUmVzaXplKSYmbiYmVi5hZnRlclJlc2l6ZS5jYWxsKGxlKSxlLmlzRnVuY3Rpb24oVi5hZnRlclJlQnVpbGQpJiYhbiYmVi5hZnRlclJlQnVpbGQuY2FsbChsZSksbGUudHJpZ2dlcihcImFmdGVyUmVidWlsZFwiKX19ZnVuY3Rpb24gb24obil7dmFyIHQ9Xy5oYXNDbGFzcyhsKTtuP3R8fChaZSghMSxcImludGVybmFsXCIpLHFlKCExLFwiaW50ZXJuYWxcIiksZShNKS5oaWRlKCksXy5hZGRDbGFzcyhsKSxlLmlzRnVuY3Rpb24oVi5hZnRlclJlc3BvbnNpdmUpJiZWLmFmdGVyUmVzcG9uc2l2ZS5jYWxsKGxlLG4pLFYucmVzcG9uc2l2ZVNsaWRlcyYmJC5yZXNwb25zaXZlU2xpZGVzJiYkLnJlc3BvbnNpdmVTbGlkZXMudG9TZWN0aW9ucygpLGxlLnRyaWdnZXIoXCJhZnRlclJlc3BvbnNpdmVcIixbbl0pKTp0JiYoWmUoTWUuYXV0b1Njcm9sbGluZyxcImludGVybmFsXCIpLHFlKE1lLmF1dG9TY3JvbGxpbmcsXCJpbnRlcm5hbFwiKSxlKE0pLnNob3coKSxfLnJlbW92ZUNsYXNzKGwpLGUuaXNGdW5jdGlvbihWLmFmdGVyUmVzcG9uc2l2ZSkmJlYuYWZ0ZXJSZXNwb25zaXZlLmNhbGwobGUsbiksVi5yZXNwb25zaXZlU2xpZGVzJiYkLnJlc3BvbnNpdmVTbGlkZXMmJiQucmVzcG9uc2l2ZVNsaWRlcy50b1NsaWRlcygpLGxlLnRyaWdnZXIoXCJhZnRlclJlc3BvbnNpdmVcIixbbl0pKX1mdW5jdGlvbiBhbihlKXt2YXIgdD1cImZwX1wiK2UrXCJFeHRlbnNpb25cIjtrZVtlXT1WW2UrXCJLZXlcIl0sJFtlXT12b2lkIDAhPT1uW3RdP25ldyBuW3RdOm51bGwsJFtlXSYmJFtlXS5jKGUpfWZ1bmN0aW9uIHJuKG4sdCxvKXt2YXIgaT0xMDAqbyxhPTEwMC9vO3Qud3JhcEFsbCgnPGRpdiBjbGFzcz1cIicrQisnXCIgLz4nKSx0LnBhcmVudCgpLndyYXAoJzxkaXYgY2xhc3M9XCInK0grJ1wiIC8+Jyksbi5maW5kKEQpLmNzcyhcIndpZHRoXCIsaStcIiVcIiksbz4xJiYoVi5jb250cm9sQXJyb3dzJiZmdW5jdGlvbihlKXtlLmZpbmQoRSkuYWZ0ZXIoJzxkaXYgY2xhc3M9XCInK2orJ1wiPjwvZGl2PjxkaXYgY2xhc3M9XCInK1UrJ1wiPjwvZGl2PicpLFwiI2ZmZlwiIT1WLmNvbnRyb2xBcnJvd0NvbG9yJiYoZS5maW5kKFEpLmNzcyhcImJvcmRlci1jb2xvclwiLFwidHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgXCIrVi5jb250cm9sQXJyb3dDb2xvciksZS5maW5kKHEpLmNzcyhcImJvcmRlci1jb2xvclwiLFwidHJhbnNwYXJlbnQgXCIrVi5jb250cm9sQXJyb3dDb2xvcitcIiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudFwiKSk7Vi5sb29wSG9yaXpvbnRhbHx8ZS5maW5kKHEpLmhpZGUoKX0obiksVi5zbGlkZXNOYXZpZ2F0aW9uJiZmdW5jdGlvbihlLG4pe2UuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiJytGKydcIj48dWw+PC91bD48L2Rpdj4nKTt2YXIgdD1lLmZpbmQoVyk7dC5hZGRDbGFzcyhWLnNsaWRlc05hdlBvc2l0aW9uKTtmb3IodmFyIG89MDtvPG47bysrKXQuZmluZChcInVsXCIpLmFwcGVuZCgnPGxpPjxhIGhyZWY9XCIjXCI+PHNwYW4+PC9zcGFuPjwvYT48L2xpPicpO3QuY3NzKFwibWFyZ2luLWxlZnRcIixcIi1cIit0LndpZHRoKCkvMitcInB4XCIpLHQuZmluZChcImxpXCIpLmZpcnN0KCkuZmluZChcImFcIikuYWRkQ2xhc3ModSl9KG4sbykpLHQuZWFjaChmdW5jdGlvbihuKXtlKHRoaXMpLmNzcyhcIndpZHRoXCIsYStcIiVcIiksVi52ZXJ0aWNhbENlbnRlcmVkJiZhdChlKHRoaXMpKX0pO3ZhciByPW4uZmluZChMKTtyLmxlbmd0aCYmKDAhPT1lKFMpLmluZGV4KG0pfHwwPT09ZShTKS5pbmRleChtKSYmMCE9PXIuaW5kZXgoKSk/KG10KHIsXCJpbnRlcm5hbFwiKSxyLmFkZENsYXNzKFkpKTp0LmVxKDApLmFkZENsYXNzKHUpfWZ1bmN0aW9uIGxuKGUpe3JldHVybiBWLm9mZnNldFNlY3Rpb25zJiYkLm9mZnNldFNlY3Rpb25zP28ucm91bmQoJC5vZmZzZXRTZWN0aW9ucy5nZXRXaW5kb3dIZWlnaHQoZSkpOnNlfWZ1bmN0aW9uIHNuKCl7dmFyIG4sdD1lKFMpO3QuYWRkQ2xhc3MoaCksQW4odCksTW4odCksVi5zY3JvbGxPdmVyZmxvdyYmVi5zY3JvbGxPdmVyZmxvd0hhbmRsZXIuYWZ0ZXJMb2FkKCksKCEobj1zdChQbigpLnNlY3Rpb24pKXx8bi5sZW5ndGgmJm4uaW5kZXgoKT09PW9lLmluZGV4KCkpJiZlLmlzRnVuY3Rpb24oVi5hZnRlckxvYWQpJiZWLmFmdGVyTG9hZC5jYWxsKHQsdC5kYXRhKFwiYW5jaG9yXCIpLHQuaW5kZXgobSkrMSksZS5pc0Z1bmN0aW9uKFYuYWZ0ZXJSZW5kZXIpJiZWLmFmdGVyUmVuZGVyLmNhbGwobGUpLGxlLnRyaWdnZXIoXCJhZnRlclJlbmRlclwiKX1mdW5jdGlvbiBjbigpe0ZlfHwocmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRuKSxGZT0hMCl9ZnVuY3Rpb24gZG4oKXt2YXIgbixpLGE7aWYobGUudHJpZ2dlcihcIm9uU2Nyb2xsXCIpLCghVi5hdXRvU2Nyb2xsaW5nfHxWLnNjcm9sbEJhcnx8eXQoXCJkcmFnQW5kTW92ZVwiKSkmJiFBdCgpKXt2YXIgcj15dChcImRyYWdBbmRNb3ZlXCIpP28uYWJzKCQuZHJhZ0FuZE1vdmUuZ2V0Q3VycmVudFNjcm9sbCgpKTpKLnNjcm9sbFRvcCgpLGw9KGE9KGk9cik+emU/XCJkb3duXCI6XCJ1cFwiLHplPWksV2U9aSwwKSxzPXIrSi5oZWlnaHQoKS8yLGM9KHl0KFwiZHJhZ0FuZE1vdmVcIik/JC5kcmFnQW5kTW92ZS5nZXREb2N1bWVudEhlaWdodCgpOl8uaGVpZ2h0KCktSi5oZWlnaHQoKSk9PT1yLGQ9dC5xdWVyeVNlbGVjdG9yQWxsKG0pO2lmKGMpbD1kLmxlbmd0aC0xO2Vsc2UgaWYocilmb3IodmFyIGY9MDtmPGQubGVuZ3RoOysrZil7ZFtmXS5vZmZzZXRUb3A8PXMmJihsPWYpfWVsc2UgbD0wO2lmKCEobj1lKGQpLmVxKGwpKS5oYXNDbGFzcyh1KSl7UmU9ITA7dmFyIHYsaCxwPWUoUyksZz1wLmluZGV4KG0pKzEsdz1vdChuKSxiPW4uZGF0YShcImFuY2hvclwiKSx4PW4uaW5kZXgobSkrMSx5PW4uZmluZChMKTt5Lmxlbmd0aCYmKGg9eS5kYXRhKFwiYW5jaG9yXCIpLHY9eS5pbmRleCgpKSxmZSYmKG4uYWRkQ2xhc3ModSkuc2libGluZ3MoKS5yZW1vdmVDbGFzcyh1KSxDdChcInBhcmFsbGF4XCIsXCJhZnRlckxvYWRcIiksZS5pc0Z1bmN0aW9uKFYub25MZWF2ZSkmJlYub25MZWF2ZS5jYWxsKHAsZyx4LHcpLGUuaXNGdW5jdGlvbihWLmFmdGVyTG9hZCkmJlYuYWZ0ZXJMb2FkLmNhbGwobixiLHgpLFYucmVzZXRTbGlkZXJzJiYkLnJlc2V0U2xpZGVycyYmJC5yZXNldFNsaWRlcnMuYXBwbHkoe2xvY2FsSXNSZXNpemluZzpjZSxsZWF2aW5nU2VjdGlvbjpnfSksT24ocCksQW4obiksTW4obiksdHQoYix4LTEpLFYuYW5jaG9ycy5sZW5ndGgmJihlZT1iKSxmdCh2LGgsYix4KSksY2xlYXJUaW1lb3V0KFNlKSxTZT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7UmU9ITF9LDEwMCl9Vi5maXRUb1NlY3Rpb24mJihjbGVhclRpbWVvdXQod2UpLHdlPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtWLmZpdFRvU2VjdGlvbiYmZShTKS5vdXRlckhlaWdodCgpPD1zZSYmZm4oKX0sVi5maXRUb1NlY3Rpb25EZWxheSkpfUZlPSExfWZ1bmN0aW9uIGZuKCl7ZmUmJihjZT0hMCx5bihlKFMpKSxjZT0hMSl9ZnVuY3Rpb24gdW4obil7aWYodmUubVtuXSl7dmFyIHQ9XCJkb3duXCI9PT1uP0tlOkplO2lmKCQuc2Nyb2xsSG9yaXpvbnRhbGx5JiYodD0kLnNjcm9sbEhvcml6b250YWxseS5nZXRTY3JvbGxTZWN0aW9uKG4sdCkpLFYuc2Nyb2xsT3ZlcmZsb3cpe3ZhciBvPVYuc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLnNjcm9sbGFibGUoZShTKSksaT1cImRvd25cIj09PW4/XCJib3R0b21cIjpcInRvcFwiO2lmKG8ubGVuZ3RoPjApe2lmKCFWLnNjcm9sbE92ZXJmbG93SGFuZGxlci5pc1Njcm9sbGVkKGksbykpcmV0dXJuITA7dCgpfWVsc2UgdCgpfWVsc2UgdCgpfX1mdW5jdGlvbiB2bihlKXt2YXIgbj1lLm9yaWdpbmFsRXZlbnQ7Vi5hdXRvU2Nyb2xsaW5nJiZwbihuKSYmZS5wcmV2ZW50RGVmYXVsdCgpfWZ1bmN0aW9uIGhuKG4pe3ZhciB0PW4ub3JpZ2luYWxFdmVudCxpPWUodC50YXJnZXQpLmNsb3Nlc3QobSk7aWYocG4odCkpe1YuYXV0b1Njcm9sbGluZyYmbi5wcmV2ZW50RGVmYXVsdCgpO3ZhciBhPWd0KHQpO0hlPWEueSxFZT1hLngsaS5maW5kKEUpLmxlbmd0aCYmby5hYnMoTGUtRWUpPm8uYWJzKEllLUhlKT8haWUmJm8uYWJzKExlLUVlKT5KLm91dGVyV2lkdGgoKS8xMDAqVi50b3VjaFNlbnNpdGl2aXR5JiYoTGU+RWU/dmUubS5yaWdodCYmZW4oaSk6dmUubS5sZWZ0JiZubihpKSk6Vi5hdXRvU2Nyb2xsaW5nJiZmZSYmby5hYnMoSWUtSGUpPkouaGVpZ2h0KCkvMTAwKlYudG91Y2hTZW5zaXRpdml0eSYmKEllPkhlP3VuKFwiZG93blwiKTpIZT5JZSYmdW4oXCJ1cFwiKSl9fWZ1bmN0aW9uIHBuKGUpe3JldHVybiB2b2lkIDA9PT1lLnBvaW50ZXJUeXBlfHxcIm1vdXNlXCIhPWUucG9pbnRlclR5cGV9ZnVuY3Rpb24gZ24oZSl7dmFyIG49ZS5vcmlnaW5hbEV2ZW50O2lmKFYuZml0VG9TZWN0aW9uJiZHLnN0b3AoKSxwbihuKSl7dmFyIHQ9Z3Qobik7SWU9dC55LExlPXQueH19ZnVuY3Rpb24gbW4oZSxuKXtmb3IodmFyIHQ9MCxpPWUuc2xpY2Uoby5tYXgoZS5sZW5ndGgtbiwxKSksYT0wO2E8aS5sZW5ndGg7YSsrKXQrPWlbYV07cmV0dXJuIG8uY2VpbCh0L24pfWZ1bmN0aW9uIFNuKHQpe3ZhciBpPShuZXcgRGF0ZSkuZ2V0VGltZSgpLGE9ZShwKS5oYXNDbGFzcyhUKTtpZihWLmF1dG9TY3JvbGxpbmcmJiF0ZSYmIWEpe3ZhciByPSh0PXR8fG4uZXZlbnQpLndoZWVsRGVsdGF8fC10LmRlbHRhWXx8LXQuZGV0YWlsLGw9by5tYXgoLTEsby5taW4oMSxyKSkscz12b2lkIDAhPT10LndoZWVsRGVsdGFYfHx2b2lkIDAhPT10LmRlbHRhWCxjPW8uYWJzKHQud2hlZWxEZWx0YVgpPG8uYWJzKHQud2hlZWxEZWx0YSl8fG8uYWJzKHQuZGVsdGFYKTxvLmFicyh0LmRlbHRhWSl8fCFzO3VlLmxlbmd0aD4xNDkmJnVlLnNoaWZ0KCksdWUucHVzaChvLmFicyhyKSksVi5zY3JvbGxCYXImJih0LnByZXZlbnREZWZhdWx0P3QucHJldmVudERlZmF1bHQoKTp0LnJldHVyblZhbHVlPSExKTt2YXIgZD1pLVllO2lmKFllPWksZD4yMDAmJih1ZT1bXSksZmUmJiFUdCgpKW1uKHVlLDEwKT49bW4odWUsNzApJiZjJiZ1bihsPDA/XCJkb3duXCI6XCJ1cFwiKTtyZXR1cm4hMX1WLmZpdFRvU2VjdGlvbiYmRy5zdG9wKCl9ZnVuY3Rpb24gd24obix0KXt2YXIgbz0odm9pZCAwPT09dD9lKFMpOnQpLmZpbmQoRSk7aWYoISghby5sZW5ndGh8fFR0KCl8fGllfHxvLmZpbmQoSSkubGVuZ3RoPDIpKXt2YXIgaT1vLmZpbmQoTCksYT1udWxsO2lmKCEoYT1cImxlZnRcIj09PW4/aS5wcmV2KEkpOmkubmV4dChJKSkubGVuZ3RoKXtpZighVi5sb29wSG9yaXpvbnRhbClyZXR1cm47YT1cImxlZnRcIj09PW4/aS5zaWJsaW5ncyhcIjpsYXN0XCIpOmkuc2libGluZ3MoXCI6Zmlyc3RcIil9aWU9ITAsVW4obyxhLG4pfX1mdW5jdGlvbiBibigpe2UoTCkuZWFjaChmdW5jdGlvbigpe210KGUodGhpcyksXCJpbnRlcm5hbFwiKX0pfWZ1bmN0aW9uIHhuKGUpe3ZhciBuPWUucG9zaXRpb24oKSx0PW4udG9wLG89eXQoXCJkcmFnQW5kTW92ZVwiKSYmJC5kcmFnQW5kTW92ZS5pc0dyYWJiaW5nPyQuZHJhZ0FuZE1vdmUuaXNTY3JvbGxpbmdEb3duKCk6bi50b3A+V2UsaT10LXNlK2Uub3V0ZXJIZWlnaHQoKSxhPVYuYmlnU2VjdGlvbnNEZXN0aW5hdGlvbjtyZXR1cm4gZS5vdXRlckhlaWdodCgpPnNlPyhvfHxhKSYmXCJib3R0b21cIiE9PWF8fCh0PWkpOihvfHxjZSYmZS5pcyhcIjpsYXN0LWNoaWxkXCIpKSYmKHQ9aSksVi5vZmZzZXRTZWN0aW9ucyYmJC5vZmZzZXRTZWN0aW9ucyYmKHQ9JC5vZmZzZXRTZWN0aW9ucy5nZXRTZWN0aW9uUG9zaXRpb24obyx0LGUpKSxXZT10LHR9ZnVuY3Rpb24geW4obix0LGkpe2lmKHZvaWQgMCE9PW4mJm4ubGVuZ3RoKXt2YXIgYSxsLHM9e2VsZW1lbnQ6bixjYWxsYmFjazp0LGlzTW92ZW1lbnRVcDppLGR0b3A6eG4obikseU1vdmVtZW50Om90KG4pLGFuY2hvckxpbms6bi5kYXRhKFwiYW5jaG9yXCIpLHNlY3Rpb25JbmRleDpuLmluZGV4KG0pLGFjdGl2ZVNsaWRlOm4uZmluZChMKSxhY3RpdmVTZWN0aW9uOmUoUyksbGVhdmluZ1NlY3Rpb246ZShTKS5pbmRleChtKSsxLGxvY2FsSXNSZXNpemluZzpjZX07aWYoIShzLmFjdGl2ZVNlY3Rpb24uaXMobikmJiFjZXx8Vi5zY3JvbGxCYXImJkouc2Nyb2xsVG9wKCk9PT1zLmR0b3AmJiFuLmhhc0NsYXNzKEMpKSl7aWYocy5hY3RpdmVTbGlkZS5sZW5ndGgmJihhPXMuYWN0aXZlU2xpZGUuZGF0YShcImFuY2hvclwiKSxsPXMuYWN0aXZlU2xpZGUuaW5kZXgoKSksZS5pc0Z1bmN0aW9uKFYub25MZWF2ZSkmJiFzLmxvY2FsSXNSZXNpemluZyl7dmFyIGM9cy55TW92ZW1lbnQ7aWYodm9pZCAwIT09aSYmKGM9aT9cInVwXCI6XCJkb3duXCIpLCExPT09Vi5vbkxlYXZlLmNhbGwocy5hY3RpdmVTZWN0aW9uLHMubGVhdmluZ1NlY3Rpb24scy5zZWN0aW9uSW5kZXgrMSxjKSlyZXR1cm59Q3QoXCJwYXJhbGxheFwiLFwiYXBwbHlcIixzKSxWLmF1dG9TY3JvbGxpbmcmJlYuY29udGludW91c1ZlcnRpY2FsJiZ2b2lkIDAhPT1zLmlzTW92ZW1lbnRVcCYmKCFzLmlzTW92ZW1lbnRVcCYmXCJ1cFwiPT1zLnlNb3ZlbWVudHx8cy5pc01vdmVtZW50VXAmJlwiZG93blwiPT1zLnlNb3ZlbWVudCkmJihzPWZ1bmN0aW9uKG4pe24uaXNNb3ZlbWVudFVwP24uYWN0aXZlU2VjdGlvbi5iZWZvcmUobi5hY3RpdmVTZWN0aW9uLm5leHRBbGwobSkpOm4uYWN0aXZlU2VjdGlvbi5hZnRlcihuLmFjdGl2ZVNlY3Rpb24ucHJldkFsbChtKS5nZXQoKS5yZXZlcnNlKCkpO3JldHVybiBTdChlKFMpLnBvc2l0aW9uKCkudG9wKSxibigpLG4ud3JhcEFyb3VuZEVsZW1lbnRzPW4uYWN0aXZlU2VjdGlvbixuLmR0b3A9bi5lbGVtZW50LnBvc2l0aW9uKCkudG9wLG4ueU1vdmVtZW50PW90KG4uZWxlbWVudCksbi5sZWF2aW5nU2VjdGlvbj1uLmFjdGl2ZVNlY3Rpb24uaW5kZXgobSkrMSxuLnNlY3Rpb25JbmRleD1uLmVsZW1lbnQuaW5kZXgobSksZShyKS50cmlnZ2VyKFwib25Db250aW51b3VzVmVydGljYWxcIixbbl0pLG59KHMpKSx5dChcInNjcm9sbE92ZXJmbG93UmVzZXRcIikmJiQuc2Nyb2xsT3ZlcmZsb3dSZXNldC5zZXRQcmV2aW91cyhzLmFjdGl2ZVNlY3Rpb24pLHMubG9jYWxJc1Jlc2l6aW5nfHxPbihzLmFjdGl2ZVNlY3Rpb24pLFYuc2Nyb2xsT3ZlcmZsb3cmJlYuc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLmJlZm9yZUxlYXZlKCksbi5hZGRDbGFzcyh1KS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKHUpLEFuKG4pLFYuc2Nyb2xsT3ZlcmZsb3cmJlYuc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLm9uTGVhdmUoKSxmZT0hMSxmdChsLGEscy5hbmNob3JMaW5rLHMuc2VjdGlvbkluZGV4KSxmdW5jdGlvbihuKXtpZihWLmNzczMmJlYuYXV0b1Njcm9sbGluZyYmIVYuc2Nyb2xsQmFyKXt2YXIgdD1cInRyYW5zbGF0ZTNkKDBweCwgLVwiK28ucm91bmQobi5kdG9wKStcInB4LCAwcHgpXCI7bHQodCwhMCksVi5zY3JvbGxpbmdTcGVlZD8oY2xlYXJUaW1lb3V0KGdlKSxnZT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Q24obil9LFYuc2Nyb2xsaW5nU3BlZWQpKTpDbihuKX1lbHNle3ZhciBpPWZ1bmN0aW9uKGUpe3ZhciBuPXt9O1YuYXV0b1Njcm9sbGluZyYmIVYuc2Nyb2xsQmFyPyhuLm9wdGlvbnM9e3RvcDotZS5kdG9wfSxuLmVsZW1lbnQ9cik6KG4ub3B0aW9ucz17c2Nyb2xsVG9wOmUuZHRvcH0sbi5lbGVtZW50PVwiaHRtbCwgYm9keVwiKTtyZXR1cm4gbn0obik7ZShpLmVsZW1lbnQpLmFuaW1hdGUoaS5vcHRpb25zLFYuc2Nyb2xsaW5nU3BlZWQsVi5lYXNpbmcpLnByb21pc2UoKS5kb25lKGZ1bmN0aW9uKCl7Vi5zY3JvbGxCYXI/c2V0VGltZW91dChmdW5jdGlvbigpe0NuKG4pfSwzMCk6Q24obil9KX19KHMpLGVlPXMuYW5jaG9yTGluayx0dChzLmFuY2hvckxpbmssZnVuY3Rpb24obil7aWYobi53cmFwQXJvdW5kRWxlbWVudHMmJm4ud3JhcEFyb3VuZEVsZW1lbnRzLmxlbmd0aClyZXR1cm4gbi5pc01vdmVtZW50VXA/ZShtKS5sZW5ndGgtMTowO3JldHVybiBuLnNlY3Rpb25JbmRleH0ocykpfX19ZnVuY3Rpb24gQ24obil7dmFyIHQ7KHQ9bikud3JhcEFyb3VuZEVsZW1lbnRzJiZ0LndyYXBBcm91bmRFbGVtZW50cy5sZW5ndGgmJih0LmlzTW92ZW1lbnRVcD9lKHcpLmJlZm9yZSh0LndyYXBBcm91bmRFbGVtZW50cyk6ZShiKS5hZnRlcih0LndyYXBBcm91bmRFbGVtZW50cyksU3QoZShTKS5wb3NpdGlvbigpLnRvcCksYm4oKSx0LnNlY3Rpb25JbmRleD10LmVsZW1lbnQuaW5kZXgobSksdC5sZWF2aW5nU2VjdGlvbj10LmFjdGl2ZVNlY3Rpb24uaW5kZXgobSkrMSksZS5pc0Z1bmN0aW9uKFYuYWZ0ZXJMb2FkKSYmIW4ubG9jYWxJc1Jlc2l6aW5nJiZWLmFmdGVyTG9hZC5jYWxsKG4uZWxlbWVudCxuLmFuY2hvckxpbmssbi5zZWN0aW9uSW5kZXgrMSksVi5zY3JvbGxPdmVyZmxvdyYmVi5zY3JvbGxPdmVyZmxvd0hhbmRsZXIuYWZ0ZXJMb2FkKCksQ3QoXCJwYXJhbGxheFwiLFwiYWZ0ZXJMb2FkXCIpLHl0KFwic2Nyb2xsT3ZlcmZsb3dSZXNldFwiKSYmJC5zY3JvbGxPdmVyZmxvd1Jlc2V0LnJlc2V0KCksVi5yZXNldFNsaWRlcnMmJiQucmVzZXRTbGlkZXJzJiYkLnJlc2V0U2xpZGVycy5hcHBseShuKSxuLmxvY2FsSXNSZXNpemluZ3x8TW4obi5lbGVtZW50KSxuLmVsZW1lbnQuYWRkQ2xhc3MoaCkuc2libGluZ3MoKS5yZW1vdmVDbGFzcyhoKSxmZT0hMCxlLmlzRnVuY3Rpb24obi5jYWxsYmFjaykmJm4uY2FsbGJhY2suY2FsbCh0aGlzKX1mdW5jdGlvbiBUbihlLG4pe2UuYXR0cihuLGUuZGF0YShuKSkucmVtb3ZlQXR0cihcImRhdGEtXCIrbil9ZnVuY3Rpb24gQW4obil7dmFyIHQ7Vi5sYXp5TG9hZGluZyYmUm4obikuZmluZChcImltZ1tkYXRhLXNyY10sIGltZ1tkYXRhLXNyY3NldF0sIHNvdXJjZVtkYXRhLXNyY10sIHNvdXJjZVtkYXRhLXNyY3NldF0sIHZpZGVvW2RhdGEtc3JjXSwgYXVkaW9bZGF0YS1zcmNdLCBpZnJhbWVbZGF0YS1zcmNdXCIpLmVhY2goZnVuY3Rpb24oKXtpZih0PWUodGhpcyksZS5lYWNoKFtcInNyY1wiLFwic3Jjc2V0XCJdLGZ1bmN0aW9uKGUsbil7dmFyIG89dC5hdHRyKFwiZGF0YS1cIituKTt2b2lkIDAhPT1vJiZvJiZUbih0LG4pfSksdC5pcyhcInNvdXJjZVwiKSl7dmFyIG49dC5jbG9zZXN0KFwidmlkZW9cIikubGVuZ3RoP1widmlkZW9cIjpcImF1ZGlvXCI7dC5jbG9zZXN0KG4pLmdldCgwKS5sb2FkKCl9fSl9ZnVuY3Rpb24gTW4obil7dmFyIHQ9Um4obik7dC5maW5kKFwidmlkZW8sIGF1ZGlvXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgbj1lKHRoaXMpLmdldCgwKTtuLmhhc0F0dHJpYnV0ZShcImRhdGEtYXV0b3BsYXlcIikmJlwiZnVuY3Rpb25cIj09dHlwZW9mIG4ucGxheSYmbi5wbGF5KCl9KSx0LmZpbmQoJ2lmcmFtZVtzcmMqPVwieW91dHViZS5jb20vZW1iZWQvXCJdJykuZWFjaChmdW5jdGlvbigpe3ZhciBuPWUodGhpcykuZ2V0KDApO24uaGFzQXR0cmlidXRlKFwiZGF0YS1hdXRvcGxheVwiKSYma24obiksbi5vbmxvYWQ9ZnVuY3Rpb24oKXtuLmhhc0F0dHJpYnV0ZShcImRhdGEtYXV0b3BsYXlcIikmJmtuKG4pfX0pfWZ1bmN0aW9uIGtuKGUpe2UuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZSgne1wiZXZlbnRcIjpcImNvbW1hbmRcIixcImZ1bmNcIjpcInBsYXlWaWRlb1wiLFwiYXJnc1wiOlwiXCJ9JyxcIipcIil9ZnVuY3Rpb24gT24obil7dmFyIHQ9Um4obik7dC5maW5kKFwidmlkZW8sIGF1ZGlvXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgbj1lKHRoaXMpLmdldCgwKTtuLmhhc0F0dHJpYnV0ZShcImRhdGEta2VlcHBsYXlpbmdcIil8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4ucGF1c2V8fG4ucGF1c2UoKX0pLHQuZmluZCgnaWZyYW1lW3NyYyo9XCJ5b3V0dWJlLmNvbS9lbWJlZC9cIl0nKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIG49ZSh0aGlzKS5nZXQoMCk7L3lvdXR1YmVcXC5jb21cXC9lbWJlZFxcLy8udGVzdChlKHRoaXMpLmF0dHIoXCJzcmNcIikpJiYhbi5oYXNBdHRyaWJ1dGUoXCJkYXRhLWtlZXBwbGF5aW5nXCIpJiZlKHRoaXMpLmdldCgwKS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKCd7XCJldmVudFwiOlwiY29tbWFuZFwiLFwiZnVuY1wiOlwicGF1c2VWaWRlb1wiLFwiYXJnc1wiOlwiXCJ9JyxcIipcIil9KX1mdW5jdGlvbiBSbihuKXt2YXIgdD1uLmZpbmQoTCk7cmV0dXJuIHQubGVuZ3RoJiYobj1lKHQpKSxufWZ1bmN0aW9uIHpuKGUpe3ZhciBuPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtmdW5jdGlvbiB0KGUpe3ZhciB0LG8saSxhLHIsbCxzPVwiXCIsYz0wO2ZvcihlPWUucmVwbGFjZSgvW15BLVphLXowLTkrLz1dL2csXCJcIik7YzxlLmxlbmd0aDspdD1uLmluZGV4T2YoZS5jaGFyQXQoYysrKSk8PDJ8KGE9bi5pbmRleE9mKGUuY2hhckF0KGMrKykpKT4+NCxvPSgxNSZhKTw8NHwocj1uLmluZGV4T2YoZS5jaGFyQXQoYysrKSkpPj4yLGk9KDMmcik8PDZ8KGw9bi5pbmRleE9mKGUuY2hhckF0KGMrKykpKSxzKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHQpLDY0IT1yJiYocys9U3RyaW5nLmZyb21DaGFyQ29kZShvKSksNjQhPWwmJihzKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGkpKTtyZXR1cm4gcz1mdW5jdGlvbihlKXt2YXIgbix0PVwiXCIsbz0wLGk9MCxhPTA7Zm9yKDtvPGUubGVuZ3RoOykoaT1lLmNoYXJDb2RlQXQobykpPDEyOD8odCs9U3RyaW5nLmZyb21DaGFyQ29kZShpKSxvKyspOmk+MTkxJiZpPDIyND8oYT1lLmNoYXJDb2RlQXQobysxKSx0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKCgzMSZpKTw8Nnw2MyZhKSxvKz0yKTooYT1lLmNoYXJDb2RlQXQobysxKSxuPWUuY2hhckNvZGVBdChvKzIpLHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoKDE1JmkpPDwxMnwoNjMmYSk8PDZ8NjMmbiksbys9Myk7cmV0dXJuIHR9KHMpfWZ1bmN0aW9uIG8oZSl7cmV0dXJuIGUuc2xpY2UoMykuc2xpY2UoMCwtMyl9cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciBuPWUuc3BsaXQoXCJfXCIpO2lmKG4ubGVuZ3RoPjEpe3ZhciBpPW5bMV07cmV0dXJuIGUucmVwbGFjZShvKG5bMV0pLFwiXCIpLnNwbGl0KFwiX1wiKVswXStcIl9cIit0KGkuc2xpY2UoMykuc2xpY2UoMCwtMykpfXJldHVybiBvKGUpfSh0KGUpKX1mdW5jdGlvbiBJbihlKXt2YXIgbj1mdW5jdGlvbigpe2lmKHQuZG9tYWluLmxlbmd0aCl7Zm9yKHZhciBlPXQuZG9tYWluLnJlcGxhY2UoL14od3d3XFwuKS8sXCJcIikuc3BsaXQoXCIuXCIpO2UubGVuZ3RoPjI7KWUuc2hpZnQoKTtyZXR1cm4gZS5qb2luKFwiLlwiKS5yZXBsYWNlKC8oXlxcLiopfChcXC4qJCkvZyxcIlwiKX1yZXR1cm5cIlwifSgpLG89W1wiTVRNMGJHOWpZV3hvYjNOME1qTTBcIixcIk1UTTBNQzR4TWpNMFwiLFwiTVRNMGFuTm9aV3hzTG01bGRESXpOQT09XCIsXCJVRGREUVU1Wk5sTk5cIl0saT16bihvWzBdKSxhPXpuKG9bMV0pLHI9em4ob1syXSksbD16bihvWzNdKSxzPVtpLGEscl0uaW5kZXhPZihuKTwwJiYwIT09bi5sZW5ndGgsYz12b2lkIDAhPT1rZVtlXSYma2VbZV0ubGVuZ3RoO2lmKCFjJiZzKXJldHVybiExO3ZhciBkPWM/em4oa2VbZV0pOlwiXCIsZj0oZD1kLnNwbGl0KFwiX1wiKSkubGVuZ3RoPjEmJmRbMV0uaW5kZXhPZihlLGRbMV0ubGVuZ3RoLWUubGVuZ3RoKT4tMTtyZXR1cm4hKGRbMF0uaW5kZXhPZihuLGRbMF0ubGVuZ3RoLW4ubGVuZ3RoKTwwJiZzJiZsIT1kWzBdKSYmZnx8IXN9ZnVuY3Rpb24gTG4obil7QmU9em4oXCJNVEl6UEdScGRqNDhZU0JvY21WbVBTSm9kSFJ3T2k4dllXeDJZWEp2ZEhKcFoyOHVZMjl0TDJaMWJHeFFZV2RsTDJWNGRHVnVjMmx2Ym5NdklpQnpkSGxzWlQwaVkyOXNiM0k2SUNObVptWWdJV2x0Y0c5eWRHRnVkRHNnZEdWNGRDMWtaV052Y21GMGFXOXVPbTV2Ym1VZ0lXbHRjRzl5ZEdGdWREc2lQbFZ1YkdsalpXNXpaV1FnWm5Wc2JGQmhaMlV1YW5NZ1JYaDBaVzV6YVc5dVBDOWhQand2WkdsMlBqRXlNdz09XCIpLERlPWUoXCI8ZGl2Lz5cIikuaHRtbChCZSkuY29udGVudHMoKSx5dChuKSYmJFtuXSYmKEluKG4pfHwoSG4oKSxzZXRJbnRlcnZhbChIbiwyZTMpKSl9ZnVuY3Rpb24gSG4oKXtUZXx8KG8ucmFuZG9tKCk8LjU/Xy5wcmVwZW5kKERlKTpfLmFwcGVuZChEZSksVGU9ITAsRGUuYmluZChcImRlc3Ryb3llZFwiLGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KFBlKSxQZT1zZXRUaW1lb3V0KEVuLDkwMCl9KSksZShEZSkuYXR0cihcInN0eWxlXCIsem4oXCJNVEl6ZWkxcGJtUmxlRG81T1RrNU9UazVPM0J2YzJsMGFXOXVPbVpwZUdWa08zUnZjRG95TUhCNE8ySnZkSFJ2YlRwaGRYUnZPMnhsWm5RNk1qQndlRHR5YVdkb2REcGhkWFJ2TzJKaFkydG5jbTkxYm1RNmNtVmtPM0JoWkdScGJtYzZOM0I0SURFMWNIZzdabTl1ZEMxemFYcGxPakUwY0hnN1ptOXVkQzFtWVcxcGJIazZZWEpwWVd3N1kyOXNiM0k2STJabVpqdGthWE53YkdGNU9tbHViR2x1WlMxaWJHOWphenQwY21GdWMyWnZjbTA2ZEhKaGJuTnNZWFJsTTJRb01Dd3dMREFwTzI5d1lXTnBkSGs2TVR0b1pXbG5hSFE2WVhWMGJ6dDNhV1IwYURwaGRYUnZPM3B2YjIwNk1UdHRZWEpuYVc0NllYVjBienRpYjNKa1pYSTZibTl1WlR0MmFYTnBZbWxzYVhSNU9uWnBjMmxpYkdVN1kyeHBjQzF3WVhSb09tNXZibVU3TVRJelwiKS5yZXBsYWNlKC87L2csem4oXCJNVEl6SUNGcGJYQnZjblJoYm5RN016UTFcIikpKX1mdW5jdGlvbiBFbigpe1RlPSExfWZ1bmN0aW9uIEJuKCl7dmFyIGU9UG4oKSxuPWUuc2VjdGlvbix0PWUuc2xpZGU7biYmKFYuYW5pbWF0ZUFuY2hvcj9jdChuLHQpOl9lKG4sdCkpfWZ1bmN0aW9uIERuKCl7aWYoIVJlJiYhVi5sb2NrQW5jaG9ycyl7dmFyIGU9UG4oKSxuPWUuc2VjdGlvbix0PWUuc2xpZGUsbz12b2lkIDA9PT1lZSxpPXZvaWQgMD09PWVlJiZ2b2lkIDA9PT10JiYhaWU7biYmbi5sZW5ndGgmJihuJiZuIT09ZWUmJiFvfHxpfHwhaWUmJm5lIT10KSYmY3Qobix0KX19ZnVuY3Rpb24gUG4oKXt2YXIgZSx0LG89bi5sb2NhdGlvbi5oYXNoO2lmKG8ubGVuZ3RoKXt2YXIgaT1vLnJlcGxhY2UoXCIjXCIsXCJcIikuc3BsaXQoXCIvXCIpLGE9by5pbmRleE9mKFwiIy9cIik+LTE7ZT1hP1wiL1wiK2lbMV06ZGVjb2RlVVJJQ29tcG9uZW50KGlbMF0pO3ZhciByPWE/aVsyXTppWzFdO3ImJnIubGVuZ3RoJiYodD1kZWNvZGVVUklDb21wb25lbnQocikpfXJldHVybntzZWN0aW9uOmUsc2xpZGU6dH19ZnVuY3Rpb24gWW4obil7Y2xlYXJUaW1lb3V0KGJlKTt2YXIgdD1lKFwiOmZvY3VzXCIpLG89bi53aGljaDtpZig5PT09bykhZnVuY3Rpb24obil7dmFyIHQ9bi5zaGlmdEtleSxvPWUoXCI6Zm9jdXNcIiksaT1lKFMpLGE9aS5maW5kKEwpLHI9KGEubGVuZ3RoP2E6aSkuZmluZChBZSkubm90KCdbdGFiaW5kZXg9XCItMVwiXScpO2Z1bmN0aW9uIGwoZSl7cmV0dXJuIGUucHJldmVudERlZmF1bHQoKSxyLmZpcnN0KCkuZm9jdXMoKX1vLmxlbmd0aD9vLmNsb3Nlc3QoUyxMKS5sZW5ndGh8fChvPWwobikpOmwobik7KCF0JiZvLmlzKHIubGFzdCgpKXx8dCYmby5pcyhyLmZpcnN0KCkpKSYmbi5wcmV2ZW50RGVmYXVsdCgpfShuKTtlbHNlIGlmKCF0LmlzKFwidGV4dGFyZWFcIikmJiF0LmlzKFwiaW5wdXRcIikmJiF0LmlzKFwic2VsZWN0XCIpJiZcInRydWVcIiE9PXQuYXR0cihcImNvbnRlbnRFZGl0YWJsZVwiKSYmXCJcIiE9PXQuYXR0cihcImNvbnRlbnRFZGl0YWJsZVwiKSYmVi5rZXlib2FyZFNjcm9sbGluZyYmVi5hdXRvU2Nyb2xsaW5nKXtlLmluQXJyYXkobyxbNDAsMzgsMzIsMzMsMzRdKT4tMSYmbi5wcmV2ZW50RGVmYXVsdCgpLHRlPW4uY3RybEtleSxiZT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7IWZ1bmN0aW9uKG4pe3ZhciB0PW4uc2hpZnRLZXk7aWYoIWZlJiZbMzcsMzldLmluZGV4T2Yobi53aGljaCk8MClyZXR1cm47c3dpdGNoKG4ud2hpY2gpe2Nhc2UgMzg6Y2FzZSAzMzp2ZS5rLnVwJiZKZSgpO2JyZWFrO2Nhc2UgMzI6aWYodCYmdmUuay51cCl7SmUoKTticmVha31jYXNlIDQwOmNhc2UgMzQ6dmUuay5kb3duJiZLZSgpO2JyZWFrO2Nhc2UgMzY6dmUuay51cCYmJGUoMSk7YnJlYWs7Y2FzZSAzNTp2ZS5rLmRvd24mJiRlKGUobSkubGVuZ3RoKTticmVhaztjYXNlIDM3OnZlLmsubGVmdCYmbm4oKTticmVhaztjYXNlIDM5OnZlLmsucmlnaHQmJmVuKCk7YnJlYWs7ZGVmYXVsdDo7fX0obil9LDE1MCl9fWZ1bmN0aW9uIEZuKCl7ZSh0aGlzKS5wcmV2KCkudHJpZ2dlcihcImNsaWNrXCIpfWZ1bmN0aW9uIFduKGUpe2RlJiYodGU9ZS5jdHJsS2V5KX1mdW5jdGlvbiBYbihlKXsyPT1lLndoaWNoJiYoWGU9ZS5wYWdlWSxsZS5vbihcIm1vdXNlbW92ZVwiLEduKSl9ZnVuY3Rpb24gVm4oZSl7Mj09ZS53aGljaCYmbGUub2ZmKFwibW91c2Vtb3ZlXCIpfWZ1bmN0aW9uIFpuKCl7dmFyIG49ZSh0aGlzKS5jbG9zZXN0KG0pO2UodGhpcykuaGFzQ2xhc3MoTik/dmUubS5sZWZ0JiZubihuKTp2ZS5tLnJpZ2h0JiZlbihuKX1mdW5jdGlvbiBObigpe2RlPSExLHRlPSExfWZ1bmN0aW9uIGpuKG4pe24ucHJldmVudERlZmF1bHQoKTt2YXIgdD1lKHRoaXMpLnBhcmVudCgpLmluZGV4KCk7eW4oZShtKS5lcSh0KSl9ZnVuY3Rpb24gcW4obil7bi5wcmV2ZW50RGVmYXVsdCgpO3ZhciB0PWUodGhpcykuY2xvc2VzdChtKS5maW5kKEUpO1VuKHQsdC5maW5kKEkpLmVxKGUodGhpcykuY2xvc2VzdChcImxpXCIpLmluZGV4KCkpKX1mdW5jdGlvbiBHbihlKXtmZSYmKGUucGFnZVk8WGUmJnZlLm0udXA/SmUoKTplLnBhZ2VZPlhlJiZ2ZS5tLmRvd24mJktlKCkpLFhlPWUucGFnZVl9ZnVuY3Rpb24gVW4obix0LG8pe3ZhciBpPW4uY2xvc2VzdChtKSxhPXtzbGlkZXM6bixkZXN0aW55OnQsZGlyZWN0aW9uOm8sZGVzdGlueVBvczp0LnBvc2l0aW9uKCksc2xpZGVJbmRleDp0LmluZGV4KCksc2VjdGlvbjppLHNlY3Rpb25JbmRleDppLmluZGV4KG0pLGFuY2hvckxpbms6aS5kYXRhKFwiYW5jaG9yXCIpLHNsaWRlc05hdjppLmZpbmQoVyksc2xpZGVBbmNob3I6dnQodCkscHJldlNsaWRlOmkuZmluZChMKSxwcmV2U2xpZGVJbmRleDppLmZpbmQoTCkuaW5kZXgoKSxsb2NhbElzUmVzaXppbmc6Y2V9O2EueE1vdmVtZW50PWl0KGEucHJldlNsaWRlSW5kZXgsYS5zbGlkZUluZGV4KSxhLmxvY2FsSXNSZXNpemluZ3x8KGZlPSExKSxDdChcInBhcmFsbGF4XCIsXCJhcHBseUhvcml6b250YWxcIixhKSxWLm9uU2xpZGVMZWF2ZSYmIWEubG9jYWxJc1Jlc2l6aW5nJiZcIm5vbmVcIiE9PWEueE1vdmVtZW50JiZlLmlzRnVuY3Rpb24oVi5vblNsaWRlTGVhdmUpJiYhMT09PVYub25TbGlkZUxlYXZlLmNhbGwoYS5wcmV2U2xpZGUsYS5hbmNob3JMaW5rLGEuc2VjdGlvbkluZGV4KzEsYS5wcmV2U2xpZGVJbmRleCxhLmRpcmVjdGlvbixhLnNsaWRlSW5kZXgpP2llPSExOih0LmFkZENsYXNzKHUpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3ModSksYS5sb2NhbElzUmVzaXppbmd8fChPbihhLnByZXZTbGlkZSksQW4odCkpLFFuKGEpLGkuaGFzQ2xhc3ModSkmJiFhLmxvY2FsSXNSZXNpemluZyYmZnQoYS5zbGlkZUluZGV4LGEuc2xpZGVBbmNob3IsYS5hbmNob3JMaW5rLGEuc2VjdGlvbkluZGV4KSwkLmNvbnRpbnVvdXNIb3Jpem9udGFsJiYkLmNvbnRpbnVvdXNIb3Jpem9udGFsLmFwcGx5KGEpLEF0KCk/Sm4oYSk6S24obixhLCEwKSxWLmludGVybG9ja2VkU2xpZGVzJiYkLmludGVybG9ja2VkU2xpZGVzJiYoeXQoXCJjb250aW51b3VzSG9yaXpvbnRhbFwiKSYmdm9pZCAwIT09byYmbyE9PWEueE1vdmVtZW50fHwkLmludGVybG9ja2VkU2xpZGVzLmFwcGx5KGEpKSl9ZnVuY3Rpb24gUW4oZSl7IVYubG9vcEhvcml6b250YWwmJlYuY29udHJvbEFycm93cyYmKGUuc2VjdGlvbi5maW5kKHEpLnRvZ2dsZSgwIT09ZS5zbGlkZUluZGV4KSxlLnNlY3Rpb24uZmluZChRKS50b2dnbGUoIWUuZGVzdGlueS5pcyhcIjpsYXN0LWNoaWxkXCIpKSl9ZnVuY3Rpb24gSm4obil7dmFyIHQsbzskLmNvbnRpbnVvdXNIb3Jpem9udGFsJiYkLmNvbnRpbnVvdXNIb3Jpem9udGFsLmFmdGVyU2xpZGVMb2FkcyhuKSx0PW4uc2xpZGVzTmF2LG89bi5zbGlkZUluZGV4LHQuZmluZCh2KS5yZW1vdmVDbGFzcyh1KSx0LmZpbmQoXCJsaVwiKS5lcShvKS5maW5kKFwiYVwiKS5hZGRDbGFzcyh1KSxuLmxvY2FsSXNSZXNpemluZ3x8KEN0KFwicGFyYWxsYXhcIixcImFmdGVyU2xpZGVMb2Fkc1wiKSxlLmlzRnVuY3Rpb24oVi5hZnRlclNsaWRlTG9hZCkmJlYuYWZ0ZXJTbGlkZUxvYWQuY2FsbChuLmRlc3Rpbnksbi5hbmNob3JMaW5rLG4uc2VjdGlvbkluZGV4KzEsbi5zbGlkZUFuY2hvcixuLnNsaWRlSW5kZXgpLGZlPSEwLE1uKG4uZGVzdGlueSkpLGllPSExLHl0KFwiaW50ZXJsb2NrZWRTbGlkZXNcIikmJiQuaW50ZXJsb2NrZWRTbGlkZXMuYXBwbHkobil9ZnVuY3Rpb24gS24oZSxuLHQpe3ZhciBpPW4uZGVzdGlueVBvcztpZihWLmNzczMpe3ZhciBhPVwidHJhbnNsYXRlM2QoLVwiK28ucm91bmQoaS5sZWZ0KStcInB4LCAwcHgsIDBweClcIjtldChlLmZpbmQoRCkpLmNzcyh3dChhKSksbWU9c2V0VGltZW91dChmdW5jdGlvbigpe3QmJkpuKG4pfSxWLnNjcm9sbGluZ1NwZWVkLFYuZWFzaW5nKX1lbHNlIGUuYW5pbWF0ZSh7c2Nyb2xsTGVmdDpvLnJvdW5kKGkubGVmdCl9LFYuc2Nyb2xsaW5nU3BlZWQsVi5lYXNpbmcsZnVuY3Rpb24oKXt0JiZKbihuKX0pfWZ1bmN0aW9uIF9uKCl7aWYobGUudHJpZ2dlcihcIm9uUmVzaXplXCIpLCRuKCksYWUpe3ZhciBuPWUodC5hY3RpdmVFbGVtZW50KTtpZighbi5pcyhcInRleHRhcmVhXCIpJiYhbi5pcyhcImlucHV0XCIpJiYhbi5pcyhcInNlbGVjdFwiKSl7dmFyIGk9Si5oZWlnaHQoKTtvLmFicyhpLVZlKT4yMCpvLm1heChWZSxpKS8xMDAmJih0bighMCksVmU9aSl9fWVsc2UgY2xlYXJUaW1lb3V0KHBlKSxwZT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dG4oITApfSwzNTApfWZ1bmN0aW9uICRuKCl7dmFyIGU9Vi5yZXNwb25zaXZlfHxWLnJlc3BvbnNpdmVXaWR0aCxuPVYucmVzcG9uc2l2ZUhlaWdodCx0PWUmJkoub3V0ZXJXaWR0aCgpPGUsbz1uJiZKLmhlaWdodCgpPG47ZSYmbj9vbih0fHxvKTplP29uKHQpOm4mJm9uKG8pfWZ1bmN0aW9uIGV0KGUpe3ZhciBuPVwiYWxsIFwiK1Yuc2Nyb2xsaW5nU3BlZWQrXCJtcyBcIitWLmVhc2luZ2NzczM7cmV0dXJuIGUucmVtb3ZlQ2xhc3MocyksZS5jc3Moe1wiLXdlYmtpdC10cmFuc2l0aW9uXCI6bix0cmFuc2l0aW9uOm59KX1mdW5jdGlvbiBudChlKXtyZXR1cm4gZS5hZGRDbGFzcyhzKX1mdW5jdGlvbiB0dChuLHQpe3ZhciBvLGksYTtvPW4sVi5tZW51JiYoZShWLm1lbnUpLmZpbmQodikucmVtb3ZlQ2xhc3ModSksZShWLm1lbnUpLmZpbmQoJ1tkYXRhLW1lbnVhbmNob3I9XCInK28rJ1wiXScpLmFkZENsYXNzKHUpKSxpPW4sYT10LFYubmF2aWdhdGlvbiYmKGUoTSkuZmluZCh2KS5yZW1vdmVDbGFzcyh1KSxpP2UoTSkuZmluZCgnYVtocmVmPVwiIycraSsnXCJdJykuYWRkQ2xhc3ModSk6ZShNKS5maW5kKFwibGlcIikuZXEoYSkuZmluZChcImFcIikuYWRkQ2xhc3ModSkpfWZ1bmN0aW9uIG90KG4pe3ZhciB0PWUoUykuaW5kZXgobSksbz1uLmluZGV4KG0pO3JldHVybiB0PT1vP1wibm9uZVwiOnQ+bz9cInVwXCI6XCJkb3duXCJ9ZnVuY3Rpb24gaXQoZSxuKXtyZXR1cm4gZT09bj9cIm5vbmVcIjplPm4/XCJsZWZ0XCI6XCJyaWdodFwifWZ1bmN0aW9uIGF0KG4pe2lmKCFuLmhhc0NsYXNzKFApKXt2YXIgdD1lKCc8ZGl2IGNsYXNzPVwiJyt4KydcIiAvPicpLmhlaWdodChydChuKSk7bi5hZGRDbGFzcyhQKS53cmFwSW5uZXIodCl9fWZ1bmN0aW9uIHJ0KGUpe3ZhciBuPWxuKGUpO2lmKFYucGFkZGluZ1RvcHx8Vi5wYWRkaW5nQm90dG9tKXt2YXIgdD1lO3QuaGFzQ2xhc3MoZyl8fCh0PWUuY2xvc2VzdChtKSksbi09cGFyc2VJbnQodC5jc3MoXCJwYWRkaW5nLXRvcFwiKSkrcGFyc2VJbnQodC5jc3MoXCJwYWRkaW5nLWJvdHRvbVwiKSl9cmV0dXJuIG59ZnVuY3Rpb24gbHQoZSxuKXtuP2V0KGxlKTpudChsZSksY2xlYXJUaW1lb3V0KHhlKSxsZS5jc3Mod3QoZSkpLHhlPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtsZS5yZW1vdmVDbGFzcyhzKX0sMTApfWZ1bmN0aW9uIHN0KG4pe3ZhciB0PWxlLmZpbmQobSsnW2RhdGEtYW5jaG9yPVwiJytuKydcIl0nKTtpZighdC5sZW5ndGgpe3ZhciBvPXZvaWQgMCE9PW4/bi0xOjA7dD1lKG0pLmVxKG8pfXJldHVybiB0fWZ1bmN0aW9uIGN0KGUsbil7dmFyIHQ9c3QoZSk7aWYodC5sZW5ndGgpe3ZhciBvLGksYSxyPShvPW4sKGE9KGk9dCkuZmluZChJKydbZGF0YS1hbmNob3I9XCInK28rJ1wiXScpKS5sZW5ndGh8fChvPXZvaWQgMCE9PW8/bzowLGE9aS5maW5kKEkpLmVxKG8pKSxhKTtlPT09ZWV8fHQuaGFzQ2xhc3ModSk/ZHQocik6eW4odCxmdW5jdGlvbigpe2R0KHIpfSl9fWZ1bmN0aW9uIGR0KGUpe2UubGVuZ3RoJiZVbihlLmNsb3Nlc3QoRSksZSl9ZnVuY3Rpb24gZnQoZSxuLHQsbyl7dmFyIGk9XCJcIjtWLmFuY2hvcnMubGVuZ3RoJiYhVi5sb2NrQW5jaG9ycyYmKGU/KHZvaWQgMCE9PXQmJihpPXQpLHZvaWQgMD09PW4mJihuPWUpLG5lPW4sdXQoaStcIi9cIituKSk6dm9pZCAwIT09ZT8obmU9bix1dCh0KSk6dXQodCkpLGh0KCl9ZnVuY3Rpb24gdXQoZSl7aWYoVi5yZWNvcmRIaXN0b3J5KWxvY2F0aW9uLmhhc2g9ZTtlbHNlIGlmKGFlfHxyZSluLmhpc3RvcnkucmVwbGFjZVN0YXRlKGksaSxcIiNcIitlKTtlbHNle3ZhciB0PW4ubG9jYXRpb24uaHJlZi5zcGxpdChcIiNcIilbMF07bi5sb2NhdGlvbi5yZXBsYWNlKHQrXCIjXCIrZSl9fWZ1bmN0aW9uIHZ0KGUpe3ZhciBuPWUuZGF0YShcImFuY2hvclwiKSx0PWUuaW5kZXgoKTtyZXR1cm4gdm9pZCAwPT09biYmKG49dCksbn1mdW5jdGlvbiBodCgpe3ZhciBuPWUoUyksdD1uLmZpbmQoTCksbz12dChuKSxpPXZ0KHQpLGE9U3RyaW5nKG8pO3QubGVuZ3RoJiYoYT1hK1wiLVwiK2kpLGE9YS5yZXBsYWNlKFwiL1wiLFwiLVwiKS5yZXBsYWNlKFwiI1wiLFwiXCIpO3ZhciByPW5ldyBSZWdFeHAoXCJcXFxcYlxcXFxzP1wiK2YrXCItW15cXFxcc10rXFxcXGJcIixcImdcIik7X1swXS5jbGFzc05hbWU9X1swXS5jbGFzc05hbWUucmVwbGFjZShyLFwiXCIpLF8uYWRkQ2xhc3MoZitcIi1cIithKX1mdW5jdGlvbiBwdCgpe3JldHVybiBuLlBvaW50ZXJFdmVudD97ZG93bjpcInBvaW50ZXJkb3duXCIsbW92ZTpcInBvaW50ZXJtb3ZlXCJ9Ontkb3duOlwiTVNQb2ludGVyRG93blwiLG1vdmU6XCJNU1BvaW50ZXJNb3ZlXCJ9fWZ1bmN0aW9uIGd0KGUpe3ZhciBuPVtdO3JldHVybiBuLnk9dm9pZCAwIT09ZS5wYWdlWSYmKGUucGFnZVl8fGUucGFnZVgpP2UucGFnZVk6ZS50b3VjaGVzWzBdLnBhZ2VZLG4ueD12b2lkIDAhPT1lLnBhZ2VYJiYoZS5wYWdlWXx8ZS5wYWdlWCk/ZS5wYWdlWDplLnRvdWNoZXNbMF0ucGFnZVgscmUmJnBuKGUpJiZWLnNjcm9sbEJhciYmdm9pZCAwIT09ZS50b3VjaGVzJiYobi55PWUudG91Y2hlc1swXS5wYWdlWSxuLng9ZS50b3VjaGVzWzBdLnBhZ2VYKSxufWZ1bmN0aW9uIG10KGUsbil7amUoMCxcImludGVybmFsXCIpLHZvaWQgMCE9PW4mJihjZT0hMCksVW4oZS5jbG9zZXN0KEUpLGUpLHZvaWQgMCE9PW4mJihjZT0hMSksamUoTWUuc2Nyb2xsaW5nU3BlZWQsXCJpbnRlcm5hbFwiKX1mdW5jdGlvbiBTdChlKXt2YXIgbj1vLnJvdW5kKGUpO1YuY3NzMyYmVi5hdXRvU2Nyb2xsaW5nJiYhVi5zY3JvbGxCYXI/bHQoXCJ0cmFuc2xhdGUzZCgwcHgsIC1cIituK1wicHgsIDBweClcIiwhMSk6Vi5hdXRvU2Nyb2xsaW5nJiYhVi5zY3JvbGxCYXI/bGUuY3NzKFwidG9wXCIsLW4pOkcuc2Nyb2xsVG9wKG4pfWZ1bmN0aW9uIHd0KGUpe3JldHVybntcIi13ZWJraXQtdHJhbnNmb3JtXCI6ZSxcIi1tb3otdHJhbnNmb3JtXCI6ZSxcIi1tcy10cmFuc2Zvcm1cIjplLHRyYW5zZm9ybTplfX1mdW5jdGlvbiBidChuLHQsbyl7XCJhbGxcIiE9PXQ/dmVbb11bdF09bjplLmVhY2goT2JqZWN0LmtleXModmVbb10pLGZ1bmN0aW9uKGUsdCl7dmVbb11bdF09bn0pfWZ1bmN0aW9uIHh0KGUpe3JldHVybiBlLmNzcyh7XCItd2Via2l0LXRyYW5zaXRpb25cIjpcIm5vbmVcIix0cmFuc2l0aW9uOlwibm9uZVwifSl9ZnVuY3Rpb24geXQoZSl7cmV0dXJuIG51bGwhPT1WW2VdJiZcIm9iamVjdFwiPT10eXBlb2YgVltlXT9WW2VdLmVuYWJsZWQmJiRbZV06VltlXSYmJFtlXX1mdW5jdGlvbiBDdChlLG4sdCl7aWYoeXQoZSkpcmV0dXJuICRbZV1bbl0odCl9ZnVuY3Rpb24gVHQoKXtyZXR1cm4geXQoXCJkcmFnQW5kTW92ZVwiKSYmJC5kcmFnQW5kTW92ZS5pc0FuaW1hdGluZ31mdW5jdGlvbiBBdCgpe3JldHVybiB5dChcImRyYWdBbmRNb3ZlXCIpJiYkLmRyYWdBbmRNb3ZlLmlzR3JhYmJpbmd9ZnVuY3Rpb24gTXQoZSxuLHQpe1ZbZV09bixcImludGVybmFsXCIhPT10JiYoTWVbZV09bil9ZnVuY3Rpb24ga3QoKXtlKFwiaHRtbFwiKS5oYXNDbGFzcyhkKT9PdChcImVycm9yXCIsXCJGdWxscGFnZS5qcyBjYW4gb25seSBiZSBpbml0aWFsaXplZCBvbmNlIGFuZCB5b3UgYXJlIGRvaW5nIGl0IG11bHRpcGxlIHRpbWVzIVwiKTooVi5jb250aW51b3VzVmVydGljYWwmJihWLmxvb3BUb3B8fFYubG9vcEJvdHRvbSkmJihWLmNvbnRpbnVvdXNWZXJ0aWNhbD0hMSxPdChcIndhcm5cIixcIk9wdGlvbiBgbG9vcFRvcC9sb29wQm90dG9tYCBpcyBtdXR1YWxseSBleGNsdXNpdmUgd2l0aCBgY29udGludW91c1ZlcnRpY2FsYDsgYGNvbnRpbnVvdXNWZXJ0aWNhbGAgZGlzYWJsZWRcIikpLFYuc2Nyb2xsQmFyJiZWLnNjcm9sbE92ZXJmbG93JiZPdChcIndhcm5cIixcIk9wdGlvbiBgc2Nyb2xsQmFyYCBpcyBtdXR1YWxseSBleGNsdXNpdmUgd2l0aCBgc2Nyb2xsT3ZlcmZsb3dgLiBTZWN0aW9ucyB3aXRoIHNjcm9sbE92ZXJmbG93IG1pZ2h0IG5vdCB3b3JrIHdlbGwgaW4gRmlyZWZveFwiKSwhVi5jb250aW51b3VzVmVydGljYWx8fCFWLnNjcm9sbEJhciYmVi5hdXRvU2Nyb2xsaW5nfHwoVi5jb250aW51b3VzVmVydGljYWw9ITEsT3QoXCJ3YXJuXCIsXCJTY3JvbGwgYmFycyAoYHNjcm9sbEJhcjp0cnVlYCBvciBgYXV0b1Njcm9sbGluZzpmYWxzZWApIGFyZSBtdXR1YWxseSBleGNsdXNpdmUgd2l0aCBgY29udGludW91c1ZlcnRpY2FsYDsgYGNvbnRpbnVvdXNWZXJ0aWNhbGAgZGlzYWJsZWRcIikpLFYuc2Nyb2xsT3ZlcmZsb3cmJiFWLnNjcm9sbE92ZXJmbG93SGFuZGxlciYmKFYuc2Nyb2xsT3ZlcmZsb3c9ITEsT3QoXCJlcnJvclwiLFwiVGhlIG9wdGlvbiBgc2Nyb2xsT3ZlcmZsb3c6dHJ1ZWAgcmVxdWlyZXMgdGhlIGZpbGUgYHNjcm9sbG92ZXJmbG93Lm1pbi5qc2AuIFBsZWFzZSBpbmNsdWRlIGl0IGJlZm9yZSBmdWxsUGFnZS5qcy5cIikpLGUuZWFjaChWLmFuY2hvcnMsZnVuY3Rpb24obix0KXt2YXIgbz1LLmZpbmQoXCJbbmFtZV1cIikuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcykuYXR0cihcIm5hbWVcIikmJmUodGhpcykuYXR0cihcIm5hbWVcIikudG9Mb3dlckNhc2UoKT09dC50b0xvd2VyQ2FzZSgpfSksaT1LLmZpbmQoXCJbaWRdXCIpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiBlKHRoaXMpLmF0dHIoXCJpZFwiKSYmZSh0aGlzKS5hdHRyKFwiaWRcIikudG9Mb3dlckNhc2UoKT09dC50b0xvd2VyQ2FzZSgpfSk7KGkubGVuZ3RofHxvLmxlbmd0aCkmJihPdChcImVycm9yXCIsXCJkYXRhLWFuY2hvciB0YWdzIGNhbiBub3QgaGF2ZSB0aGUgc2FtZSB2YWx1ZSBhcyBhbnkgYGlkYCBlbGVtZW50IG9uIHRoZSBzaXRlIChvciBgbmFtZWAgZWxlbWVudCBmb3IgSUUpLlwiKSxpLmxlbmd0aCYmT3QoXCJlcnJvclwiLCdcIicrdCsnXCIgaXMgaXMgYmVpbmcgdXNlZCBieSBhbm90aGVyIGVsZW1lbnQgYGlkYCBwcm9wZXJ0eScpLG8ubGVuZ3RoJiZPdChcImVycm9yXCIsJ1wiJyt0KydcIiBpcyBpcyBiZWluZyB1c2VkIGJ5IGFub3RoZXIgZWxlbWVudCBgbmFtZWAgcHJvcGVydHknKSl9KSl9ZnVuY3Rpb24gT3QoZSxuKXtjb25zb2xlJiZjb25zb2xlW2VdJiZjb25zb2xlW2VdKFwiZnVsbFBhZ2U6IFwiK24pfX19KTsiLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLkFPUz10KCk6ZS5BT1M9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQobyl7aWYobltvXSlyZXR1cm4gbltvXS5leHBvcnRzO3ZhciBpPW5bb109e2V4cG9ydHM6e30saWQ6byxsb2FkZWQ6ITF9O3JldHVybiBlW29dLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLHQpLGkubG9hZGVkPSEwLGkuZXhwb3J0c312YXIgbj17fTtyZXR1cm4gdC5tPWUsdC5jPW4sdC5wPVwiZGlzdC9cIix0KDApfShbZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG8oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBpPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPWFyZ3VtZW50c1t0XTtmb3IodmFyIG8gaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixvKSYmKGVbb109bltvXSl9cmV0dXJuIGV9LHI9bigxKSxhPShvKHIpLG4oNikpLHU9byhhKSxjPW4oNykscz1vKGMpLGY9big4KSxkPW8oZiksbD1uKDkpLHA9byhsKSxtPW4oMTApLGI9byhtKSx2PW4oMTEpLHk9byh2KSxnPW4oMTQpLGg9byhnKSx3PVtdLGs9ITEseD17b2Zmc2V0OjEyMCxkZWxheTowLGVhc2luZzpcImVhc2VcIixkdXJhdGlvbjo0MDAsZGlzYWJsZTohMSxvbmNlOiExLHN0YXJ0RXZlbnQ6XCJET01Db250ZW50TG9hZGVkXCIsdGhyb3R0bGVEZWxheTo5OSxkZWJvdW5jZURlbGF5OjUwLGRpc2FibGVNdXRhdGlvbk9ic2VydmVyOiExfSxqPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0mJmFyZ3VtZW50c1swXTtpZihlJiYoaz0hMCksaylyZXR1cm4gdz0oMCx5LmRlZmF1bHQpKHcseCksKDAsYi5kZWZhdWx0KSh3LHgub25jZSksd30sTz1mdW5jdGlvbigpe3c9KDAsaC5kZWZhdWx0KSgpLGooKX0sTT1mdW5jdGlvbigpe3cuZm9yRWFjaChmdW5jdGlvbihlLHQpe2Uubm9kZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWFvc1wiKSxlLm5vZGUucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1hb3MtZWFzaW5nXCIpLGUubm9kZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWFvcy1kdXJhdGlvblwiKSxlLm5vZGUucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1hb3MtZGVsYXlcIil9KX0sUz1mdW5jdGlvbihlKXtyZXR1cm4gZT09PSEwfHxcIm1vYmlsZVwiPT09ZSYmcC5kZWZhdWx0Lm1vYmlsZSgpfHxcInBob25lXCI9PT1lJiZwLmRlZmF1bHQucGhvbmUoKXx8XCJ0YWJsZXRcIj09PWUmJnAuZGVmYXVsdC50YWJsZXQoKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZSgpPT09ITB9LF89ZnVuY3Rpb24oZSl7eD1pKHgsZSksdz0oMCxoLmRlZmF1bHQpKCk7dmFyIHQ9ZG9jdW1lbnQuYWxsJiYhd2luZG93LmF0b2I7cmV0dXJuIFMoeC5kaXNhYmxlKXx8dD9NKCk6KHguZGlzYWJsZU11dGF0aW9uT2JzZXJ2ZXJ8fGQuZGVmYXVsdC5pc1N1cHBvcnRlZCgpfHwoY29uc29sZS5pbmZvKCdcXG4gICAgICBhb3M6IE11dGF0aW9uT2JzZXJ2ZXIgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGJyb3dzZXIsXFxuICAgICAgY29kZSBtdXRhdGlvbnMgb2JzZXJ2aW5nIGhhcyBiZWVuIGRpc2FibGVkLlxcbiAgICAgIFlvdSBtYXkgaGF2ZSB0byBjYWxsIFwicmVmcmVzaEhhcmQoKVwiIGJ5IHlvdXJzZWxmLlxcbiAgICAnKSx4LmRpc2FibGVNdXRhdGlvbk9ic2VydmVyPSEwKSxkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFvcy1lYXNpbmdcIix4LmVhc2luZyksZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIikuc2V0QXR0cmlidXRlKFwiZGF0YS1hb3MtZHVyYXRpb25cIix4LmR1cmF0aW9uKSxkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFvcy1kZWxheVwiLHguZGVsYXkpLFwiRE9NQ29udGVudExvYWRlZFwiPT09eC5zdGFydEV2ZW50JiZbXCJjb21wbGV0ZVwiLFwiaW50ZXJhY3RpdmVcIl0uaW5kZXhPZihkb2N1bWVudC5yZWFkeVN0YXRlKT4tMT9qKCEwKTpcImxvYWRcIj09PXguc3RhcnRFdmVudD93aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcih4LnN0YXJ0RXZlbnQsZnVuY3Rpb24oKXtqKCEwKX0pOmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoeC5zdGFydEV2ZW50LGZ1bmN0aW9uKCl7aighMCl9KSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCgwLHMuZGVmYXVsdCkoaix4LmRlYm91bmNlRGVsYXksITApKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9yaWVudGF0aW9uY2hhbmdlXCIsKDAscy5kZWZhdWx0KShqLHguZGVib3VuY2VEZWxheSwhMCkpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsKDAsdS5kZWZhdWx0KShmdW5jdGlvbigpeygwLGIuZGVmYXVsdCkodyx4Lm9uY2UpfSx4LnRocm90dGxlRGVsYXkpKSx4LmRpc2FibGVNdXRhdGlvbk9ic2VydmVyfHxkLmRlZmF1bHQucmVhZHkoXCJbZGF0YS1hb3NdXCIsTyksdyl9O2UuZXhwb3J0cz17aW5pdDpfLHJlZnJlc2g6aixyZWZyZXNoSGFyZDpPfX0sZnVuY3Rpb24oZSx0KXt9LCwsLCxmdW5jdGlvbihlLHQpeyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUsdCxuKXtmdW5jdGlvbiBvKHQpe3ZhciBuPWIsbz12O3JldHVybiBiPXY9dm9pZCAwLGs9dCxnPWUuYXBwbHkobyxuKX1mdW5jdGlvbiByKGUpe3JldHVybiBrPWUsaD1zZXRUaW1lb3V0KGYsdCksTT9vKGUpOmd9ZnVuY3Rpb24gYShlKXt2YXIgbj1lLXcsbz1lLWssaT10LW47cmV0dXJuIFM/aihpLHktbyk6aX1mdW5jdGlvbiBjKGUpe3ZhciBuPWUtdyxvPWUtaztyZXR1cm4gdm9pZCAwPT09d3x8bj49dHx8bjwwfHxTJiZvPj15fWZ1bmN0aW9uIGYoKXt2YXIgZT1PKCk7cmV0dXJuIGMoZSk/ZChlKTp2b2lkKGg9c2V0VGltZW91dChmLGEoZSkpKX1mdW5jdGlvbiBkKGUpe3JldHVybiBoPXZvaWQgMCxfJiZiP28oZSk6KGI9dj12b2lkIDAsZyl9ZnVuY3Rpb24gbCgpe3ZvaWQgMCE9PWgmJmNsZWFyVGltZW91dChoKSxrPTAsYj13PXY9aD12b2lkIDB9ZnVuY3Rpb24gcCgpe3JldHVybiB2b2lkIDA9PT1oP2c6ZChPKCkpfWZ1bmN0aW9uIG0oKXt2YXIgZT1PKCksbj1jKGUpO2lmKGI9YXJndW1lbnRzLHY9dGhpcyx3PWUsbil7aWYodm9pZCAwPT09aClyZXR1cm4gcih3KTtpZihTKXJldHVybiBoPXNldFRpbWVvdXQoZix0KSxvKHcpfXJldHVybiB2b2lkIDA9PT1oJiYoaD1zZXRUaW1lb3V0KGYsdCkpLGd9dmFyIGIsdix5LGcsaCx3LGs9MCxNPSExLFM9ITEsXz0hMDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3Iocyk7cmV0dXJuIHQ9dSh0KXx8MCxpKG4pJiYoTT0hIW4ubGVhZGluZyxTPVwibWF4V2FpdFwiaW4gbix5PVM/eCh1KG4ubWF4V2FpdCl8fDAsdCk6eSxfPVwidHJhaWxpbmdcImluIG4/ISFuLnRyYWlsaW5nOl8pLG0uY2FuY2VsPWwsbS5mbHVzaD1wLG19ZnVuY3Rpb24gbyhlLHQsbyl7dmFyIHI9ITAsYT0hMDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3Iocyk7cmV0dXJuIGkobykmJihyPVwibGVhZGluZ1wiaW4gbz8hIW8ubGVhZGluZzpyLGE9XCJ0cmFpbGluZ1wiaW4gbz8hIW8udHJhaWxpbmc6YSksbihlLHQse2xlYWRpbmc6cixtYXhXYWl0OnQsdHJhaWxpbmc6YX0pfWZ1bmN0aW9uIGkoZSl7dmFyIHQ9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpjKGUpO3JldHVybiEhZSYmKFwib2JqZWN0XCI9PXR8fFwiZnVuY3Rpb25cIj09dCl9ZnVuY3Rpb24gcihlKXtyZXR1cm4hIWUmJlwib2JqZWN0XCI9PShcInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOmMoZSkpfWZ1bmN0aW9uIGEoZSl7cmV0dXJuXCJzeW1ib2xcIj09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6YyhlKSl8fHIoZSkmJmsuY2FsbChlKT09ZH1mdW5jdGlvbiB1KGUpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXJldHVybiBlO2lmKGEoZSkpcmV0dXJuIGY7aWYoaShlKSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgZS52YWx1ZU9mP2UudmFsdWVPZigpOmU7ZT1pKHQpP3QrXCJcIjp0fWlmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiAwPT09ZT9lOitlO2U9ZS5yZXBsYWNlKGwsXCJcIik7dmFyIG49bS50ZXN0KGUpO3JldHVybiBufHxiLnRlc3QoZSk/dihlLnNsaWNlKDIpLG4/Mjo4KTpwLnRlc3QoZSk/ZjorZX12YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxzPVwiRXhwZWN0ZWQgYSBmdW5jdGlvblwiLGY9TmFOLGQ9XCJbb2JqZWN0IFN5bWJvbF1cIixsPS9eXFxzK3xcXHMrJC9nLHA9L15bLStdMHhbMC05YS1mXSskL2ksbT0vXjBiWzAxXSskL2ksYj0vXjBvWzAtN10rJC9pLHY9cGFyc2VJbnQseT1cIm9iamVjdFwiPT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHQ/XCJ1bmRlZmluZWRcIjpjKHQpKSYmdCYmdC5PYmplY3Q9PT1PYmplY3QmJnQsZz1cIm9iamVjdFwiPT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHNlbGY/XCJ1bmRlZmluZWRcIjpjKHNlbGYpKSYmc2VsZiYmc2VsZi5PYmplY3Q9PT1PYmplY3QmJnNlbGYsaD15fHxnfHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCksdz1PYmplY3QucHJvdG90eXBlLGs9dy50b1N0cmluZyx4PU1hdGgubWF4LGo9TWF0aC5taW4sTz1mdW5jdGlvbigpe3JldHVybiBoLkRhdGUubm93KCl9O2UuZXhwb3J0cz1vfSkuY2FsbCh0LGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCkpfSxmdW5jdGlvbihlLHQpeyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUsdCxuKXtmdW5jdGlvbiBpKHQpe3ZhciBuPWIsbz12O3JldHVybiBiPXY9dm9pZCAwLE89dCxnPWUuYXBwbHkobyxuKX1mdW5jdGlvbiByKGUpe3JldHVybiBPPWUsaD1zZXRUaW1lb3V0KGYsdCksTT9pKGUpOmd9ZnVuY3Rpb24gdShlKXt2YXIgbj1lLXcsbz1lLU8saT10LW47cmV0dXJuIFM/eChpLHktbyk6aX1mdW5jdGlvbiBzKGUpe3ZhciBuPWUtdyxvPWUtTztyZXR1cm4gdm9pZCAwPT09d3x8bj49dHx8bjwwfHxTJiZvPj15fWZ1bmN0aW9uIGYoKXt2YXIgZT1qKCk7cmV0dXJuIHMoZSk/ZChlKTp2b2lkKGg9c2V0VGltZW91dChmLHUoZSkpKX1mdW5jdGlvbiBkKGUpe3JldHVybiBoPXZvaWQgMCxfJiZiP2koZSk6KGI9dj12b2lkIDAsZyl9ZnVuY3Rpb24gbCgpe3ZvaWQgMCE9PWgmJmNsZWFyVGltZW91dChoKSxPPTAsYj13PXY9aD12b2lkIDB9ZnVuY3Rpb24gcCgpe3JldHVybiB2b2lkIDA9PT1oP2c6ZChqKCkpfWZ1bmN0aW9uIG0oKXt2YXIgZT1qKCksbj1zKGUpO2lmKGI9YXJndW1lbnRzLHY9dGhpcyx3PWUsbil7aWYodm9pZCAwPT09aClyZXR1cm4gcih3KTtpZihTKXJldHVybiBoPXNldFRpbWVvdXQoZix0KSxpKHcpfXJldHVybiB2b2lkIDA9PT1oJiYoaD1zZXRUaW1lb3V0KGYsdCkpLGd9dmFyIGIsdix5LGcsaCx3LE89MCxNPSExLFM9ITEsXz0hMDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoYyk7cmV0dXJuIHQ9YSh0KXx8MCxvKG4pJiYoTT0hIW4ubGVhZGluZyxTPVwibWF4V2FpdFwiaW4gbix5PVM/ayhhKG4ubWF4V2FpdCl8fDAsdCk6eSxfPVwidHJhaWxpbmdcImluIG4/ISFuLnRyYWlsaW5nOl8pLG0uY2FuY2VsPWwsbS5mbHVzaD1wLG19ZnVuY3Rpb24gbyhlKXt2YXIgdD1cInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOnUoZSk7cmV0dXJuISFlJiYoXCJvYmplY3RcIj09dHx8XCJmdW5jdGlvblwiPT10KX1mdW5jdGlvbiBpKGUpe3JldHVybiEhZSYmXCJvYmplY3RcIj09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6dShlKSl9ZnVuY3Rpb24gcihlKXtyZXR1cm5cInN5bWJvbFwiPT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjp1KGUpKXx8aShlKSYmdy5jYWxsKGUpPT1mfWZ1bmN0aW9uIGEoZSl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpcmV0dXJuIGU7aWYocihlKSlyZXR1cm4gcztpZihvKGUpKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnZhbHVlT2Y/ZS52YWx1ZU9mKCk6ZTtlPW8odCk/dCtcIlwiOnR9aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIDA9PT1lP2U6K2U7ZT1lLnJlcGxhY2UoZCxcIlwiKTt2YXIgbj1wLnRlc3QoZSk7cmV0dXJuIG58fG0udGVzdChlKT9iKGUuc2xpY2UoMiksbj8yOjgpOmwudGVzdChlKT9zOitlfXZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9LGM9XCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCIscz1OYU4sZj1cIltvYmplY3QgU3ltYm9sXVwiLGQ9L15cXHMrfFxccyskL2csbD0vXlstK10weFswLTlhLWZdKyQvaSxwPS9eMGJbMDFdKyQvaSxtPS9eMG9bMC03XSskL2ksYj1wYXJzZUludCx2PVwib2JqZWN0XCI9PShcInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOnUodCkpJiZ0JiZ0Lk9iamVjdD09PU9iamVjdCYmdCx5PVwib2JqZWN0XCI9PShcInVuZGVmaW5lZFwiPT10eXBlb2Ygc2VsZj9cInVuZGVmaW5lZFwiOnUoc2VsZikpJiZzZWxmJiZzZWxmLk9iamVjdD09PU9iamVjdCYmc2VsZixnPXZ8fHl8fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSxoPU9iamVjdC5wcm90b3R5cGUsdz1oLnRvU3RyaW5nLGs9TWF0aC5tYXgseD1NYXRoLm1pbixqPWZ1bmN0aW9uKCl7cmV0dXJuIGcuRGF0ZS5ub3coKX07ZS5leHBvcnRzPW59KS5jYWxsKHQsZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKSl9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXt2YXIgdD12b2lkIDAsbz12b2lkIDAsaT12b2lkIDA7Zm9yKHQ9MDt0PGUubGVuZ3RoO3QrPTEpe2lmKG89ZVt0XSxvLmRhdGFzZXQmJm8uZGF0YXNldC5hb3MpcmV0dXJuITA7aWYoaT1vLmNoaWxkcmVuJiZuKG8uY2hpbGRyZW4pKXJldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIG8oKXtyZXR1cm4gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXJ8fHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyfHx3aW5kb3cuTW96TXV0YXRpb25PYnNlcnZlcn1mdW5jdGlvbiBpKCl7cmV0dXJuISFvKCl9ZnVuY3Rpb24gcihlLHQpe3ZhciBuPXdpbmRvdy5kb2N1bWVudCxpPW8oKSxyPW5ldyBpKGEpO3U9dCxyLm9ic2VydmUobi5kb2N1bWVudEVsZW1lbnQse2NoaWxkTGlzdDohMCxzdWJ0cmVlOiEwLHJlbW92ZWROb2RlczohMH0pfWZ1bmN0aW9uIGEoZSl7ZSYmZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUuYWRkZWROb2Rlcyksbz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlLnJlbW92ZWROb2RlcyksaT10LmNvbmNhdChvKTtpZihuKGkpKXJldHVybiB1KCl9KX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgdT1mdW5jdGlvbigpe307dC5kZWZhdWx0PXtpc1N1cHBvcnRlZDppLHJlYWR5OnJ9fSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIG8oKXtyZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudHx8bmF2aWdhdG9yLnZlbmRvcnx8d2luZG93Lm9wZXJhfHxcIlwifU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgbz10W25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG8mJihvLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvLmtleSxvKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixvKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxvJiZlKHQsbyksdH19KCkscj0vKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vL2ksYT0vMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaSx1PS8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm98YW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsvaSxjPS8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7bih0aGlzLGUpfXJldHVybiBpKGUsW3trZXk6XCJwaG9uZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9bygpO3JldHVybiEoIXIudGVzdChlKSYmIWEudGVzdChlLnN1YnN0cigwLDQpKSl9fSx7a2V5OlwibW9iaWxlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1vKCk7cmV0dXJuISghdS50ZXN0KGUpJiYhYy50ZXN0KGUuc3Vic3RyKDAsNCkpKX19LHtrZXk6XCJ0YWJsZXRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1vYmlsZSgpJiYhdGhpcy5waG9uZSgpfX1dKSxlfSgpO3QuZGVmYXVsdD1uZXcgc30sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbihlLHQsbil7dmFyIG89ZS5ub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtYW9zLW9uY2VcIik7dD5lLnBvc2l0aW9uP2Uubm9kZS5jbGFzc0xpc3QuYWRkKFwiYW9zLWFuaW1hdGVcIik6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG8mJihcImZhbHNlXCI9PT1vfHwhbiYmXCJ0cnVlXCIhPT1vKSYmZS5ub2RlLmNsYXNzTGlzdC5yZW1vdmUoXCJhb3MtYW5pbWF0ZVwiKX0sbz1mdW5jdGlvbihlLHQpe3ZhciBvPXdpbmRvdy5wYWdlWU9mZnNldCxpPXdpbmRvdy5pbm5lckhlaWdodDtlLmZvckVhY2goZnVuY3Rpb24oZSxyKXtuKGUsaStvLHQpfSl9O3QuZGVmYXVsdD1vfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9bigxMikscj1vKGkpLGE9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUsbil7ZS5ub2RlLmNsYXNzTGlzdC5hZGQoXCJhb3MtaW5pdFwiKSxlLnBvc2l0aW9uPSgwLHIuZGVmYXVsdCkoZS5ub2RlLHQub2Zmc2V0KX0pLGV9O3QuZGVmYXVsdD1hfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9bigxMykscj1vKGkpLGE9ZnVuY3Rpb24oZSx0KXt2YXIgbj0wLG89MCxpPXdpbmRvdy5pbm5lckhlaWdodCxhPXtvZmZzZXQ6ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWFvcy1vZmZzZXRcIiksYW5jaG9yOmUuZ2V0QXR0cmlidXRlKFwiZGF0YS1hb3MtYW5jaG9yXCIpLGFuY2hvclBsYWNlbWVudDplLmdldEF0dHJpYnV0ZShcImRhdGEtYW9zLWFuY2hvci1wbGFjZW1lbnRcIil9O3N3aXRjaChhLm9mZnNldCYmIWlzTmFOKGEub2Zmc2V0KSYmKG89cGFyc2VJbnQoYS5vZmZzZXQpKSxhLmFuY2hvciYmZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChhLmFuY2hvcikmJihlPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYS5hbmNob3IpWzBdKSxuPSgwLHIuZGVmYXVsdCkoZSkudG9wLGEuYW5jaG9yUGxhY2VtZW50KXtjYXNlXCJ0b3AtYm90dG9tXCI6YnJlYWs7Y2FzZVwiY2VudGVyLWJvdHRvbVwiOm4rPWUub2Zmc2V0SGVpZ2h0LzI7YnJlYWs7Y2FzZVwiYm90dG9tLWJvdHRvbVwiOm4rPWUub2Zmc2V0SGVpZ2h0O2JyZWFrO2Nhc2VcInRvcC1jZW50ZXJcIjpuKz1pLzI7YnJlYWs7Y2FzZVwiYm90dG9tLWNlbnRlclwiOm4rPWkvMitlLm9mZnNldEhlaWdodDticmVhaztjYXNlXCJjZW50ZXItY2VudGVyXCI6bis9aS8yK2Uub2Zmc2V0SGVpZ2h0LzI7YnJlYWs7Y2FzZVwidG9wLXRvcFwiOm4rPWk7YnJlYWs7Y2FzZVwiYm90dG9tLXRvcFwiOm4rPWUub2Zmc2V0SGVpZ2h0K2k7YnJlYWs7Y2FzZVwiY2VudGVyLXRvcFwiOm4rPWUub2Zmc2V0SGVpZ2h0LzIraX1yZXR1cm4gYS5hbmNob3JQbGFjZW1lbnR8fGEub2Zmc2V0fHxpc05hTih0KXx8KG89dCksbitvfTt0LmRlZmF1bHQ9YX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxuPTA7ZSYmIWlzTmFOKGUub2Zmc2V0TGVmdCkmJiFpc05hTihlLm9mZnNldFRvcCk7KXQrPWUub2Zmc2V0TGVmdC0oXCJCT0RZXCIhPWUudGFnTmFtZT9lLnNjcm9sbExlZnQ6MCksbis9ZS5vZmZzZXRUb3AtKFwiQk9EWVwiIT1lLnRhZ05hbWU/ZS5zY3JvbGxUb3A6MCksZT1lLm9mZnNldFBhcmVudDtyZXR1cm57dG9wOm4sbGVmdDp0fX07dC5kZWZhdWx0PW59LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oZSl7cmV0dXJuIGU9ZXx8ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWFvc11cIiksQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGUsZnVuY3Rpb24oZSl7cmV0dXJue25vZGU6ZX19KX07dC5kZWZhdWx0PW59XSl9KTsiXX0=
